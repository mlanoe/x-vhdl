/**
 * Copyright (c) 2014 mlanoe
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *   
 * Contributors:
 *     mlanoe - initial API and implementation
 */
package net.mlanoe.language.vhdl.type.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.mlanoe.language.vhdl.type.util.TypeAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TypeItemProviderAdapterFactory extends TypeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.AccessTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessTypeDefinitionItemProvider accessTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.AccessTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessTypeDefinitionAdapter() {
		if (accessTypeDefinitionItemProvider == null) {
			accessTypeDefinitionItemProvider = new AccessTypeDefinitionItemProvider(this);
		}

		return accessTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.RecordTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordTypeDefinitionItemProvider recordTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.RecordTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordTypeDefinitionAdapter() {
		if (recordTypeDefinitionItemProvider == null) {
			recordTypeDefinitionItemProvider = new RecordTypeDefinitionItemProvider(this);
		}

		return recordTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.ArrayTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeDefinitionItemProvider arrayTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.ArrayTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeDefinitionAdapter() {
		if (arrayTypeDefinitionItemProvider == null) {
			arrayTypeDefinitionItemProvider = new ArrayTypeDefinitionItemProvider(this);
		}

		return arrayTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.ConstrainedArrayTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstrainedArrayTypeDefinitionItemProvider constrainedArrayTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.ConstrainedArrayTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstrainedArrayTypeDefinitionAdapter() {
		if (constrainedArrayTypeDefinitionItemProvider == null) {
			constrainedArrayTypeDefinitionItemProvider = new ConstrainedArrayTypeDefinitionItemProvider(this);
		}

		return constrainedArrayTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.UnconstrainedArrayTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnconstrainedArrayTypeDefinitionItemProvider unconstrainedArrayTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.UnconstrainedArrayTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnconstrainedArrayTypeDefinitionAdapter() {
		if (unconstrainedArrayTypeDefinitionItemProvider == null) {
			unconstrainedArrayTypeDefinitionItemProvider = new UnconstrainedArrayTypeDefinitionItemProvider(this);
		}

		return unconstrainedArrayTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.EnumerationTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationTypeDefinitionItemProvider enumerationTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.EnumerationTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationTypeDefinitionAdapter() {
		if (enumerationTypeDefinitionItemProvider == null) {
			enumerationTypeDefinitionItemProvider = new EnumerationTypeDefinitionItemProvider(this);
		}

		return enumerationTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.FileTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileTypeDefinitionItemProvider fileTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.FileTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileTypeDefinitionAdapter() {
		if (fileTypeDefinitionItemProvider == null) {
			fileTypeDefinitionItemProvider = new FileTypeDefinitionItemProvider(this);
		}

		return fileTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.PhysicalTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalTypeDefinitionItemProvider physicalTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.PhysicalTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalTypeDefinitionAdapter() {
		if (physicalTypeDefinitionItemProvider == null) {
			physicalTypeDefinitionItemProvider = new PhysicalTypeDefinitionItemProvider(this);
		}

		return physicalTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.PhysicalTypeDefinitionSecondary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalTypeDefinitionSecondaryItemProvider physicalTypeDefinitionSecondaryItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.PhysicalTypeDefinitionSecondary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalTypeDefinitionSecondaryAdapter() {
		if (physicalTypeDefinitionSecondaryItemProvider == null) {
			physicalTypeDefinitionSecondaryItemProvider = new PhysicalTypeDefinitionSecondaryItemProvider(this);
		}

		return physicalTypeDefinitionSecondaryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.RangeTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeTypeDefinitionItemProvider rangeTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.RangeTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeTypeDefinitionAdapter() {
		if (rangeTypeDefinitionItemProvider == null) {
			rangeTypeDefinitionItemProvider = new RangeTypeDefinitionItemProvider(this);
		}

		return rangeTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.mlanoe.language.vhdl.type.RecordTypeElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordTypeElementItemProvider recordTypeElementItemProvider;

	/**
	 * This creates an adapter for a {@link net.mlanoe.language.vhdl.type.RecordTypeElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordTypeElementAdapter() {
		if (recordTypeElementItemProvider == null) {
			recordTypeElementItemProvider = new RecordTypeElementItemProvider(this);
		}

		return recordTypeElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (accessTypeDefinitionItemProvider != null) accessTypeDefinitionItemProvider.dispose();
		if (recordTypeDefinitionItemProvider != null) recordTypeDefinitionItemProvider.dispose();
		if (arrayTypeDefinitionItemProvider != null) arrayTypeDefinitionItemProvider.dispose();
		if (constrainedArrayTypeDefinitionItemProvider != null) constrainedArrayTypeDefinitionItemProvider.dispose();
		if (unconstrainedArrayTypeDefinitionItemProvider != null) unconstrainedArrayTypeDefinitionItemProvider.dispose();
		if (enumerationTypeDefinitionItemProvider != null) enumerationTypeDefinitionItemProvider.dispose();
		if (fileTypeDefinitionItemProvider != null) fileTypeDefinitionItemProvider.dispose();
		if (physicalTypeDefinitionItemProvider != null) physicalTypeDefinitionItemProvider.dispose();
		if (physicalTypeDefinitionSecondaryItemProvider != null) physicalTypeDefinitionSecondaryItemProvider.dispose();
		if (rangeTypeDefinitionItemProvider != null) rangeTypeDefinitionItemProvider.dispose();
		if (recordTypeElementItemProvider != null) recordTypeElementItemProvider.dispose();
	}

}
