
/*
* generated by Xtext
*/
lexer grammar InternalVhdlLexer;


@header {
package net.mlanoe.language.vhdl.xtext.ui.contentassist.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}




Configuration : ('C'|'c')('O'|'o')('N'|'n')('F'|'f')('I'|'i')('G'|'g')('U'|'u')('R'|'r')('A'|'a')('T'|'t')('I'|'i')('O'|'o')('N'|'n');

Architecture : ('A'|'a')('R'|'r')('C'|'c')('H'|'h')('I'|'i')('T'|'t')('E'|'e')('C'|'c')('T'|'t')('U'|'u')('R'|'r')('E'|'e');

Disconnect : ('D'|'d')('I'|'i')('S'|'s')('C'|'c')('O'|'o')('N'|'n')('N'|'n')('E'|'e')('C'|'c')('T'|'t');

Procedural : ('P'|'p')('R'|'r')('O'|'o')('C'|'c')('E'|'e')('D'|'d')('U'|'u')('R'|'r')('A'|'a')('L'|'l');

Unaffected : ('U'|'u')('N'|'n')('A'|'a')('F'|'f')('F'|'f')('E'|'e')('C'|'c')('T'|'t')('E'|'e')('D'|'d');

Attribute : ('A'|'a')('T'|'t')('T'|'t')('R'|'r')('I'|'i')('B'|'b')('U'|'u')('T'|'t')('E'|'e');

Component : ('C'|'c')('O'|'o')('M'|'m')('P'|'p')('O'|'o')('N'|'n')('E'|'e')('N'|'n')('T'|'t');

Postponed : ('P'|'p')('O'|'o')('S'|'s')('T'|'t')('P'|'p')('O'|'o')('N'|'n')('E'|'e')('D'|'d');

Procedure : ('P'|'p')('R'|'r')('O'|'o')('C'|'c')('E'|'e')('D'|'d')('U'|'u')('R'|'r')('E'|'e');

Reference : ('R'|'r')('E'|'e')('F'|'f')('E'|'e')('R'|'r')('E'|'e')('N'|'n')('C'|'c')('E'|'e');

Subnature : ('S'|'s')('U'|'u')('B'|'b')('N'|'n')('A'|'a')('T'|'t')('U'|'u')('R'|'r')('E'|'e');

Tolerance : ('T'|'t')('O'|'o')('L'|'l')('E'|'e')('R'|'r')('A'|'a')('N'|'n')('C'|'c')('E'|'e');

Transport : ('T'|'t')('R'|'r')('A'|'a')('N'|'n')('S'|'s')('P'|'p')('O'|'o')('R'|'r')('T'|'t');

Constant : ('C'|'c')('O'|'o')('N'|'n')('S'|'s')('T'|'t')('A'|'a')('N'|'n')('T'|'t');

Function : ('F'|'f')('U'|'u')('N'|'n')('C'|'c')('T'|'t')('I'|'i')('O'|'o')('N'|'n');

Generate : ('G'|'g')('E'|'e')('N'|'n')('E'|'e')('R'|'r')('A'|'a')('T'|'t')('E'|'e');

Inertial : ('I'|'i')('N'|'n')('E'|'e')('R'|'r')('T'|'t')('I'|'i')('A'|'a')('L'|'l');

Quantity : ('Q'|'q')('U'|'u')('A'|'a')('N'|'n')('T'|'t')('I'|'i')('T'|'t')('Y'|'y');

Register : ('R'|'r')('E'|'e')('G'|'g')('I'|'i')('S'|'s')('T'|'t')('E'|'e')('R'|'r');

Severity : ('S'|'s')('E'|'e')('V'|'v')('E'|'e')('R'|'r')('I'|'i')('T'|'t')('Y'|'y');

Spectrum : ('S'|'s')('P'|'p')('E'|'e')('C'|'c')('T'|'t')('R'|'r')('U'|'u')('M'|'m');

Terminal : ('T'|'t')('E'|'e')('R'|'r')('M'|'m')('I'|'i')('N'|'n')('A'|'a')('L'|'l');

Variable : ('V'|'v')('A'|'a')('R'|'r')('I'|'i')('A'|'a')('B'|'b')('L'|'l')('E'|'e');

Generic : ('G'|'g')('E'|'e')('N'|'n')('E'|'e')('R'|'r')('I'|'i')('C'|'c');

Guarded : ('G'|'g')('U'|'u')('A'|'a')('R'|'r')('D'|'d')('E'|'e')('D'|'d');

Library : ('L'|'l')('I'|'i')('B'|'b')('R'|'r')('A'|'a')('R'|'r')('Y'|'y');

Linkage : ('L'|'l')('I'|'i')('N'|'n')('K'|'k')('A'|'a')('G'|'g')('E'|'e');

Literal : ('L'|'l')('I'|'i')('T'|'t')('E'|'e')('R'|'r')('A'|'a')('L'|'l');

Package : ('P'|'p')('A'|'a')('C'|'c')('K'|'k')('A'|'a')('G'|'g')('E'|'e');

Process : ('P'|'p')('R'|'r')('O'|'o')('C'|'c')('E'|'e')('S'|'s')('S'|'s');

Subtype : ('S'|'s')('U'|'u')('B'|'b')('T'|'t')('Y'|'y')('P'|'p')('E'|'e');

Through : ('T'|'t')('H'|'h')('R'|'r')('O'|'o')('U'|'u')('G'|'g')('H'|'h');

Access : ('A'|'a')('C'|'c')('C'|'c')('E'|'e')('S'|'s')('S'|'s');

Across : ('A'|'a')('C'|'c')('R'|'r')('O'|'o')('S'|'s')('S'|'s');

Assert : ('A'|'a')('S'|'s')('S'|'s')('E'|'e')('R'|'r')('T'|'t');

Buffer : ('B'|'b')('U'|'u')('F'|'f')('F'|'f')('E'|'e')('R'|'r');

Downto : ('D'|'d')('O'|'o')('W'|'w')('N'|'n')('T'|'t')('O'|'o');

Entity : ('E'|'e')('N'|'n')('T'|'t')('I'|'i')('T'|'t')('Y'|'y');

Impure : ('I'|'i')('M'|'m')('P'|'p')('U'|'u')('R'|'r')('E'|'e');

Nature : ('N'|'n')('A'|'a')('T'|'t')('U'|'u')('R'|'r')('E'|'e');

Others : ('O'|'o')('T'|'t')('H'|'h')('E'|'e')('R'|'r')('S'|'s');

Record : ('R'|'r')('E'|'e')('C'|'c')('O'|'o')('R'|'r')('D'|'d');

Reject : ('R'|'r')('E'|'e')('J'|'j')('E'|'e')('C'|'c')('T'|'t');

Report : ('R'|'r')('E'|'e')('P'|'p')('O'|'o')('R'|'r')('T'|'t');

Return : ('R'|'r')('E'|'e')('T'|'t')('U'|'u')('R'|'r')('N'|'n');

Select : ('S'|'s')('E'|'e')('L'|'l')('E'|'e')('C'|'c')('T'|'t');

Shared : ('S'|'s')('H'|'h')('A'|'a')('R'|'r')('E'|'e')('D'|'d');

Signal : ('S'|'s')('I'|'i')('G'|'g')('N'|'n')('A'|'a')('L'|'l');

After : ('A'|'a')('F'|'f')('T'|'t')('E'|'e')('R'|'r');

Alias : ('A'|'a')('L'|'l')('I'|'i')('A'|'a')('S'|'s');

Array : ('A'|'a')('R'|'r')('R'|'r')('A'|'a')('Y'|'y');

Begin : ('B'|'b')('E'|'e')('G'|'g')('I'|'i')('N'|'n');

Block : ('B'|'b')('L'|'l')('O'|'o')('C'|'c')('K'|'k');

Break : ('B'|'b')('R'|'r')('E'|'e')('A'|'a')('K'|'k');

Elsif : ('E'|'e')('L'|'l')('S'|'s')('I'|'i')('F'|'f');

Group : ('G'|'g')('R'|'r')('O'|'o')('U'|'u')('P'|'p');

Inout : ('I'|'i')('N'|'n')('O'|'o')('U'|'u')('T'|'t');

Label : ('L'|'l')('A'|'a')('B'|'b')('E'|'e')('L'|'l');

Limit : ('L'|'l')('I'|'i')('M'|'m')('I'|'i')('T'|'t');

Noise : ('N'|'n')('O'|'o')('I'|'i')('S'|'s')('E'|'e');

Range : ('R'|'r')('A'|'a')('N'|'n')('G'|'g')('E'|'e');

Units : ('U'|'u')('N'|'n')('I'|'i')('T'|'t')('S'|'s');

Until : ('U'|'u')('N'|'n')('T'|'t')('I'|'i')('L'|'l');

While : ('W'|'w')('H'|'h')('I'|'i')('L'|'l')('E'|'e');

Body : ('B'|'b')('O'|'o')('D'|'d')('Y'|'y');

Case : ('C'|'c')('A'|'a')('S'|'s')('E'|'e');

Else : ('E'|'e')('L'|'l')('S'|'s')('E'|'e');

Exit : ('E'|'e')('X'|'x')('I'|'i')('T'|'t');

File : ('F'|'f')('I'|'i')('L'|'l')('E'|'e');

Loop : ('L'|'l')('O'|'o')('O'|'o')('P'|'p');

Nand : ('N'|'n')('A'|'a')('N'|'n')('D'|'d');

Next : ('N'|'n')('E'|'e')('X'|'x')('T'|'t');

Null : ('N'|'n')('U'|'u')('L'|'l')('L'|'l');

Open : ('O'|'o')('P'|'p')('E'|'e')('N'|'n');

Port : ('P'|'p')('O'|'o')('R'|'r')('T'|'t');

Pure : ('P'|'p')('U'|'u')('R'|'r')('E'|'e');

Then : ('T'|'t')('H'|'h')('E'|'e')('N'|'n');

Type : ('T'|'t')('Y'|'y')('P'|'p')('E'|'e');

Wait : ('W'|'w')('A'|'a')('I'|'i')('T'|'t');

When : ('W'|'w')('H'|'h')('E'|'e')('N'|'n');

With : ('W'|'w')('I'|'i')('T'|'t')('H'|'h');

Xnor : ('X'|'x')('N'|'n')('O'|'o')('R'|'r');

Abs : ('A'|'a')('B'|'b')('S'|'s');

All : ('A'|'a')('L'|'l')('L'|'l');

And : ('A'|'a')('N'|'n')('D'|'d');

Bus : ('B'|'b')('U'|'u')('S'|'s');

End : ('E'|'e')('N'|'n')('D'|'d');

For : ('F'|'f')('O'|'o')('R'|'r');

Map : ('M'|'m')('A'|'a')('P'|'p');

Mod : ('M'|'m')('O'|'o')('D'|'d');

New : ('N'|'n')('E'|'e')('W'|'w');

Nor : ('N'|'n')('O'|'o')('R'|'r');

Not : ('N'|'n')('O'|'o')('T'|'t');

Out : ('O'|'o')('U'|'u')('T'|'t');

Rem : ('R'|'r')('E'|'e')('M'|'m');

Rol : ('R'|'r')('O'|'o')('L'|'l');

Ror : ('R'|'r')('O'|'o')('R'|'r');

Sla : ('S'|'s')('L'|'l')('A'|'a');

Sll : ('S'|'s')('L'|'l')('L'|'l');

Sra : ('S'|'s')('R'|'r')('A'|'a');

Srl : ('S'|'s')('R'|'r')('L'|'l');

Use : ('U'|'u')('S'|'s')('E'|'e');

Xor : ('X'|'x')('O'|'o')('R'|'r');

AsteriskAsterisk : '*''*';

SolidusEqualsSign : '/''=';

ColonEqualsSign : ':''=';

LessThanSignEqualsSign : '<''=';

LessThanSignGreaterThanSign : '<''>';

EqualsSignEqualsSign : '=''=';

EqualsSignGreaterThanSign : '=''>';

GreaterThanSignEqualsSign : '>''=';

If : ('I'|'i')('F'|'f');

In : ('I'|'i')('N'|'n');

Is : ('I'|'i')('S'|'s');

Of : ('O'|'o')('F'|'f');

On : ('O'|'o')('N'|'n');

Or : ('O'|'o')('R'|'r');

To : ('T'|'t')('O'|'o');

Ampersand : '&';

LeftParenthesis : '(';

RightParenthesis : ')';

Asterisk : '*';

PlusSign : '+';

Comma : ',';

HyphenMinus : '-';

FullStop : '.';

Solidus : '/';

Colon : ':';

Semicolon : ';';

LessThanSign : '<';

EqualsSign : '=';

GreaterThanSign : '>';

LeftSquareBracket : '[';

RightSquareBracket : ']';

VerticalLine : '|';



RULE_ABSTRACT_LITERAL : RULE_INTEGER_FRAGMENT (('.' RULE_INTEGER_FRAGMENT)?|'#' RULE_BASED_INTEGER_FRAGMENT ('.' RULE_BASED_INTEGER_FRAGMENT)? '#') RULE_EXPONENT_FRAGMENT?;

RULE_BIT_STRING_LITERAL : RULE_INTEGER_FRAGMENT? RULE_BASE_SPECIFIER_FRAGMENT RULE_STRING;

RULE_ID : '^'? RULE_LETTER_FRAGMENT ('_'|RULE_LETTER_OR_DIGIT_FRAGMENT)*;

RULE_EXTENDED_IDENTIFIER : '\\' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\r'|'\n')))+ '\\';

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"'|'\r'|'\n')))* '"';

RULE_CHAR : ('\'a\''|'\'b\''|'\'c\''|'\'d\''|'\'e\''|'\'f\''|'\'g\''|'\'h\''|'\'i\''|'\'j\''|'\'k\''|'\'l\''|'\'m\''|'\'n\''|'\'o\''|'\'p\''|'\'q\''|'\'r\''|'\'s\''|'\'t\''|'\'u\''|'\'v\''|'\'w\''|'\'x\''|'\'y\''|'\'z\''|'\'A\''|'\'B\''|'\'C\''|'\'D\''|'\'E\''|'\'F\''|'\'G\''|'\'H\''|'\'I\''|'\'J\''|'\'K\''|'\'L\''|'\'M\''|'\'N\''|'\'O\''|'\'P\''|'\'Q\''|'\'R\''|'\'S\''|'\'T\''|'\'U\''|'\'V\''|'\'W\''|'\'X\''|'\'Y\''|'\'Z\''|'\'0\''|'\'1\''|'\'2\''|'\'3\''|'\'4\''|'\'5\''|'\'6\''|'\'7\''|'\'8\''|'\'9\''|'\'&\''|'\'\'\''|'\'(\''|'\')\''|'\'+\''|'\',\''|'\'-\''|'\'.\''|'\'/\''|'\':\''|'\';\''|'\'<\''|'\'=\''|'\'>\''|'\'|\''|'\' \''|'\'#\''|'\'[\''|'\']\''|'\'_\''|'\'*\''|'\'"\''|'\'!\''|'\'$\''|'\'%\''|'\'@\''|'\'?\''|'\'^\''|'\'`\''|'\'{\''|'\'}\''|'\'~\''|'\'\u00A0\''|'\'\u00A1\''|'\'\u00A2\''|'\'\u00A3\''|'\'\u20AC\''|'\'\u00A5\''|'\'\u0160\''|'\'\u00A7\''|'\'\u0161\''|'\'\u00A9\''|'\'\u00AA\''|'\'\u00AB\''|'\'\u00AC\''|'\'\''|'\'\u00AE\''|'\'\u00AF\''|'\'\u00B0\''|'\'\u00B1\''|'\'\u00B2\''|'\'\u00B3\''|'\'\u017D\''|'\'\u00B5\''|'\'\u00B6\''|'\'\u00B7\''|'\'\u017E\''|'\'\u00B9\''|'\'\u00BA\''|'\'\u00BB\''|'\'\u0152\''|'\'\u0153\''|'\'\u0178\''|'\'\u00BF\''|'\'\u00C0\''|'\'\u00C1\''|'\'\u00C2\''|'\'\u00C3\''|'\'\u00C4\''|'\'\u00C5\''|'\'\u00C6\''|'\'\u00C7\''|'\'\u00C8\''|'\'\u00C9\''|'\'\u00CA\''|'\'\u00CB\''|'\'\u00CC\''|'\'\u00CD\''|'\'\u00CE\''|'\'\u00CF\''|'\'\u00D0\''|'\'\u00D1\''|'\'\u00D2\''|'\'\u00D3\''|'\'\u00D4\''|'\'\u00D5\''|'\'\u00D6\''|'\'\u00D7\''|'\'\u00D8\''|'\'\u00D9\''|'\'\u00DA\''|'\'\u00DB\''|'\'\u00DC\''|'\'\u00DD\''|'\'\u00DE\''|'\'\u00DF\''|'\'\u00E0\''|'\'\u00E1\''|'\'\u00E2\''|'\'\u00E3\''|'\'\u00E4\''|'\'\u00E5\''|'\'\u00E6\''|'\'\u00E7\''|'\'\u00E8\''|'\'\u00E9\''|'\'\u00EA\''|'\'\u00EB\''|'\'\u00EC\''|'\'\u00ED\''|'\'\u00EE\''|'\'\u00EF\''|'\'\u00F0\''|'\'\u00F1\''|'\'\u00F2\''|'\'\u00F3\''|'\'\u00F4\''|'\'\u00F5\''|'\'\u00F6\''|'\'\u00F7\''|'\'\u00F8\''|'\'\u00F9\''|'\'\u00FA\''|'\'\u00FB\''|'\'\u00FC\''|'\'\u00FD\''|'\'\u00FE\''|'\'\u00FF\'');

RULE_ATTRIBUTE : '\'' RULE_LETTER_FRAGMENT ('_'|RULE_LETTER_OR_DIGIT_FRAGMENT)*;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_BASED_INTEGER_FRAGMENT : RULE_LETTER_OR_DIGIT_FRAGMENT ('_'|RULE_LETTER_OR_DIGIT_FRAGMENT)*;

fragment RULE_LETTER_OR_DIGIT_FRAGMENT : (RULE_LETTER_FRAGMENT|RULE_DIGIT_FRAGMENT);

fragment RULE_LETTER_FRAGMENT : ('a'..'z'|'A'..'Z');

fragment RULE_BASE_SPECIFIER_FRAGMENT : ('B'|'O'|'X'|'UB'|'UO'|'UX'|'SB'|'SO'|'SX'|'D'|'b'|'o'|'x'|'ub'|'uo'|'ux'|'sb'|'so'|'sx'|'d');

fragment RULE_EXPONENT_FRAGMENT : ('E'|'e') ('+'|'-')? RULE_INTEGER_FRAGMENT;

fragment RULE_INTEGER_FRAGMENT : RULE_DIGIT_FRAGMENT ('_'|RULE_DIGIT_FRAGMENT)*;

fragment RULE_DIGIT_FRAGMENT : '0'..'9';



