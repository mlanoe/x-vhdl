/*
* generated by Xtext
*/
parser grammar InternalVhdlParser;

options {
	tokenVocab=InternalVhdlLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@header {
package net.mlanoe.language.vhdl.xtext.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.mlanoe.language.vhdl.xtext.services.VhdlGrammarAccess;

}

@members {
 
 	private VhdlGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("VerticalLine", "'|'");
		tokenNameToValue.put("AsteriskAsterisk", "'**'");
		tokenNameToValue.put("SolidusEqualsSign", "'/='");
		tokenNameToValue.put("ColonEqualsSign", "':='");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("EqualsSignGreaterThanSign", "'=>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("If", "'if'");
		tokenNameToValue.put("In", "'in'");
		tokenNameToValue.put("Is", "'is'");
		tokenNameToValue.put("Of", "'of'");
		tokenNameToValue.put("On", "'on'");
		tokenNameToValue.put("Or", "'or'");
		tokenNameToValue.put("To", "'to'");
		tokenNameToValue.put("Abs", "'abs'");
		tokenNameToValue.put("All", "'all'");
		tokenNameToValue.put("And", "'and'");
		tokenNameToValue.put("Bus", "'bus'");
		tokenNameToValue.put("End", "'end'");
		tokenNameToValue.put("For", "'for'");
		tokenNameToValue.put("Map", "'map'");
		tokenNameToValue.put("Mod", "'mod'");
		tokenNameToValue.put("New", "'new'");
		tokenNameToValue.put("Nor", "'nor'");
		tokenNameToValue.put("Not", "'not'");
		tokenNameToValue.put("Out", "'out'");
		tokenNameToValue.put("Rem", "'rem'");
		tokenNameToValue.put("Rol", "'rol'");
		tokenNameToValue.put("Ror", "'ror'");
		tokenNameToValue.put("Sla", "'sla'");
		tokenNameToValue.put("Sll", "'sll'");
		tokenNameToValue.put("Sra", "'sra'");
		tokenNameToValue.put("Srl", "'srl'");
		tokenNameToValue.put("Use", "'use'");
		tokenNameToValue.put("Xor", "'xor'");
		tokenNameToValue.put("Body", "'body'");
		tokenNameToValue.put("Case", "'case'");
		tokenNameToValue.put("Else", "'else'");
		tokenNameToValue.put("Exit", "'exit'");
		tokenNameToValue.put("File", "'file'");
		tokenNameToValue.put("Loop", "'loop'");
		tokenNameToValue.put("Nand", "'nand'");
		tokenNameToValue.put("Next", "'next'");
		tokenNameToValue.put("Null", "'null'");
		tokenNameToValue.put("Open", "'open'");
		tokenNameToValue.put("Port", "'port'");
		tokenNameToValue.put("Pure", "'pure'");
		tokenNameToValue.put("Then", "'then'");
		tokenNameToValue.put("Type", "'type'");
		tokenNameToValue.put("Wait", "'wait'");
		tokenNameToValue.put("When", "'when'");
		tokenNameToValue.put("With", "'with'");
		tokenNameToValue.put("Xnor", "'xnor'");
		tokenNameToValue.put("After", "'after'");
		tokenNameToValue.put("Alias", "'alias'");
		tokenNameToValue.put("Array", "'array'");
		tokenNameToValue.put("Begin", "'begin'");
		tokenNameToValue.put("Block", "'block'");
		tokenNameToValue.put("Break", "'break'");
		tokenNameToValue.put("Elsif", "'elsif'");
		tokenNameToValue.put("Group", "'group'");
		tokenNameToValue.put("Inout", "'inout'");
		tokenNameToValue.put("Label", "'label'");
		tokenNameToValue.put("Limit", "'limit'");
		tokenNameToValue.put("Noise", "'noise'");
		tokenNameToValue.put("Range", "'range'");
		tokenNameToValue.put("Units", "'units'");
		tokenNameToValue.put("Until", "'until'");
		tokenNameToValue.put("While", "'while'");
		tokenNameToValue.put("Access", "'access'");
		tokenNameToValue.put("Across", "'across'");
		tokenNameToValue.put("Assert", "'assert'");
		tokenNameToValue.put("Buffer", "'buffer'");
		tokenNameToValue.put("Downto", "'downto'");
		tokenNameToValue.put("Entity", "'entity'");
		tokenNameToValue.put("Impure", "'impure'");
		tokenNameToValue.put("Nature", "'nature'");
		tokenNameToValue.put("Others", "'others'");
		tokenNameToValue.put("Record", "'record'");
		tokenNameToValue.put("Reject", "'reject'");
		tokenNameToValue.put("Report", "'report'");
		tokenNameToValue.put("Return", "'return'");
		tokenNameToValue.put("Select", "'select'");
		tokenNameToValue.put("Shared", "'shared'");
		tokenNameToValue.put("Signal", "'signal'");
		tokenNameToValue.put("Generic", "'generic'");
		tokenNameToValue.put("Guarded", "'guarded'");
		tokenNameToValue.put("Library", "'library'");
		tokenNameToValue.put("Linkage", "'linkage'");
		tokenNameToValue.put("Literal", "'literal'");
		tokenNameToValue.put("Package", "'package'");
		tokenNameToValue.put("Process", "'process'");
		tokenNameToValue.put("Subtype", "'subtype'");
		tokenNameToValue.put("Through", "'through'");
		tokenNameToValue.put("Constant", "'constant'");
		tokenNameToValue.put("Function", "'function'");
		tokenNameToValue.put("Generate", "'generate'");
		tokenNameToValue.put("Inertial", "'inertial'");
		tokenNameToValue.put("Quantity", "'quantity'");
		tokenNameToValue.put("Register", "'register'");
		tokenNameToValue.put("Severity", "'severity'");
		tokenNameToValue.put("Spectrum", "'spectrum'");
		tokenNameToValue.put("Terminal", "'terminal'");
		tokenNameToValue.put("Variable", "'variable'");
		tokenNameToValue.put("Attribute", "'attribute'");
		tokenNameToValue.put("Component", "'component'");
		tokenNameToValue.put("Postponed", "'postponed'");
		tokenNameToValue.put("Procedure", "'procedure'");
		tokenNameToValue.put("Reference", "'reference'");
		tokenNameToValue.put("Subnature", "'subnature'");
		tokenNameToValue.put("Tolerance", "'tolerance'");
		tokenNameToValue.put("Transport", "'transport'");
		tokenNameToValue.put("Disconnect", "'disconnect'");
		tokenNameToValue.put("Procedural", "'procedural'");
		tokenNameToValue.put("Unaffected", "'unaffected'");
		tokenNameToValue.put("Architecture", "'architecture'");
		tokenNameToValue.put("Configuration", "'configuration'");
 	}
 	
    public void setGrammarAccess(VhdlGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModelAccess().getDesignAssignment()); }
(rule__Model__DesignAssignment)*
{ after(grammarAccess.getModelAccess().getDesignAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDesignUnit
entryRuleDesignUnit 
:
{ before(grammarAccess.getDesignUnitRule()); }
	 ruleDesignUnit
{ after(grammarAccess.getDesignUnitRule()); } 
	 EOF 
;

// Rule DesignUnit
ruleDesignUnit 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDesignUnitAccess().getGroup()); }
(rule__DesignUnit__Group__0)
{ after(grammarAccess.getDesignUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getModuleAccess().getAlternatives()); }
(rule__Module__Alternatives)
{ after(grammarAccess.getModuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArchitecture
entryRuleArchitecture 
:
{ before(grammarAccess.getArchitectureRule()); }
	 ruleArchitecture
{ after(grammarAccess.getArchitectureRule()); } 
	 EOF 
;

// Rule Architecture
ruleArchitecture 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArchitectureAccess().getGroup()); }
(rule__Architecture__Group__0)
{ after(grammarAccess.getArchitectureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageBody
entryRulePackageBody 
:
{ before(grammarAccess.getPackageBodyRule()); }
	 rulePackageBody
{ after(grammarAccess.getPackageBodyRule()); } 
	 EOF 
;

// Rule PackageBody
rulePackageBody 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPackageBodyAccess().getGroup()); }
(rule__PackageBody__Group__0)
{ after(grammarAccess.getPackageBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage
entryRulePackage 
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPackageAccess().getGroup()); }
(rule__Package__Group__0)
{ after(grammarAccess.getPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntity
entryRuleEntity 
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEntityAccess().getGroup()); }
(rule__Entity__Group__0)
{ after(grammarAccess.getEntityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfiguration
entryRuleConfiguration 
:
{ before(grammarAccess.getConfigurationRule()); }
	 ruleConfiguration
{ after(grammarAccess.getConfigurationRule()); } 
	 EOF 
;

// Rule Configuration
ruleConfiguration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConfigurationAccess().getGroup()); }
(rule__Configuration__Group__0)
{ after(grammarAccess.getConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUseClauseDeclaration
entryRuleUseClauseDeclaration 
:
{ before(grammarAccess.getUseClauseDeclarationRule()); }
	 ruleUseClauseDeclaration
{ after(grammarAccess.getUseClauseDeclarationRule()); } 
	 EOF 
;

// Rule UseClauseDeclaration
ruleUseClauseDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUseClauseDeclarationAccess().getGroup()); }
(rule__UseClauseDeclaration__Group__0)
{ after(grammarAccess.getUseClauseDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockDeclarativeItem
entryRuleBlockDeclarativeItem 
:
{ before(grammarAccess.getBlockDeclarativeItemRule()); }
	 ruleBlockDeclarativeItem
{ after(grammarAccess.getBlockDeclarativeItemRule()); } 
	 EOF 
;

// Rule BlockDeclarativeItem
ruleBlockDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getAlternatives()); }
(rule__BlockDeclarativeItem__Alternatives)
{ after(grammarAccess.getBlockDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfigurationDeclarativeItem
entryRuleConfigurationDeclarativeItem 
:
{ before(grammarAccess.getConfigurationDeclarativeItemRule()); }
	 ruleConfigurationDeclarativeItem
{ after(grammarAccess.getConfigurationDeclarativeItemRule()); } 
	 EOF 
;

// Rule ConfigurationDeclarativeItem
ruleConfigurationDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConfigurationDeclarativeItemAccess().getAlternatives()); }
(rule__ConfigurationDeclarativeItem__Alternatives)
{ after(grammarAccess.getConfigurationDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntityDeclarativeItem
entryRuleEntityDeclarativeItem 
:
{ before(grammarAccess.getEntityDeclarativeItemRule()); }
	 ruleEntityDeclarativeItem
{ after(grammarAccess.getEntityDeclarativeItemRule()); } 
	 EOF 
;

// Rule EntityDeclarativeItem
ruleEntityDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getAlternatives()); }
(rule__EntityDeclarativeItem__Alternatives)
{ after(grammarAccess.getEntityDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageBodyDeclarativeItem
entryRulePackageBodyDeclarativeItem 
:
{ before(grammarAccess.getPackageBodyDeclarativeItemRule()); }
	 rulePackageBodyDeclarativeItem
{ after(grammarAccess.getPackageBodyDeclarativeItemRule()); } 
	 EOF 
;

// Rule PackageBodyDeclarativeItem
rulePackageBodyDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getAlternatives()); }
(rule__PackageBodyDeclarativeItem__Alternatives)
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclarativeItem
entryRulePackageDeclarativeItem 
:
{ before(grammarAccess.getPackageDeclarativeItemRule()); }
	 rulePackageDeclarativeItem
{ after(grammarAccess.getPackageDeclarativeItemRule()); } 
	 EOF 
;

// Rule PackageDeclarativeItem
rulePackageDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getAlternatives()); }
(rule__PackageDeclarativeItem__Alternatives)
{ after(grammarAccess.getPackageDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProceduralDeclarativeItem
entryRuleProceduralDeclarativeItem 
:
{ before(grammarAccess.getProceduralDeclarativeItemRule()); }
	 ruleProceduralDeclarativeItem
{ after(grammarAccess.getProceduralDeclarativeItemRule()); } 
	 EOF 
;

// Rule ProceduralDeclarativeItem
ruleProceduralDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getAlternatives()); }
(rule__ProceduralDeclarativeItem__Alternatives)
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessDeclarativeItem
entryRuleProcessDeclarativeItem 
:
{ before(grammarAccess.getProcessDeclarativeItemRule()); }
	 ruleProcessDeclarativeItem
{ after(grammarAccess.getProcessDeclarativeItemRule()); } 
	 EOF 
;

// Rule ProcessDeclarativeItem
ruleProcessDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getAlternatives()); }
(rule__ProcessDeclarativeItem__Alternatives)
{ after(grammarAccess.getProcessDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubprogramDeclarativeItem
entryRuleSubprogramDeclarativeItem 
:
{ before(grammarAccess.getSubprogramDeclarativeItemRule()); }
	 ruleSubprogramDeclarativeItem
{ after(grammarAccess.getSubprogramDeclarativeItemRule()); } 
	 EOF 
;

// Rule SubprogramDeclarativeItem
ruleSubprogramDeclarativeItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getAlternatives()); }
(rule__SubprogramDeclarativeItem__Alternatives)
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArchitectureStatement
entryRuleArchitectureStatement 
:
{ before(grammarAccess.getArchitectureStatementRule()); }
	 ruleArchitectureStatement
{ after(grammarAccess.getArchitectureStatementRule()); } 
	 EOF 
;

// Rule ArchitectureStatement
ruleArchitectureStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArchitectureStatementAccess().getAlternatives()); }
(rule__ArchitectureStatement__Alternatives)
{ after(grammarAccess.getArchitectureStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessTypeDefinition
entryRuleAccessTypeDefinition 
:
{ before(grammarAccess.getAccessTypeDefinitionRule()); }
	 ruleAccessTypeDefinition
{ after(grammarAccess.getAccessTypeDefinitionRule()); } 
	 EOF 
;

// Rule AccessTypeDefinition
ruleAccessTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAccessTypeDefinitionAccess().getGroup()); }
(rule__AccessTypeDefinition__Group__0)
{ after(grammarAccess.getAccessTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayNatureDefinition
entryRuleArrayNatureDefinition 
:
{ before(grammarAccess.getArrayNatureDefinitionRule()); }
	 ruleArrayNatureDefinition
{ after(grammarAccess.getArrayNatureDefinitionRule()); } 
	 EOF 
;

// Rule ArrayNatureDefinition
ruleArrayNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArrayNatureDefinitionAccess().getAlternatives()); }
(rule__ArrayNatureDefinition__Alternatives)
{ after(grammarAccess.getArrayNatureDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayTypeDefinition
entryRuleArrayTypeDefinition 
:
{ before(grammarAccess.getArrayTypeDefinitionRule()); }
	 ruleArrayTypeDefinition
{ after(grammarAccess.getArrayTypeDefinitionRule()); } 
	 EOF 
;

// Rule ArrayTypeDefinition
ruleArrayTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getAlternatives()); }
(rule__ArrayTypeDefinition__Alternatives)
{ after(grammarAccess.getArrayTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLabelAccess().getIdentifierParserRuleCall()); }
	ruleIdentifier
{ after(grammarAccess.getLabelAccess().getIdentifierParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssertionStatement
entryRuleAssertionStatement 
:
{ before(grammarAccess.getAssertionStatementRule()); }
	 ruleAssertionStatement
{ after(grammarAccess.getAssertionStatementRule()); } 
	 EOF 
;

// Rule AssertionStatement
ruleAssertionStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAssertionStatementAccess().getGroup()); }
(rule__AssertionStatement__Group__0)
{ after(grammarAccess.getAssertionStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcurrentAssertionStatement
entryRuleConcurrentAssertionStatement 
:
{ before(grammarAccess.getConcurrentAssertionStatementRule()); }
	 ruleConcurrentAssertionStatement
{ after(grammarAccess.getConcurrentAssertionStatementRule()); } 
	 EOF 
;

// Rule ConcurrentAssertionStatement
ruleConcurrentAssertionStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getGroup()); }
(rule__ConcurrentAssertionStatement__Group__0)
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChoices
entryRuleChoices 
:
{ before(grammarAccess.getChoicesRule()); }
	 ruleChoices
{ after(grammarAccess.getChoicesRule()); } 
	 EOF 
;

// Rule Choices
ruleChoices 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getChoicesAccess().getGroup()); }
(rule__Choices__Group__0)
{ after(grammarAccess.getChoicesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChoice
entryRuleChoice 
:
{ before(grammarAccess.getChoiceRule()); }
	 ruleChoice
{ after(grammarAccess.getChoiceRule()); } 
	 EOF 
;

// Rule Choice
ruleChoice 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getChoiceAccess().getAlternatives()); }
(rule__Choice__Alternatives)
{ after(grammarAccess.getChoiceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpen
entryRuleOpen 
:
{ before(grammarAccess.getOpenRule()); }
	 ruleOpen
{ after(grammarAccess.getOpenRule()); } 
	 EOF 
;

// Rule Open
ruleOpen 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOpenAccess().getGroup()); }
(rule__Open__Group__0)
{ after(grammarAccess.getOpenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration 
:
{ before(grammarAccess.getAttributeDeclarationRule()); }
	 ruleAttributeDeclaration
{ after(grammarAccess.getAttributeDeclarationRule()); } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeDeclarationAccess().getGroup()); }
(rule__AttributeDeclaration__Group__0)
{ after(grammarAccess.getAttributeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeSpecification
entryRuleAttributeSpecification 
:
{ before(grammarAccess.getAttributeSpecificationRule()); }
	 ruleAttributeSpecification
{ after(grammarAccess.getAttributeSpecificationRule()); } 
	 EOF 
;

// Rule AttributeSpecification
ruleAttributeSpecification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeSpecificationAccess().getGroup()); }
(rule__AttributeSpecification__Group__0)
{ after(grammarAccess.getAttributeSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeDesignator
entryRuleAttributeDesignator 
:
{ before(grammarAccess.getAttributeDesignatorRule()); }
	 ruleAttributeDesignator
{ after(grammarAccess.getAttributeDesignatorRule()); } 
	 EOF 
;

// Rule AttributeDesignator
ruleAttributeDesignator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeDesignatorAccess().getAlternatives()); }
(rule__AttributeDesignator__Alternatives)
{ after(grammarAccess.getAttributeDesignatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeEntity
entryRuleAttributeEntity 
:
{ before(grammarAccess.getAttributeEntityRule()); }
	 ruleAttributeEntity
{ after(grammarAccess.getAttributeEntityRule()); } 
	 EOF 
;

// Rule AttributeEntity
ruleAttributeEntity 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeEntityAccess().getGroup()); }
(rule__AttributeEntity__Group__0)
{ after(grammarAccess.getAttributeEntityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeEntityDesignator
entryRuleAttributeEntityDesignator 
:
{ before(grammarAccess.getAttributeEntityDesignatorRule()); }
	 ruleAttributeEntityDesignator
{ after(grammarAccess.getAttributeEntityDesignatorRule()); } 
	 EOF 
;

// Rule AttributeEntityDesignator
ruleAttributeEntityDesignator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getAlternatives()); }
(rule__AttributeEntityDesignator__Alternatives)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameSignature
entryRuleNameSignature 
:
{ before(grammarAccess.getNameSignatureRule()); }
	 ruleNameSignature
{ after(grammarAccess.getNameSignatureRule()); } 
	 EOF 
;

// Rule NameSignature
ruleNameSignature 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNameSignatureAccess().getGroup()); }
(rule__NameSignature__Group__0)
{ after(grammarAccess.getNameSignatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockConfiguration
entryRuleBlockConfiguration 
:
{ before(grammarAccess.getBlockConfigurationRule()); }
	 ruleBlockConfiguration
{ after(grammarAccess.getBlockConfigurationRule()); } 
	 EOF 
;

// Rule BlockConfiguration
ruleBlockConfiguration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockConfigurationAccess().getGroup()); }
(rule__BlockConfiguration__Group__0)
{ after(grammarAccess.getBlockConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockStatement
entryRuleBlockStatement 
:
{ before(grammarAccess.getBlockStatementRule()); }
	 ruleBlockStatement
{ after(grammarAccess.getBlockStatementRule()); } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBlockStatementAccess().getGroup()); }
(rule__BlockStatement__Group__0)
{ after(grammarAccess.getBlockStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBreakStatement
entryRuleBreakStatement 
:
{ before(grammarAccess.getBreakStatementRule()); }
	 ruleBreakStatement
{ after(grammarAccess.getBreakStatementRule()); } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBreakStatementAccess().getGroup()); }
(rule__BreakStatement__Group__0)
{ after(grammarAccess.getBreakStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcurrentBreakStatement
entryRuleConcurrentBreakStatement 
:
{ before(grammarAccess.getConcurrentBreakStatementRule()); }
	 ruleConcurrentBreakStatement
{ after(grammarAccess.getConcurrentBreakStatementRule()); } 
	 EOF 
;

// Rule ConcurrentBreakStatement
ruleConcurrentBreakStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getGroup()); }
(rule__ConcurrentBreakStatement__Group__0)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBreakStatementItem
entryRuleBreakStatementItem 
:
{ before(grammarAccess.getBreakStatementItemRule()); }
	 ruleBreakStatementItem
{ after(grammarAccess.getBreakStatementItemRule()); } 
	 EOF 
;

// Rule BreakStatementItem
ruleBreakStatementItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBreakStatementItemAccess().getGroup()); }
(rule__BreakStatementItem__Group__0)
{ after(grammarAccess.getBreakStatementItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseStatement
entryRuleCaseStatement 
:
{ before(grammarAccess.getCaseStatementRule()); }
	 ruleCaseStatement
{ after(grammarAccess.getCaseStatementRule()); } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCaseStatementAccess().getGroup()); }
(rule__CaseStatement__Group__0)
{ after(grammarAccess.getCaseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseAlternative
entryRuleCaseAlternative 
:
{ before(grammarAccess.getCaseAlternativeRule()); }
	 ruleCaseAlternative
{ after(grammarAccess.getCaseAlternativeRule()); } 
	 EOF 
;

// Rule CaseAlternative
ruleCaseAlternative 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCaseAlternativeAccess().getGroup()); }
(rule__CaseAlternative__Group__0)
{ after(grammarAccess.getCaseAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAll
entryRuleAll 
:
{ before(grammarAccess.getAllRule()); }
	 ruleAll
{ after(grammarAccess.getAllRule()); } 
	 EOF 
;

// Rule All
ruleAll 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAllAccess().getGroup()); }
(rule__All__Group__0)
{ after(grammarAccess.getAllAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOthers
entryRuleOthers 
:
{ before(grammarAccess.getOthersRule()); }
	 ruleOthers
{ after(grammarAccess.getOthersRule()); } 
	 EOF 
;

// Rule Others
ruleOthers 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getOthersAccess().getGroup()); }
(rule__Others__Group__0)
{ after(grammarAccess.getOthersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaffected
entryRuleUnaffected 
:
{ before(grammarAccess.getUnaffectedRule()); }
	 ruleUnaffected
{ after(grammarAccess.getUnaffectedRule()); } 
	 EOF 
;

// Rule Unaffected
ruleUnaffected 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaffectedAccess().getGroup()); }
(rule__Unaffected__Group__0)
{ after(grammarAccess.getUnaffectedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentConfiguration
entryRuleComponentConfiguration 
:
{ before(grammarAccess.getComponentConfigurationRule()); }
	 ruleComponentConfiguration
{ after(grammarAccess.getComponentConfigurationRule()); } 
	 EOF 
;

// Rule ComponentConfiguration
ruleComponentConfiguration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComponentConfigurationAccess().getGroup()); }
(rule__ComponentConfiguration__Group__0)
{ after(grammarAccess.getComponentConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponent
entryRuleComponent 
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComponentAccess().getGroup()); }
(rule__Component__Group__0)
{ after(grammarAccess.getComponentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentInstantiationStatement
entryRuleComponentInstantiationStatement 
:
{ before(grammarAccess.getComponentInstantiationStatementRule()); }
	 ruleComponentInstantiationStatement
{ after(grammarAccess.getComponentInstantiationStatementRule()); } 
	 EOF 
;

// Rule ComponentInstantiationStatement
ruleComponentInstantiationStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getGroup()); }
(rule__ComponentInstantiationStatement__Group__0)
{ after(grammarAccess.getComponentInstantiationStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntityInstantiationStatement
entryRuleEntityInstantiationStatement 
:
{ before(grammarAccess.getEntityInstantiationStatementRule()); }
	 ruleEntityInstantiationStatement
{ after(grammarAccess.getEntityInstantiationStatementRule()); } 
	 EOF 
;

// Rule EntityInstantiationStatement
ruleEntityInstantiationStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getGroup()); }
(rule__EntityInstantiationStatement__Group__0)
{ after(grammarAccess.getEntityInstantiationStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfigurationInstantiationStatement
entryRuleConfigurationInstantiationStatement 
:
{ before(grammarAccess.getConfigurationInstantiationStatementRule()); }
	 ruleConfigurationInstantiationStatement
{ after(grammarAccess.getConfigurationInstantiationStatementRule()); } 
	 EOF 
;

// Rule ConfigurationInstantiationStatement
ruleConfigurationInstantiationStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getGroup()); }
(rule__ConfigurationInstantiationStatement__Group__0)
{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositeNatureDefinition
entryRuleCompositeNatureDefinition 
:
{ before(grammarAccess.getCompositeNatureDefinitionRule()); }
	 ruleCompositeNatureDefinition
{ after(grammarAccess.getCompositeNatureDefinitionRule()); } 
	 EOF 
;

// Rule CompositeNatureDefinition
ruleCompositeNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCompositeNatureDefinitionAccess().getAlternatives()); }
(rule__CompositeNatureDefinition__Alternatives)
{ after(grammarAccess.getCompositeNatureDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositeTypeDefinition
entryRuleCompositeTypeDefinition 
:
{ before(grammarAccess.getCompositeTypeDefinitionRule()); }
	 ruleCompositeTypeDefinition
{ after(grammarAccess.getCompositeTypeDefinitionRule()); } 
	 EOF 
;

// Rule CompositeTypeDefinition
ruleCompositeTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCompositeTypeDefinitionAccess().getAlternatives()); }
(rule__CompositeTypeDefinition__Alternatives)
{ after(grammarAccess.getCompositeTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectedSignalAssignmentStatement
entryRuleSelectedSignalAssignmentStatement 
:
{ before(grammarAccess.getSelectedSignalAssignmentStatementRule()); }
	 ruleSelectedSignalAssignmentStatement
{ after(grammarAccess.getSelectedSignalAssignmentStatementRule()); } 
	 EOF 
;

// Rule SelectedSignalAssignmentStatement
ruleSelectedSignalAssignmentStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGroup()); }
(rule__SelectedSignalAssignmentStatement__Group__0)
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalSignalAssignmentStatement
entryRuleConditionalSignalAssignmentStatement 
:
{ before(grammarAccess.getConditionalSignalAssignmentStatementRule()); }
	 ruleConditionalSignalAssignmentStatement
{ after(grammarAccess.getConditionalSignalAssignmentStatementRule()); } 
	 EOF 
;

// Rule ConditionalSignalAssignmentStatement
ruleConditionalSignalAssignmentStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGroup()); }
(rule__ConditionalSignalAssignmentStatement__Group__0)
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequentialSignalAssignmentStatement
entryRuleSequentialSignalAssignmentStatement 
:
{ before(grammarAccess.getSequentialSignalAssignmentStatementRule()); }
	 ruleSequentialSignalAssignmentStatement
{ after(grammarAccess.getSequentialSignalAssignmentStatementRule()); } 
	 EOF 
;

// Rule SequentialSignalAssignmentStatement
ruleSequentialSignalAssignmentStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGroup()); }
(rule__SequentialSignalAssignmentStatement__Group__0)
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableAssignmentStatement
entryRuleVariableAssignmentStatement 
:
{ before(grammarAccess.getVariableAssignmentStatementRule()); }
	 ruleVariableAssignmentStatement
{ after(grammarAccess.getVariableAssignmentStatementRule()); } 
	 EOF 
;

// Rule VariableAssignmentStatement
ruleVariableAssignmentStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getGroup()); }
(rule__VariableAssignmentStatement__Group__0)
{ after(grammarAccess.getVariableAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleSimultaneousStatement
entryRuleSimpleSimultaneousStatement 
:
{ before(grammarAccess.getSimpleSimultaneousStatementRule()); }
	 ruleSimpleSimultaneousStatement
{ after(grammarAccess.getSimpleSimultaneousStatementRule()); } 
	 EOF 
;

// Rule SimpleSimultaneousStatement
ruleSimpleSimultaneousStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup()); }
(rule__SimpleSimultaneousStatement__Group__0)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalWaveform
entryRuleConditionalWaveform 
:
{ before(grammarAccess.getConditionalWaveformRule()); }
	 ruleConditionalWaveform
{ after(grammarAccess.getConditionalWaveformRule()); } 
	 EOF 
;

// Rule ConditionalWaveform
ruleConditionalWaveform 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConditionalWaveformAccess().getGroup()); }
(rule__ConditionalWaveform__Group__0)
{ after(grammarAccess.getConditionalWaveformAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWaveforms
entryRuleWaveforms 
:
{ before(grammarAccess.getWaveformsRule()); }
	 ruleWaveforms
{ after(grammarAccess.getWaveformsRule()); } 
	 EOF 
;

// Rule Waveforms
ruleWaveforms 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWaveformsAccess().getAlternatives()); }
(rule__Waveforms__Alternatives)
{ after(grammarAccess.getWaveformsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfigurationItem
entryRuleConfigurationItem 
:
{ before(grammarAccess.getConfigurationItemRule()); }
	 ruleConfigurationItem
{ after(grammarAccess.getConfigurationItemRule()); } 
	 EOF 
;

// Rule ConfigurationItem
ruleConfigurationItem 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConfigurationItemAccess().getAlternatives()); }
(rule__ConfigurationItem__Alternatives)
{ after(grammarAccess.getConfigurationItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConfigurationSpecification
entryRuleConfigurationSpecification 
:
{ before(grammarAccess.getConfigurationSpecificationRule()); }
	 ruleConfigurationSpecification
{ after(grammarAccess.getConfigurationSpecificationRule()); } 
	 EOF 
;

// Rule ConfigurationSpecification
ruleConfigurationSpecification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getGroup()); }
(rule__ConfigurationSpecification__Group__0)
{ after(grammarAccess.getConfigurationSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDelayMechanism
entryRuleDelayMechanism 
:
{ before(grammarAccess.getDelayMechanismRule()); }
	 ruleDelayMechanism
{ after(grammarAccess.getDelayMechanismRule()); } 
	 EOF 
;

// Rule DelayMechanism
ruleDelayMechanism 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDelayMechanismAccess().getAlternatives()); }
(rule__DelayMechanism__Alternatives)
{ after(grammarAccess.getDelayMechanismAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRejectMechanism
entryRuleRejectMechanism 
:
{ before(grammarAccess.getRejectMechanismRule()); }
	 ruleRejectMechanism
{ after(grammarAccess.getRejectMechanismRule()); } 
	 EOF 
;

// Rule RejectMechanism
ruleRejectMechanism 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRejectMechanismAccess().getGroup()); }
(rule__RejectMechanism__Group__0)
{ after(grammarAccess.getRejectMechanismAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransportMechanism
entryRuleTransportMechanism 
:
{ before(grammarAccess.getTransportMechanismRule()); }
	 ruleTransportMechanism
{ after(grammarAccess.getTransportMechanismRule()); } 
	 EOF 
;

// Rule TransportMechanism
ruleTransportMechanism 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTransportMechanismAccess().getGroup()); }
(rule__TransportMechanism__Group__0)
{ after(grammarAccess.getTransportMechanismAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDisconnectionSpecification
entryRuleDisconnectionSpecification 
:
{ before(grammarAccess.getDisconnectionSpecificationRule()); }
	 ruleDisconnectionSpecification
{ after(grammarAccess.getDisconnectionSpecificationRule()); } 
	 EOF 
;

// Rule DisconnectionSpecification
ruleDisconnectionSpecification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getGroup()); }
(rule__DisconnectionSpecification__Group__0)
{ after(grammarAccess.getDisconnectionSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiName
entryRuleMultiName 
:
{ before(grammarAccess.getMultiNameRule()); }
	 ruleMultiName
{ after(grammarAccess.getMultiNameRule()); } 
	 EOF 
;

// Rule MultiName
ruleMultiName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMultiNameAccess().getGroup()); }
(rule__MultiName__Group__0)
{ after(grammarAccess.getMultiNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiIdentifierName
entryRuleMultiIdentifierName 
:
{ before(grammarAccess.getMultiIdentifierNameRule()); }
	 ruleMultiIdentifierName
{ after(grammarAccess.getMultiIdentifierNameRule()); } 
	 EOF 
;

// Rule MultiIdentifierName
ruleMultiIdentifierName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getGroup()); }
(rule__MultiIdentifierName__Group__0)
{ after(grammarAccess.getMultiIdentifierNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstantiationList
entryRuleInstantiationList 
:
{ before(grammarAccess.getInstantiationListRule()); }
	 ruleInstantiationList
{ after(grammarAccess.getInstantiationListRule()); } 
	 EOF 
;

// Rule InstantiationList
ruleInstantiationList 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInstantiationListAccess().getAlternatives()); }
(rule__InstantiationList__Alternatives)
{ after(grammarAccess.getInstantiationListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntityStatement
entryRuleEntityStatement 
:
{ before(grammarAccess.getEntityStatementRule()); }
	 ruleEntityStatement
{ after(grammarAccess.getEntityStatementRule()); } 
	 EOF 
;

// Rule EntityStatement
ruleEntityStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEntityStatementAccess().getAlternatives()); }
(rule__EntityStatement__Alternatives)
{ after(grammarAccess.getEntityStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationTypeDefinition
entryRuleEnumerationTypeDefinition 
:
{ before(grammarAccess.getEnumerationTypeDefinitionRule()); }
	 ruleEnumerationTypeDefinition
{ after(grammarAccess.getEnumerationTypeDefinitionRule()); } 
	 EOF 
;

// Rule EnumerationTypeDefinition
ruleEnumerationTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup()); }
(rule__EnumerationTypeDefinition__Group__0)
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral 
:
{ before(grammarAccess.getEnumerationLiteralRule()); }
	 ruleEnumerationLiteral
{ after(grammarAccess.getEnumerationLiteralRule()); } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getEnumerationLiteralAccess().getAlternatives()); }
(rule__EnumerationLiteral__Alternatives)
{ after(grammarAccess.getEnumerationLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExitStatement
entryRuleExitStatement 
:
{ before(grammarAccess.getExitStatementRule()); }
	 ruleExitStatement
{ after(grammarAccess.getExitStatementRule()); } 
	 EOF 
;

// Rule ExitStatement
ruleExitStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExitStatementAccess().getGroup()); }
(rule__ExitStatement__Group__0)
{ after(grammarAccess.getExitStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelation
entryRuleRelation 
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRelationAccess().getGroup()); }
(rule__Relation__Group__0)
{ after(grammarAccess.getRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShiftExpression
entryRuleShiftExpression 
:
{ before(grammarAccess.getShiftExpressionRule()); }
	 ruleShiftExpression
{ after(grammarAccess.getShiftExpressionRule()); } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup()); }
(rule__ShiftExpression__Group__0)
{ after(grammarAccess.getShiftExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression 
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
(rule__SimpleExpression__Alternatives)
{ after(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignTermExpression
entryRuleSignTermExpression 
:
{ before(grammarAccess.getSignTermExpressionRule()); }
	 ruleSignTermExpression
{ after(grammarAccess.getSignTermExpressionRule()); } 
	 EOF 
;

// Rule SignTermExpression
ruleSignTermExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignTermExpressionAccess().getGroup()); }
(rule__SignTermExpression__Group__0)
{ after(grammarAccess.getSignTermExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTermExpression
entryRuleTermExpression 
:
{ before(grammarAccess.getTermExpressionRule()); }
	 ruleTermExpression
{ after(grammarAccess.getTermExpressionRule()); } 
	 EOF 
;

// Rule TermExpression
ruleTermExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTermExpressionAccess().getGroup()); }
(rule__TermExpression__Group__0)
{ after(grammarAccess.getTermExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactor
entryRuleFactor 
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFactorAccess().getAlternatives()); }
(rule__Factor__Alternatives)
{ after(grammarAccess.getFactorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignFactor
entryRuleSignFactor 
:
{ before(grammarAccess.getSignFactorRule()); }
	 ruleSignFactor
{ after(grammarAccess.getSignFactorRule()); } 
	 EOF 
;

// Rule SignFactor
ruleSignFactor 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignFactorAccess().getAlternatives()); }
(rule__SignFactor__Alternatives)
{ after(grammarAccess.getSignFactorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignUnaryExpression
entryRuleSignUnaryExpression 
:
{ before(grammarAccess.getSignUnaryExpressionRule()); }
	 ruleSignUnaryExpression
{ after(grammarAccess.getSignUnaryExpressionRule()); } 
	 EOF 
;

// Rule SignUnaryExpression
ruleSignUnaryExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignUnaryExpressionAccess().getGroup()); }
(rule__SignUnaryExpression__Group__0)
{ after(grammarAccess.getSignUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignPrimary
entryRuleSignPrimary 
:
{ before(grammarAccess.getSignPrimaryRule()); }
	 ruleSignPrimary
{ after(grammarAccess.getSignPrimaryRule()); } 
	 EOF 
;

// Rule SignPrimary
ruleSignPrimary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignPrimaryAccess().getGroup()); }
(rule__SignPrimary__Group__0)
{ after(grammarAccess.getSignPrimaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFileDeclaration
entryRuleFileDeclaration 
:
{ before(grammarAccess.getFileDeclarationRule()); }
	 ruleFileDeclaration
{ after(grammarAccess.getFileDeclarationRule()); } 
	 EOF 
;

// Rule FileDeclaration
ruleFileDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFileDeclarationAccess().getGroup()); }
(rule__FileDeclaration__Group__0)
{ after(grammarAccess.getFileDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceFileDeclaration
entryRuleInterfaceFileDeclaration 
:
{ before(grammarAccess.getInterfaceFileDeclarationRule()); }
	 ruleInterfaceFileDeclaration
{ after(grammarAccess.getInterfaceFileDeclarationRule()); } 
	 EOF 
;

// Rule InterfaceFileDeclaration
ruleInterfaceFileDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getGroup()); }
(rule__InterfaceFileDeclaration__Group__0)
{ after(grammarAccess.getInterfaceFileDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFileTypeDefinition
entryRuleFileTypeDefinition 
:
{ before(grammarAccess.getFileTypeDefinitionRule()); }
	 ruleFileTypeDefinition
{ after(grammarAccess.getFileTypeDefinitionRule()); } 
	 EOF 
;

// Rule FileTypeDefinition
ruleFileTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFileTypeDefinitionAccess().getGroup()); }
(rule__FileTypeDefinition__Group__0)
{ after(grammarAccess.getFileTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenerateStatement
entryRuleGenerateStatement 
:
{ before(grammarAccess.getGenerateStatementRule()); }
	 ruleGenerateStatement
{ after(grammarAccess.getGenerateStatementRule()); } 
	 EOF 
;

// Rule GenerateStatement
ruleGenerateStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenerateStatementAccess().getGroup()); }
(rule__GenerateStatement__Group__0)
{ after(grammarAccess.getGenerateStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenerationScheme
entryRuleGenerationScheme 
:
{ before(grammarAccess.getGenerationSchemeRule()); }
	 ruleGenerationScheme
{ after(grammarAccess.getGenerationSchemeRule()); } 
	 EOF 
;

// Rule GenerationScheme
ruleGenerationScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenerationSchemeAccess().getAlternatives()); }
(rule__GenerationScheme__Alternatives)
{ after(grammarAccess.getGenerationSchemeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForGenerationScheme
entryRuleForGenerationScheme 
:
{ before(grammarAccess.getForGenerationSchemeRule()); }
	 ruleForGenerationScheme
{ after(grammarAccess.getForGenerationSchemeRule()); } 
	 EOF 
;

// Rule ForGenerationScheme
ruleForGenerationScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getForGenerationSchemeAccess().getGroup()); }
(rule__ForGenerationScheme__Group__0)
{ after(grammarAccess.getForGenerationSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfGenerationScheme
entryRuleIfGenerationScheme 
:
{ before(grammarAccess.getIfGenerationSchemeRule()); }
	 ruleIfGenerationScheme
{ after(grammarAccess.getIfGenerationSchemeRule()); } 
	 EOF 
;

// Rule IfGenerationScheme
ruleIfGenerationScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIfGenerationSchemeAccess().getGroup()); }
(rule__IfGenerationScheme__Group__0)
{ after(grammarAccess.getIfGenerationSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenerics
entryRuleGenerics 
:
{ before(grammarAccess.getGenericsRule()); }
	 ruleGenerics
{ after(grammarAccess.getGenericsRule()); } 
	 EOF 
;

// Rule Generics
ruleGenerics 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenericsAccess().getGroup()); }
(rule__Generics__Group__0)
{ after(grammarAccess.getGenericsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenericMaps
entryRuleGenericMaps 
:
{ before(grammarAccess.getGenericMapsRule()); }
	 ruleGenericMaps
{ after(grammarAccess.getGenericMapsRule()); } 
	 EOF 
;

// Rule GenericMaps
ruleGenericMaps 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenericMapsAccess().getGroup()); }
(rule__GenericMaps__Group__0)
{ after(grammarAccess.getGenericMapsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupDeclaration
entryRuleGroupDeclaration 
:
{ before(grammarAccess.getGroupDeclarationRule()); }
	 ruleGroupDeclaration
{ after(grammarAccess.getGroupDeclarationRule()); } 
	 EOF 
;

// Rule GroupDeclaration
ruleGroupDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupDeclarationAccess().getGroup()); }
(rule__GroupDeclaration__Group__0)
{ after(grammarAccess.getGroupDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupConstituent
entryRuleGroupConstituent 
:
{ before(grammarAccess.getGroupConstituentRule()); }
	 ruleGroupConstituent
{ after(grammarAccess.getGroupConstituentRule()); } 
	 EOF 
;

// Rule GroupConstituent
ruleGroupConstituent 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupConstituentAccess().getAlternatives()); }
(rule__GroupConstituent__Alternatives)
{ after(grammarAccess.getGroupConstituentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupConstituents
entryRuleGroupConstituents 
:
{ before(grammarAccess.getGroupConstituentsRule()); }
	 ruleGroupConstituents
{ after(grammarAccess.getGroupConstituentsRule()); } 
	 EOF 
;

// Rule GroupConstituents
ruleGroupConstituents 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupConstituentsAccess().getGroup()); }
(rule__GroupConstituents__Group__0)
{ after(grammarAccess.getGroupConstituentsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupTemplateDeclaration
entryRuleGroupTemplateDeclaration 
:
{ before(grammarAccess.getGroupTemplateDeclarationRule()); }
	 ruleGroupTemplateDeclaration
{ after(grammarAccess.getGroupTemplateDeclarationRule()); } 
	 EOF 
;

// Rule GroupTemplateDeclaration
ruleGroupTemplateDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getGroup()); }
(rule__GroupTemplateDeclaration__Group__0)
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatementTest
entryRuleIfStatementTest 
:
{ before(grammarAccess.getIfStatementTestRule()); }
	 ruleIfStatementTest
{ after(grammarAccess.getIfStatementTestRule()); } 
	 EOF 
;

// Rule IfStatementTest
ruleIfStatementTest 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIfStatementTestAccess().getGroup()); }
(rule__IfStatementTest__Group__0)
{ after(grammarAccess.getIfStatementTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConstraintAccess().getAlternatives()); }
(rule__Constraint__Alternatives)
{ after(grammarAccess.getConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeConstraint
entryRuleRangeConstraint 
:
{ before(grammarAccess.getRangeConstraintRule()); }
	 ruleRangeConstraint
{ after(grammarAccess.getRangeConstraintRule()); } 
	 EOF 
;

// Rule RangeConstraint
ruleRangeConstraint 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeConstraintAccess().getGroup()); }
(rule__RangeConstraint__Group__0)
{ after(grammarAccess.getRangeConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndexConstraint
entryRuleIndexConstraint 
:
{ before(grammarAccess.getIndexConstraintRule()); }
	 ruleIndexConstraint
{ after(grammarAccess.getIndexConstraintRule()); } 
	 EOF 
;

// Rule IndexConstraint
ruleIndexConstraint 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIndexConstraintAccess().getGroup()); }
(rule__IndexConstraint__Group__0)
{ after(grammarAccess.getIndexConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGenericDeclaration
entryRuleGenericDeclaration 
:
{ before(grammarAccess.getGenericDeclarationRule()); }
	 ruleGenericDeclaration
{ after(grammarAccess.getGenericDeclarationRule()); } 
	 EOF 
;

// Rule GenericDeclaration
ruleGenericDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getGenericDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall()); }
	ruleInterfaceConstantDeclaration
{ after(grammarAccess.getGenericDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePortDeclaration
entryRulePortDeclaration 
:
{ before(grammarAccess.getPortDeclarationRule()); }
	 rulePortDeclaration
{ after(grammarAccess.getPortDeclarationRule()); } 
	 EOF 
;

// Rule PortDeclaration
rulePortDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPortDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall()); }
	ruleInterfaceSignalDeclaration
{ after(grammarAccess.getPortDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionParameterDeclaration
entryRuleFunctionParameterDeclaration 
:
{ before(grammarAccess.getFunctionParameterDeclarationRule()); }
	 ruleFunctionParameterDeclaration
{ after(grammarAccess.getFunctionParameterDeclarationRule()); } 
	 EOF 
;

// Rule FunctionParameterDeclaration
ruleFunctionParameterDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionParameterDeclarationAccess().getAlternatives()); }
(rule__FunctionParameterDeclaration__Alternatives)
{ after(grammarAccess.getFunctionParameterDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureParameterDeclaration
entryRuleProcedureParameterDeclaration 
:
{ before(grammarAccess.getProcedureParameterDeclarationRule()); }
	 ruleProcedureParameterDeclaration
{ after(grammarAccess.getProcedureParameterDeclarationRule()); } 
	 EOF 
;

// Rule ProcedureParameterDeclaration
ruleProcedureParameterDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getProcedureParameterDeclarationAccess().getAlternatives()); }
(rule__ProcedureParameterDeclaration__Alternatives)
{ after(grammarAccess.getProcedureParameterDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopStatement
entryRuleLoopStatement 
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLoopStatementAccess().getGroup()); }
(rule__LoopStatement__Group__0)
{ after(grammarAccess.getLoopStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIterationScheme
entryRuleIterationScheme 
:
{ before(grammarAccess.getIterationSchemeRule()); }
	 ruleIterationScheme
{ after(grammarAccess.getIterationSchemeRule()); } 
	 EOF 
;

// Rule IterationScheme
ruleIterationScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIterationSchemeAccess().getAlternatives()); }
(rule__IterationScheme__Alternatives)
{ after(grammarAccess.getIterationSchemeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileIterationScheme
entryRuleWhileIterationScheme 
:
{ before(grammarAccess.getWhileIterationSchemeRule()); }
	 ruleWhileIterationScheme
{ after(grammarAccess.getWhileIterationSchemeRule()); } 
	 EOF 
;

// Rule WhileIterationScheme
ruleWhileIterationScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWhileIterationSchemeAccess().getGroup()); }
(rule__WhileIterationScheme__Group__0)
{ after(grammarAccess.getWhileIterationSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForIterationScheme
entryRuleForIterationScheme 
:
{ before(grammarAccess.getForIterationSchemeRule()); }
	 ruleForIterationScheme
{ after(grammarAccess.getForIterationSchemeRule()); } 
	 EOF 
;

// Rule ForIterationScheme
ruleForIterationScheme 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getForIterationSchemeAccess().getGroup()); }
(rule__ForIterationScheme__Group__0)
{ after(grammarAccess.getForIterationSchemeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNameAccess().getGroup()); }
(rule__Name__Group__0)
{ after(grammarAccess.getNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameExpression
entryRuleNameExpression 
:
{ before(grammarAccess.getNameExpressionRule()); }
	 ruleNameExpression
{ after(grammarAccess.getNameExpressionRule()); } 
	 EOF 
;

// Rule NameExpression
ruleNameExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNameExpressionAccess().getAlternatives()); }
(rule__NameExpression__Alternatives)
{ after(grammarAccess.getNameExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamePrefix
entryRuleNamePrefix 
:
{ before(grammarAccess.getNamePrefixRule()); }
	 ruleNamePrefix
{ after(grammarAccess.getNamePrefixRule()); } 
	 EOF 
;

// Rule NamePrefix
ruleNamePrefix 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNamePrefixAccess().getAlternatives()); }
(rule__NamePrefix__Alternatives)
{ after(grammarAccess.getNamePrefixAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamePrefixExpression
entryRuleNamePrefixExpression 
:
{ before(grammarAccess.getNamePrefixExpressionRule()); }
	 ruleNamePrefixExpression
{ after(grammarAccess.getNamePrefixExpressionRule()); } 
	 EOF 
;

// Rule NamePrefixExpression
ruleNamePrefixExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNamePrefixExpressionAccess().getAlternatives()); }
(rule__NamePrefixExpression__Alternatives)
{ after(grammarAccess.getNamePrefixExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameSuffix
entryRuleNameSuffix 
:
{ before(grammarAccess.getNameSuffixRule()); }
	 ruleNameSuffix
{ after(grammarAccess.getNameSuffixRule()); } 
	 EOF 
;

// Rule NameSuffix
ruleNameSuffix 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNameSuffixAccess().getAlternatives()); }
(rule__NameSuffix__Alternatives)
{ after(grammarAccess.getNameSuffixAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringName
entryRuleStringName 
:
{ before(grammarAccess.getStringNameRule()); }
	 ruleStringName
{ after(grammarAccess.getStringNameRule()); } 
	 EOF 
;

// Rule StringName
ruleStringName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getStringNameAccess().getGroup()); }
(rule__StringName__Group__0)
{ after(grammarAccess.getStringNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCharacterName
entryRuleCharacterName 
:
{ before(grammarAccess.getCharacterNameRule()); }
	 ruleCharacterName
{ after(grammarAccess.getCharacterNameRule()); } 
	 EOF 
;

// Rule CharacterName
ruleCharacterName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCharacterNameAccess().getGroup()); }
(rule__CharacterName__Group__0)
{ after(grammarAccess.getCharacterNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifierName
entryRuleIdentifierName 
:
{ before(grammarAccess.getIdentifierNameRule()); }
	 ruleIdentifierName
{ after(grammarAccess.getIdentifierNameRule()); } 
	 EOF 
;

// Rule IdentifierName
ruleIdentifierName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIdentifierNameAccess().getGroup()); }
(rule__IdentifierName__Group__0)
{ after(grammarAccess.getIdentifierNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectedName
entryRuleSelectedName 
:
{ before(grammarAccess.getSelectedNameRule()); }
	 ruleSelectedName
{ after(grammarAccess.getSelectedNameRule()); } 
	 EOF 
;

// Rule SelectedName
ruleSelectedName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSelectedNameAccess().getGroup()); }
(rule__SelectedName__Group__0)
{ after(grammarAccess.getSelectedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeName
entryRuleAttributeName 
:
{ before(grammarAccess.getAttributeNameRule()); }
	 ruleAttributeName
{ after(grammarAccess.getAttributeNameRule()); } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAttributeNameAccess().getGroup()); }
(rule__AttributeName__Group__0)
{ after(grammarAccess.getAttributeNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNatureDeclaration
entryRuleNatureDeclaration 
:
{ before(grammarAccess.getNatureDeclarationRule()); }
	 ruleNatureDeclaration
{ after(grammarAccess.getNatureDeclarationRule()); } 
	 EOF 
;

// Rule NatureDeclaration
ruleNatureDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNatureDeclarationAccess().getGroup()); }
(rule__NatureDeclaration__Group__0)
{ after(grammarAccess.getNatureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNatureDefinition
entryRuleNatureDefinition 
:
{ before(grammarAccess.getNatureDefinitionRule()); }
	 ruleNatureDefinition
{ after(grammarAccess.getNatureDefinitionRule()); } 
	 EOF 
;

// Rule NatureDefinition
ruleNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNatureDefinitionAccess().getAlternatives()); }
(rule__NatureDefinition__Alternatives)
{ after(grammarAccess.getNatureDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScalarNatureDefinition
entryRuleScalarNatureDefinition 
:
{ before(grammarAccess.getScalarNatureDefinitionRule()); }
	 ruleScalarNatureDefinition
{ after(grammarAccess.getScalarNatureDefinitionRule()); } 
	 EOF 
;

// Rule ScalarNatureDefinition
ruleScalarNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getGroup()); }
(rule__ScalarNatureDefinition__Group__0)
{ after(grammarAccess.getScalarNatureDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNextStatement
entryRuleNextStatement 
:
{ before(grammarAccess.getNextStatementRule()); }
	 ruleNextStatement
{ after(grammarAccess.getNextStatementRule()); } 
	 EOF 
;

// Rule NextStatement
ruleNextStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNextStatementAccess().getGroup()); }
(rule__NextStatement__Group__0)
{ after(grammarAccess.getNextStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePorts
entryRulePorts 
:
{ before(grammarAccess.getPortsRule()); }
	 rulePorts
{ after(grammarAccess.getPortsRule()); } 
	 EOF 
;

// Rule Ports
rulePorts 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPortsAccess().getGroup()); }
(rule__Ports__Group__0)
{ after(grammarAccess.getPortsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePortMaps
entryRulePortMaps 
:
{ before(grammarAccess.getPortMapsRule()); }
	 rulePortMaps
{ after(grammarAccess.getPortMapsRule()); } 
	 EOF 
;

// Rule PortMaps
rulePortMaps 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPortMapsAccess().getGroup()); }
(rule__PortMaps__Group__0)
{ after(grammarAccess.getPortMapsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureCallStatement
entryRuleProcedureCallStatement 
:
{ before(grammarAccess.getProcedureCallStatementRule()); }
	 ruleProcedureCallStatement
{ after(grammarAccess.getProcedureCallStatementRule()); } 
	 EOF 
;

// Rule ProcedureCallStatement
ruleProcedureCallStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getProcedureCallStatementAccess().getGroup()); }
(rule__ProcedureCallStatement__Group__0)
{ after(grammarAccess.getProcedureCallStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcurrentProcedureCallStatement
entryRuleConcurrentProcedureCallStatement 
:
{ before(grammarAccess.getConcurrentProcedureCallStatementRule()); }
	 ruleConcurrentProcedureCallStatement
{ after(grammarAccess.getConcurrentProcedureCallStatementRule()); } 
	 EOF 
;

// Rule ConcurrentProcedureCallStatement
ruleConcurrentProcedureCallStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getGroup()); }
(rule__ConcurrentProcedureCallStatement__Group__0)
{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessStatement
entryRuleProcessStatement 
:
{ before(grammarAccess.getProcessStatementRule()); }
	 ruleProcessStatement
{ after(grammarAccess.getProcessStatementRule()); } 
	 EOF 
;

// Rule ProcessStatement
ruleProcessStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getProcessStatementAccess().getGroup()); }
(rule__ProcessStatement__Group__0)
{ after(grammarAccess.getProcessStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAllocatorExpression
entryRuleAllocatorExpression 
:
{ before(grammarAccess.getAllocatorExpressionRule()); }
	 ruleAllocatorExpression
{ after(grammarAccess.getAllocatorExpressionRule()); } 
	 EOF 
;

// Rule AllocatorExpression
ruleAllocatorExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAllocatorExpressionAccess().getGroup()); }
(rule__AllocatorExpression__Group__0)
{ after(grammarAccess.getAllocatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordNatureDefinition
entryRuleRecordNatureDefinition 
:
{ before(grammarAccess.getRecordNatureDefinitionRule()); }
	 ruleRecordNatureDefinition
{ after(grammarAccess.getRecordNatureDefinitionRule()); } 
	 EOF 
;

// Rule RecordNatureDefinition
ruleRecordNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getGroup()); }
(rule__RecordNatureDefinition__Group__0)
{ after(grammarAccess.getRecordNatureDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordNatureElement
entryRuleRecordNatureElement 
:
{ before(grammarAccess.getRecordNatureElementRule()); }
	 ruleRecordNatureElement
{ after(grammarAccess.getRecordNatureElementRule()); } 
	 EOF 
;

// Rule RecordNatureElement
ruleRecordNatureElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordNatureElementAccess().getGroup()); }
(rule__RecordNatureElement__Group__0)
{ after(grammarAccess.getRecordNatureElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordTypeDefinition
entryRuleRecordTypeDefinition 
:
{ before(grammarAccess.getRecordTypeDefinitionRule()); }
	 ruleRecordTypeDefinition
{ after(grammarAccess.getRecordTypeDefinitionRule()); } 
	 EOF 
;

// Rule RecordTypeDefinition
ruleRecordTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getGroup()); }
(rule__RecordTypeDefinition__Group__0)
{ after(grammarAccess.getRecordTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecordTypeElement
entryRuleRecordTypeElement 
:
{ before(grammarAccess.getRecordTypeElementRule()); }
	 ruleRecordTypeElement
{ after(grammarAccess.getRecordTypeElementRule()); } 
	 EOF 
;

// Rule RecordTypeElement
ruleRecordTypeElement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRecordTypeElementAccess().getGroup()); }
(rule__RecordTypeElement__Group__0)
{ after(grammarAccess.getRecordTypeElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReportStatement
entryRuleReportStatement 
:
{ before(grammarAccess.getReportStatementRule()); }
	 ruleReportStatement
{ after(grammarAccess.getReportStatementRule()); } 
	 EOF 
;

// Rule ReportStatement
ruleReportStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getReportStatementAccess().getGroup()); }
(rule__ReportStatement__Group__0)
{ after(grammarAccess.getReportStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequentialStatement
entryRuleSequentialStatement 
:
{ before(grammarAccess.getSequentialStatementRule()); }
	 ruleSequentialStatement
{ after(grammarAccess.getSequentialStatementRule()); } 
	 EOF 
;

// Rule SequentialStatement
ruleSequentialStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSequentialStatementAccess().getAlternatives()); }
(rule__SequentialStatement__Alternatives)
{ after(grammarAccess.getSequentialStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullStatement
entryRuleNullStatement 
:
{ before(grammarAccess.getNullStatementRule()); }
	 ruleNullStatement
{ after(grammarAccess.getNullStatementRule()); } 
	 EOF 
;

// Rule NullStatement
ruleNullStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNullStatementAccess().getGroup()); }
(rule__NullStatement__Group__0)
{ after(grammarAccess.getNullStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignalDeclaration
entryRuleSignalDeclaration 
:
{ before(grammarAccess.getSignalDeclarationRule()); }
	 ruleSignalDeclaration
{ after(grammarAccess.getSignalDeclarationRule()); } 
	 EOF 
;

// Rule SignalDeclaration
ruleSignalDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignalDeclarationAccess().getGroup()); }
(rule__SignalDeclaration__Group__0)
{ after(grammarAccess.getSignalDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration 
:
{ before(grammarAccess.getConstantDeclarationRule()); }
	 ruleConstantDeclaration
{ after(grammarAccess.getConstantDeclarationRule()); } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup()); }
(rule__ConstantDeclaration__Group__0)
{ after(grammarAccess.getConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceSignalDeclaration
entryRuleInterfaceSignalDeclaration 
:
{ before(grammarAccess.getInterfaceSignalDeclarationRule()); }
	 ruleInterfaceSignalDeclaration
{ after(grammarAccess.getInterfaceSignalDeclarationRule()); } 
	 EOF 
;

// Rule InterfaceSignalDeclaration
ruleInterfaceSignalDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getGroup()); }
(rule__InterfaceSignalDeclaration__Group__0)
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceVariableDeclaration
entryRuleInterfaceVariableDeclaration 
:
{ before(grammarAccess.getInterfaceVariableDeclarationRule()); }
	 ruleInterfaceVariableDeclaration
{ after(grammarAccess.getInterfaceVariableDeclarationRule()); } 
	 EOF 
;

// Rule InterfaceVariableDeclaration
ruleInterfaceVariableDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getGroup()); }
(rule__InterfaceVariableDeclaration__Group__0)
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceConstantDeclaration
entryRuleInterfaceConstantDeclaration 
:
{ before(grammarAccess.getInterfaceConstantDeclarationRule()); }
	 ruleInterfaceConstantDeclaration
{ after(grammarAccess.getInterfaceConstantDeclarationRule()); } 
	 EOF 
;

// Rule InterfaceConstantDeclaration
ruleInterfaceConstantDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getGroup()); }
(rule__InterfaceConstantDeclaration__Group__0)
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignature
entryRuleSignature 
:
{ before(grammarAccess.getSignatureRule()); }
	 ruleSignature
{ after(grammarAccess.getSignatureRule()); } 
	 EOF 
;

// Rule Signature
ruleSignature 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSignatureAccess().getGroup()); }
(rule__Signature__Group__0)
{ after(grammarAccess.getSignatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousAlternative
entryRuleSimultaneousAlternative 
:
{ before(grammarAccess.getSimultaneousAlternativeRule()); }
	 ruleSimultaneousAlternative
{ after(grammarAccess.getSimultaneousAlternativeRule()); } 
	 EOF 
;

// Rule SimultaneousAlternative
ruleSimultaneousAlternative 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getGroup()); }
(rule__SimultaneousAlternative__Group__0)
{ after(grammarAccess.getSimultaneousAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousCaseStatement
entryRuleSimultaneousCaseStatement 
:
{ before(grammarAccess.getSimultaneousCaseStatementRule()); }
	 ruleSimultaneousCaseStatement
{ after(grammarAccess.getSimultaneousCaseStatementRule()); } 
	 EOF 
;

// Rule SimultaneousCaseStatement
ruleSimultaneousCaseStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getGroup()); }
(rule__SimultaneousCaseStatement__Group__0)
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousIfStatement
entryRuleSimultaneousIfStatement 
:
{ before(grammarAccess.getSimultaneousIfStatementRule()); }
	 ruleSimultaneousIfStatement
{ after(grammarAccess.getSimultaneousIfStatementRule()); } 
	 EOF 
;

// Rule SimultaneousIfStatement
ruleSimultaneousIfStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getGroup()); }
(rule__SimultaneousIfStatement__Group__0)
{ after(grammarAccess.getSimultaneousIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousIfStatementTest
entryRuleSimultaneousIfStatementTest 
:
{ before(grammarAccess.getSimultaneousIfStatementTestRule()); }
	 ruleSimultaneousIfStatementTest
{ after(grammarAccess.getSimultaneousIfStatementTestRule()); } 
	 EOF 
;

// Rule SimultaneousIfStatementTest
ruleSimultaneousIfStatementTest 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousIfStatementTestAccess().getGroup()); }
(rule__SimultaneousIfStatementTest__Group__0)
{ after(grammarAccess.getSimultaneousIfStatementTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousProceduralStatement
entryRuleSimultaneousProceduralStatement 
:
{ before(grammarAccess.getSimultaneousProceduralStatementRule()); }
	 ruleSimultaneousProceduralStatement
{ after(grammarAccess.getSimultaneousProceduralStatementRule()); } 
	 EOF 
;

// Rule SimultaneousProceduralStatement
ruleSimultaneousProceduralStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getGroup()); }
(rule__SimultaneousProceduralStatement__Group__0)
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimultaneousStatement
entryRuleSimultaneousStatement 
:
{ before(grammarAccess.getSimultaneousStatementRule()); }
	 ruleSimultaneousStatement
{ after(grammarAccess.getSimultaneousStatementRule()); } 
	 EOF 
;

// Rule SimultaneousStatement
ruleSimultaneousStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSimultaneousStatementAccess().getAlternatives()); }
(rule__SimultaneousStatement__Alternatives)
{ after(grammarAccess.getSimultaneousStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpectrum
entryRuleSpectrum 
:
{ before(grammarAccess.getSpectrumRule()); }
	 ruleSpectrum
{ after(grammarAccess.getSpectrumRule()); } 
	 EOF 
;

// Rule Spectrum
ruleSpectrum 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSpectrumAccess().getGroup()); }
(rule__Spectrum__Group__0)
{ after(grammarAccess.getSpectrumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoise
entryRuleNoise 
:
{ before(grammarAccess.getNoiseRule()); }
	 ruleNoise
{ after(grammarAccess.getNoiseRule()); } 
	 EOF 
;

// Rule Noise
ruleNoise 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNoiseAccess().getGroup()); }
(rule__Noise__Group__0)
{ after(grammarAccess.getNoiseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantityDeclaration
entryRuleQuantityDeclaration 
:
{ before(grammarAccess.getQuantityDeclarationRule()); }
	 ruleQuantityDeclaration
{ after(grammarAccess.getQuantityDeclarationRule()); } 
	 EOF 
;

// Rule QuantityDeclaration
ruleQuantityDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQuantityDeclarationAccess().getAlternatives()); }
(rule__QuantityDeclaration__Alternatives)
{ after(grammarAccess.getQuantityDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuantityAspect
entryRuleQuantityAspect 
:
{ before(grammarAccess.getQuantityAspectRule()); }
	 ruleQuantityAspect
{ after(grammarAccess.getQuantityAspectRule()); } 
	 EOF 
;

// Rule QuantityAspect
ruleQuantityAspect 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getQuantityAspectAccess().getGroup()); }
(rule__QuantityAspect__Group__0)
{ after(grammarAccess.getQuantityAspectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBranchQuantityDeclaration
entryRuleBranchQuantityDeclaration 
:
{ before(grammarAccess.getBranchQuantityDeclarationRule()); }
	 ruleBranchQuantityDeclaration
{ after(grammarAccess.getBranchQuantityDeclarationRule()); } 
	 EOF 
;

// Rule BranchQuantityDeclaration
ruleBranchQuantityDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getGroup()); }
(rule__BranchQuantityDeclaration__Group__0)
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFreeQuantityDeclaration
entryRuleFreeQuantityDeclaration 
:
{ before(grammarAccess.getFreeQuantityDeclarationRule()); }
	 ruleFreeQuantityDeclaration
{ after(grammarAccess.getFreeQuantityDeclarationRule()); } 
	 EOF 
;

// Rule FreeQuantityDeclaration
ruleFreeQuantityDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getGroup()); }
(rule__FreeQuantityDeclaration__Group__0)
{ after(grammarAccess.getFreeQuantityDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceQuantityDeclaration
entryRuleSourceQuantityDeclaration 
:
{ before(grammarAccess.getSourceQuantityDeclarationRule()); }
	 ruleSourceQuantityDeclaration
{ after(grammarAccess.getSourceQuantityDeclarationRule()); } 
	 EOF 
;

// Rule SourceQuantityDeclaration
ruleSourceQuantityDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getGroup()); }
(rule__SourceQuantityDeclaration__Group__0)
{ after(grammarAccess.getSourceQuantityDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSourceAspect
entryRuleSourceAspect 
:
{ before(grammarAccess.getSourceAspectRule()); }
	 ruleSourceAspect
{ after(grammarAccess.getSourceAspectRule()); } 
	 EOF 
;

// Rule SourceAspect
ruleSourceAspect 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSourceAspectAccess().getAlternatives()); }
(rule__SourceAspect__Alternatives)
{ after(grammarAccess.getSourceAspectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimitDeclaration
entryRuleLimitDeclaration 
:
{ before(grammarAccess.getLimitDeclarationRule()); }
	 ruleLimitDeclaration
{ after(grammarAccess.getLimitDeclarationRule()); } 
	 EOF 
;

// Rule LimitDeclaration
ruleLimitDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLimitDeclarationAccess().getGroup()); }
(rule__LimitDeclaration__Group__0)
{ after(grammarAccess.getLimitDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubnatureDeclaration
entryRuleSubnatureDeclaration 
:
{ before(grammarAccess.getSubnatureDeclarationRule()); }
	 ruleSubnatureDeclaration
{ after(grammarAccess.getSubnatureDeclarationRule()); } 
	 EOF 
;

// Rule SubnatureDeclaration
ruleSubnatureDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getGroup()); }
(rule__SubnatureDeclaration__Group__0)
{ after(grammarAccess.getSubnatureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubprogramDeclaration
entryRuleSubprogramDeclaration 
:
{ before(grammarAccess.getSubprogramDeclarationRule()); }
	 ruleSubprogramDeclaration
{ after(grammarAccess.getSubprogramDeclarationRule()); } 
	 EOF 
;

// Rule SubprogramDeclaration
ruleSubprogramDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubprogramDeclarationAccess().getAlternatives()); }
(rule__SubprogramDeclaration__Alternatives)
{ after(grammarAccess.getSubprogramDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcedureDeclaration
entryRuleProcedureDeclaration 
:
{ before(grammarAccess.getProcedureDeclarationRule()); }
	 ruleProcedureDeclaration
{ after(grammarAccess.getProcedureDeclarationRule()); } 
	 EOF 
;

// Rule ProcedureDeclaration
ruleProcedureDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getProcedureDeclarationAccess().getGroup()); }
(rule__ProcedureDeclaration__Group__0)
{ after(grammarAccess.getProcedureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubprogramBody
entryRuleSubprogramBody 
:
{ before(grammarAccess.getSubprogramBodyRule()); }
	 ruleSubprogramBody
{ after(grammarAccess.getSubprogramBodyRule()); } 
	 EOF 
;

// Rule SubprogramBody
ruleSubprogramBody 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubprogramBodyAccess().getGroup()); }
(rule__SubprogramBody__Group__0)
{ after(grammarAccess.getSubprogramBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubtypeDeclaration
entryRuleSubtypeDeclaration 
:
{ before(grammarAccess.getSubtypeDeclarationRule()); }
	 ruleSubtypeDeclaration
{ after(grammarAccess.getSubtypeDeclarationRule()); } 
	 EOF 
;

// Rule SubtypeDeclaration
ruleSubtypeDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getGroup()); }
(rule__SubtypeDeclaration__Group__0)
{ after(grammarAccess.getSubtypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAliasDeclaration
entryRuleAliasDeclaration 
:
{ before(grammarAccess.getAliasDeclarationRule()); }
	 ruleAliasDeclaration
{ after(grammarAccess.getAliasDeclarationRule()); } 
	 EOF 
;

// Rule AliasDeclaration
ruleAliasDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAliasDeclarationAccess().getGroup()); }
(rule__AliasDeclaration__Group__0)
{ after(grammarAccess.getAliasDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeAccess().getGroup()); }
(rule__Range__Group__0)
{ after(grammarAccess.getRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDiscreteRange
entryRuleDiscreteRange 
:
{ before(grammarAccess.getDiscreteRangeRule()); }
	 ruleDiscreteRange
{ after(grammarAccess.getDiscreteRangeRule()); } 
	 EOF 
;

// Rule DiscreteRange
ruleDiscreteRange 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDiscreteRangeAccess().getAlternatives()); }
(rule__DiscreteRange__Alternatives)
{ after(grammarAccess.getDiscreteRangeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAggregate
entryRuleAggregate 
:
{ before(grammarAccess.getAggregateRule()); }
	 ruleAggregate
{ after(grammarAccess.getAggregateRule()); } 
	 EOF 
;

// Rule Aggregate
ruleAggregate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getAggregateAccess().getGroup()); }
(rule__Aggregate__Group__0)
{ after(grammarAccess.getAggregateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSliceName
entryRuleSliceName 
:
{ before(grammarAccess.getSliceNameRule()); }
	 ruleSliceName
{ after(grammarAccess.getSliceNameRule()); } 
	 EOF 
;

// Rule SliceName
ruleSliceName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSliceNameAccess().getGroup()); }
(rule__SliceName__Group__0)
{ after(grammarAccess.getSliceNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeSpecification
entryRuleRangeSpecification 
:
{ before(grammarAccess.getRangeSpecificationRule()); }
	 ruleRangeSpecification
{ after(grammarAccess.getRangeSpecificationRule()); } 
	 EOF 
;

// Rule RangeSpecification
ruleRangeSpecification 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeSpecificationAccess().getGroup()); }
(rule__RangeSpecification__Group__0)
{ after(grammarAccess.getRangeSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubtypeIndication
entryRuleSubtypeIndication 
:
{ before(grammarAccess.getSubtypeIndicationRule()); }
	 ruleSubtypeIndication
{ after(grammarAccess.getSubtypeIndicationRule()); } 
	 EOF 
;

// Rule SubtypeIndication
ruleSubtypeIndication 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAlternatives()); }
(rule__SubtypeIndication__Alternatives)
{ after(grammarAccess.getSubtypeIndicationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubtypeIndicationExpression
entryRuleSubtypeIndicationExpression 
:
{ before(grammarAccess.getSubtypeIndicationExpressionRule()); }
	 ruleSubtypeIndicationExpression
{ after(grammarAccess.getSubtypeIndicationExpressionRule()); } 
	 EOF 
;

// Rule SubtypeIndicationExpression
ruleSubtypeIndicationExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAlternatives()); }
(rule__SubtypeIndicationExpression__Alternatives)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubnatureIndication
entryRuleSubnatureIndication 
:
{ before(grammarAccess.getSubnatureIndicationRule()); }
	 ruleSubnatureIndication
{ after(grammarAccess.getSubnatureIndicationRule()); } 
	 EOF 
;

// Rule SubnatureIndication
ruleSubnatureIndication 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAlternatives()); }
(rule__SubnatureIndication__Alternatives)
{ after(grammarAccess.getSubnatureIndicationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTarget
entryRuleTarget 
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTargetAccess().getAlternatives()); }
(rule__Target__Alternatives)
{ after(grammarAccess.getTargetAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalDeclaration
entryRuleTerminalDeclaration 
:
{ before(grammarAccess.getTerminalDeclarationRule()); }
	 ruleTerminalDeclaration
{ after(grammarAccess.getTerminalDeclarationRule()); } 
	 EOF 
;

// Rule TerminalDeclaration
ruleTerminalDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTerminalDeclarationAccess().getGroup()); }
(rule__TerminalDeclaration__Group__0)
{ after(grammarAccess.getTerminalDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration 
:
{ before(grammarAccess.getTypeDeclarationRule()); }
	 ruleTypeDeclaration
{ after(grammarAccess.getTypeDeclarationRule()); } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup()); }
(rule__TypeDeclaration__Group__0)
{ after(grammarAccess.getTypeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition 
:
{ before(grammarAccess.getTypeDefinitionRule()); }
	 ruleTypeDefinition
{ after(grammarAccess.getTypeDefinitionRule()); } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
(rule__TypeDefinition__Alternatives)
{ after(grammarAccess.getTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeTypeDefinition
entryRuleRangeTypeDefinition 
:
{ before(grammarAccess.getRangeTypeDefinitionRule()); }
	 ruleRangeTypeDefinition
{ after(grammarAccess.getRangeTypeDefinitionRule()); } 
	 EOF 
;

// Rule RangeTypeDefinition
ruleRangeTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getAlternatives()); }
(rule__RangeTypeDefinition__Alternatives)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePhysicalTypeDefinition
entryRulePhysicalTypeDefinition 
:
{ before(grammarAccess.getPhysicalTypeDefinitionRule()); }
	 rulePhysicalTypeDefinition
{ after(grammarAccess.getPhysicalTypeDefinitionRule()); } 
	 EOF 
;

// Rule PhysicalTypeDefinition
rulePhysicalTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getGroup()); }
(rule__PhysicalTypeDefinition__Group__0)
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePhysicalTypeDefinitionSecondary
entryRulePhysicalTypeDefinitionSecondary 
:
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryRule()); }
	 rulePhysicalTypeDefinitionSecondary
{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryRule()); } 
	 EOF 
;

// Rule PhysicalTypeDefinitionSecondary
rulePhysicalTypeDefinitionSecondary 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getGroup()); }
(rule__PhysicalTypeDefinitionSecondary__Group__0)
{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnconstrainedArrayTypeDefinition
entryRuleUnconstrainedArrayTypeDefinition 
:
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionRule()); }
	 ruleUnconstrainedArrayTypeDefinition
{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionRule()); } 
	 EOF 
;

// Rule UnconstrainedArrayTypeDefinition
ruleUnconstrainedArrayTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getGroup()); }
(rule__UnconstrainedArrayTypeDefinition__Group__0)
{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstrainedArrayTypeDefinition
entryRuleConstrainedArrayTypeDefinition 
:
{ before(grammarAccess.getConstrainedArrayTypeDefinitionRule()); }
	 ruleConstrainedArrayTypeDefinition
{ after(grammarAccess.getConstrainedArrayTypeDefinitionRule()); } 
	 EOF 
;

// Rule ConstrainedArrayTypeDefinition
ruleConstrainedArrayTypeDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getGroup()); }
(rule__ConstrainedArrayTypeDefinition__Group__0)
{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnconstrainedArrayNatureDefinition
entryRuleUnconstrainedArrayNatureDefinition 
:
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionRule()); }
	 ruleUnconstrainedArrayNatureDefinition
{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionRule()); } 
	 EOF 
;

// Rule UnconstrainedArrayNatureDefinition
ruleUnconstrainedArrayNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getGroup()); }
(rule__UnconstrainedArrayNatureDefinition__Group__0)
{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstrainedArrayNatureDefinition
entryRuleConstrainedArrayNatureDefinition 
:
{ before(grammarAccess.getConstrainedArrayNatureDefinitionRule()); }
	 ruleConstrainedArrayNatureDefinition
{ after(grammarAccess.getConstrainedArrayNatureDefinitionRule()); } 
	 EOF 
;

// Rule ConstrainedArrayNatureDefinition
ruleConstrainedArrayNatureDefinition 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getGroup()); }
(rule__ConstrainedArrayNatureDefinition__Group__0)
{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWaitStatement
entryRuleWaitStatement 
:
{ before(grammarAccess.getWaitStatementRule()); }
	 ruleWaitStatement
{ after(grammarAccess.getWaitStatementRule()); } 
	 EOF 
;

// Rule WaitStatement
ruleWaitStatement 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWaitStatementAccess().getGroup()); }
(rule__WaitStatement__Group__0)
{ after(grammarAccess.getWaitStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWaveform
entryRuleWaveform 
:
{ before(grammarAccess.getWaveformRule()); }
	 ruleWaveform
{ after(grammarAccess.getWaveformRule()); } 
	 EOF 
;

// Rule Waveform
ruleWaveform 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWaveformAccess().getGroup()); }
(rule__Waveform__Group__0)
{ after(grammarAccess.getWaveformAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullExpression
entryRuleNullExpression 
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getNullExpressionAccess().getGroup()); }
(rule__NullExpression__Group__0)
{ after(grammarAccess.getNullExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBitStringName
entryRuleBitStringName 
:
{ before(grammarAccess.getBitStringNameRule()); }
	 ruleBitStringName
{ after(grammarAccess.getBitStringNameRule()); } 
	 EOF 
;

// Rule BitStringName
ruleBitStringName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getBitStringNameAccess().getGroup()); }
(rule__BitStringName__Group__0)
{ after(grammarAccess.getBitStringNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression 
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
(rule__ValueExpression__Alternatives)
{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDesignatorName
entryRuleDesignatorName 
:
{ before(grammarAccess.getDesignatorNameRule()); }
	 ruleDesignatorName
{ after(grammarAccess.getDesignatorNameRule()); } 
	 EOF 
;

// Rule DesignatorName
ruleDesignatorName 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDesignatorNameAccess().getAlternatives()); }
(rule__DesignatorName__Alternatives)
{ after(grammarAccess.getDesignatorNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDesignator
entryRuleDesignator 
:
{ before(grammarAccess.getDesignatorRule()); }
	 ruleDesignator
{ after(grammarAccess.getDesignatorRule()); } 
	 EOF 
;

// Rule Designator
ruleDesignator 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getDesignatorAccess().getAlternatives()); }
(rule__Designator__Alternatives)
{ after(grammarAccess.getDesignatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIdentifierAccess().getAlternatives()); }
(rule__Identifier__Alternatives)
{ after(grammarAccess.getIdentifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule SignalKind
ruleSignalKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalKindAccess().getAlternatives()); }
(rule__SignalKind__Alternatives)
{ after(grammarAccess.getSignalKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RangeDirection
ruleRangeDirection
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDirectionAccess().getAlternatives()); }
(rule__RangeDirection__Alternatives)
{ after(grammarAccess.getRangeDirectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Mode
ruleMode
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getAlternatives()); }
(rule__Mode__Alternatives)
{ after(grammarAccess.getModeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplyingOperator
ruleMultiplyingOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyingOperatorAccess().getAlternatives()); }
(rule__MultiplyingOperator__Alternatives)
{ after(grammarAccess.getMultiplyingOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ShiftOperator
ruleShiftOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
(rule__ShiftOperator__Alternatives)
{ after(grammarAccess.getShiftOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalOperator
ruleLogicalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
(rule__LogicalOperator__Alternatives)
{ after(grammarAccess.getLogicalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddingOperator
ruleAddingOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddingOperatorAccess().getAlternatives()); }
(rule__AddingOperator__Alternatives)
{ after(grammarAccess.getAddingOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Sign
ruleSign
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getAlternatives()); }
(rule__Sign__Alternatives)
{ after(grammarAccess.getSignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Purity
rulePurity
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPurityAccess().getAlternatives()); }
(rule__Purity__Alternatives)
{ after(grammarAccess.getPurityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule EntityClass
ruleEntityClass
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityClassAccess().getAlternatives()); }
(rule__EntityClass__Alternatives)
{ after(grammarAccess.getEntityClassAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DesignUnit__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getGroup_0_0()); }
(rule__DesignUnit__Group_0_0__0)
{ after(grammarAccess.getDesignUnitAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getDesignUnitAccess().getGroup_0_1()); }
(rule__DesignUnit__Group_0_1__0)
{ after(grammarAccess.getDesignUnitAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getArchitectureParserRuleCall_0()); }
	ruleArchitecture
{ after(grammarAccess.getModuleAccess().getArchitectureParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getModuleAccess().getPackageBodyParserRuleCall_1()); }
	rulePackageBody
{ after(grammarAccess.getModuleAccess().getPackageBodyParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getModuleAccess().getEntityParserRuleCall_2()); }
	ruleEntity
{ after(grammarAccess.getModuleAccess().getEntityParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getModuleAccess().getConfigurationParserRuleCall_3()); }
	ruleConfiguration
{ after(grammarAccess.getModuleAccess().getConfigurationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getModuleAccess().getPackageParserRuleCall_4()); }
	rulePackage
{ after(grammarAccess.getModuleAccess().getPackageParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); }
	ruleSignalDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); }
	ruleVariableDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); }
	ruleFileDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); }
	ruleAliasDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getComponentParserRuleCall_8()); }
	ruleComponent
{ after(grammarAccess.getBlockDeclarativeItemAccess().getComponentParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_9()); }
	ruleAttributeDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_10()); }
	ruleAttributeSpecification
{ after(grammarAccess.getBlockDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getConfigurationSpecificationParserRuleCall_11()); }
	ruleConfigurationSpecification
{ after(grammarAccess.getBlockDeclarativeItemAccess().getConfigurationSpecificationParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_12()); }
	ruleDisconnectionSpecification
{ after(grammarAccess.getBlockDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getLimitDeclarationParserRuleCall_13()); }
	ruleLimitDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getLimitDeclarationParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_14()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_14()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_15()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_15()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getGroupDeclarationParserRuleCall_16()); }
	ruleGroupDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getGroupDeclarationParserRuleCall_16()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getNatureDeclarationParserRuleCall_17()); }
	ruleNatureDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getNatureDeclarationParserRuleCall_17()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_18()); }
	ruleSubnatureDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_18()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getQuantityDeclarationParserRuleCall_19()); }
	ruleQuantityDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getQuantityDeclarationParserRuleCall_19()); }
)

    |(
{ before(grammarAccess.getBlockDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_20()); }
	ruleTerminalDeclaration
{ after(grammarAccess.getBlockDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_20()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_0()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getConfigurationDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConfigurationDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_1()); }
	ruleAttributeSpecification
{ after(grammarAccess.getConfigurationDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConfigurationDeclarativeItemAccess().getGroupDeclarationParserRuleCall_2()); }
	ruleGroupDeclaration
{ after(grammarAccess.getConfigurationDeclarativeItemAccess().getGroupDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); }
	ruleSignalDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); }
	ruleVariableDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); }
	ruleFileDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); }
	ruleAliasDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_8()); }
	ruleAttributeDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_9()); }
	ruleAttributeSpecification
{ after(grammarAccess.getEntityDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_10()); }
	ruleDisconnectionSpecification
{ after(grammarAccess.getEntityDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getLimitDeclarationParserRuleCall_11()); }
	ruleLimitDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getLimitDeclarationParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_12()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_13()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getGroupDeclarationParserRuleCall_14()); }
	ruleGroupDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getGroupDeclarationParserRuleCall_14()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getNatureDeclarationParserRuleCall_15()); }
	ruleNatureDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getNatureDeclarationParserRuleCall_15()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_16()); }
	ruleSubnatureDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_16()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getQuantityDeclarationParserRuleCall_17()); }
	ruleQuantityDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getQuantityDeclarationParserRuleCall_17()); }
)

    |(
{ before(grammarAccess.getEntityDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_18()); }
	ruleTerminalDeclaration
{ after(grammarAccess.getEntityDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_18()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBodyDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
	ruleVariableDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); }
	ruleFileDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); }
	ruleAliasDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_7()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_8()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPackageBodyDeclarativeItemAccess().getGroupDeclarationParserRuleCall_9()); }
	ruleGroupDeclaration
{ after(grammarAccess.getPackageBodyDeclarativeItemAccess().getGroupDeclarationParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); }
	ruleSignalDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); }
	ruleVariableDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); }
	ruleFileDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); }
	ruleAliasDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getComponentParserRuleCall_8()); }
	ruleComponent
{ after(grammarAccess.getPackageDeclarativeItemAccess().getComponentParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_9()); }
	ruleAttributeDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_10()); }
	ruleAttributeSpecification
{ after(grammarAccess.getPackageDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_11()); }
	ruleDisconnectionSpecification
{ after(grammarAccess.getPackageDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_12()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_13()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getGroupDeclarationParserRuleCall_14()); }
	ruleGroupDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getGroupDeclarationParserRuleCall_14()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getNatureDeclarationParserRuleCall_15()); }
	ruleNatureDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getNatureDeclarationParserRuleCall_15()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_16()); }
	ruleSubnatureDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_16()); }
)

    |(
{ before(grammarAccess.getPackageDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_17()); }
	ruleTerminalDeclaration
{ after(grammarAccess.getPackageDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_17()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProceduralDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
	ruleVariableDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getAliasDeclarationParserRuleCall_5()); }
	ruleAliasDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getAliasDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_6()); }
	ruleAttributeDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_7()); }
	ruleAttributeSpecification
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_8()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_9()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getProceduralDeclarativeItemAccess().getGroupDeclarationParserRuleCall_10()); }
	ruleGroupDeclaration
{ after(grammarAccess.getProceduralDeclarativeItemAccess().getGroupDeclarationParserRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
	ruleVariableDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); }
	ruleFileDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); }
	ruleAliasDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_7()); }
	ruleAttributeDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_8()); }
	ruleAttributeSpecification
{ after(grammarAccess.getProcessDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_9()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_10()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getProcessDeclarativeItemAccess().getGroupDeclarationParserRuleCall_11()); }
	ruleGroupDeclaration
{ after(grammarAccess.getProcessDeclarativeItemAccess().getGroupDeclarationParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramDeclarativeItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
	ruleSubprogramDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
	ruleTypeDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
	ruleSubtypeDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
	ruleConstantDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
	ruleVariableDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); }
	ruleFileDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); }
	ruleAliasDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_7()); }
	ruleAttributeDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_8()); }
	ruleAttributeSpecification
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_9()); }
	ruleUseClauseDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_10()); }
	ruleGroupTemplateDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarativeItemAccess().getGroupDeclarationParserRuleCall_11()); }
	ruleGroupDeclaration
{ after(grammarAccess.getSubprogramDeclarativeItemAccess().getGroupDeclarationParserRuleCall_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArchitectureStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureStatementAccess().getProcessStatementParserRuleCall_0()); }
	ruleProcessStatement
{ after(grammarAccess.getArchitectureStatementAccess().getProcessStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getConfigurationInstantiationStatementParserRuleCall_1()); }
	ruleConfigurationInstantiationStatement
{ after(grammarAccess.getArchitectureStatementAccess().getConfigurationInstantiationStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getBlockStatementParserRuleCall_2()); }
	ruleBlockStatement
{ after(grammarAccess.getArchitectureStatementAccess().getBlockStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getConcurrentAssertionStatementParserRuleCall_3()); }
	ruleConcurrentAssertionStatement
{ after(grammarAccess.getArchitectureStatementAccess().getConcurrentAssertionStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getSimultaneousProceduralStatementParserRuleCall_4()); }
	ruleSimultaneousProceduralStatement
{ after(grammarAccess.getArchitectureStatementAccess().getSimultaneousProceduralStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getSimultaneousCaseStatementParserRuleCall_5()); }
	ruleSimultaneousCaseStatement
{ after(grammarAccess.getArchitectureStatementAccess().getSimultaneousCaseStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getSimultaneousIfStatementParserRuleCall_6()); }
	ruleSimultaneousIfStatement
{ after(grammarAccess.getArchitectureStatementAccess().getSimultaneousIfStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getConcurrentBreakStatementParserRuleCall_7()); }
	ruleConcurrentBreakStatement
{ after(grammarAccess.getArchitectureStatementAccess().getConcurrentBreakStatementParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getEntityInstantiationStatementParserRuleCall_8()); }
	ruleEntityInstantiationStatement
{ after(grammarAccess.getArchitectureStatementAccess().getEntityInstantiationStatementParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getConcurrentProcedureCallStatementParserRuleCall_9()); }
	ruleConcurrentProcedureCallStatement
{ after(grammarAccess.getArchitectureStatementAccess().getConcurrentProcedureCallStatementParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getSelectedSignalAssignmentStatementParserRuleCall_10()); }
	ruleSelectedSignalAssignmentStatement
{ after(grammarAccess.getArchitectureStatementAccess().getSelectedSignalAssignmentStatementParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getComponentInstantiationStatementParserRuleCall_11()); }
	ruleComponentInstantiationStatement
{ after(grammarAccess.getArchitectureStatementAccess().getComponentInstantiationStatementParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getGenerateStatementParserRuleCall_12()); }
	ruleGenerateStatement
{ after(grammarAccess.getArchitectureStatementAccess().getGenerateStatementParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getConditionalSignalAssignmentStatementParserRuleCall_13()); }
	ruleConditionalSignalAssignmentStatement
{ after(grammarAccess.getArchitectureStatementAccess().getConditionalSignalAssignmentStatementParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getArchitectureStatementAccess().getSimpleSimultaneousStatementParserRuleCall_14()); }
(	ruleSimpleSimultaneousStatement)
{ after(grammarAccess.getArchitectureStatementAccess().getSimpleSimultaneousStatementParserRuleCall_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayNatureDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayNatureDefinitionAccess().getUnconstrainedArrayNatureDefinitionParserRuleCall_0()); }
	ruleUnconstrainedArrayNatureDefinition
{ after(grammarAccess.getArrayNatureDefinitionAccess().getUnconstrainedArrayNatureDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArrayNatureDefinitionAccess().getConstrainedArrayNatureDefinitionParserRuleCall_1()); }
	ruleConstrainedArrayNatureDefinition
{ after(grammarAccess.getArrayNatureDefinitionAccess().getConstrainedArrayNatureDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayTypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getUnconstrainedArrayTypeDefinitionParserRuleCall_0()); }
	ruleUnconstrainedArrayTypeDefinition
{ after(grammarAccess.getArrayTypeDefinitionAccess().getUnconstrainedArrayTypeDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArrayTypeDefinitionAccess().getConstrainedArrayTypeDefinitionParserRuleCall_1()); }
	ruleConstrainedArrayTypeDefinition
{ after(grammarAccess.getArrayTypeDefinitionAccess().getConstrainedArrayTypeDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_0()); }
(rule__Parameter__Group_0__0)
{ after(grammarAccess.getParameterAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParameterAccess().getExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getOpenParserRuleCall_2()); }
	ruleOpen
{ after(grammarAccess.getParameterAccess().getOpenParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getExpressionAssignment_0_3_0()); }
(rule__Parameter__ExpressionAssignment_0_3_0)
{ after(grammarAccess.getParameterAccess().getExpressionAssignment_0_3_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getOpenKeyword_0_3_1()); }

	Open 

{ after(grammarAccess.getParameterAccess().getOpenKeyword_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getRangeSpecificationParserRuleCall_0()); }
	ruleRangeSpecification
{ after(grammarAccess.getChoiceAccess().getRangeSpecificationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getChoiceAccess().getSubtypeIndicationExpressionParserRuleCall_1()); }
	ruleSubtypeIndicationExpression
{ after(grammarAccess.getChoiceAccess().getSubtypeIndicationExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getChoiceAccess().getSimpleExpressionParserRuleCall_2()); }
	ruleSimpleExpression
{ after(grammarAccess.getChoiceAccess().getSimpleExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getChoiceAccess().getOthersParserRuleCall_3()); }
	ruleOthers
{ after(grammarAccess.getChoiceAccess().getOthersParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getIdentifierNameParserRuleCall_0()); }
	ruleIdentifierName
{ after(grammarAccess.getAttributeDesignatorAccess().getIdentifierNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAttributeDesignatorAccess().getGroup_1()); }
(rule__AttributeDesignator__Group_1__0)
{ after(grammarAccess.getAttributeDesignatorAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAttributeDesignatorAccess().getGroup_2()); }
(rule__AttributeDesignator__Group_2__0)
{ after(grammarAccess.getAttributeDesignatorAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAttributeDesignatorAccess().getGroup_3()); }
(rule__AttributeDesignator__Group_3__0)
{ after(grammarAccess.getAttributeDesignatorAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getAttributeDesignatorAccess().getGroup_4()); }
(rule__AttributeDesignator__Group_4__0)
{ after(grammarAccess.getAttributeDesignatorAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getAttributeDesignatorAccess().getGroup_5()); }
(rule__AttributeDesignator__Group_5__0)
{ after(grammarAccess.getAttributeDesignatorAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_0()); }
(rule__AttributeEntityDesignator__Group_0__0)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_1()); }
(rule__AttributeEntityDesignator__Group_1__0)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_2()); }
(rule__AttributeEntityDesignator__Group_2__0)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getOthersParserRuleCall_3()); }
	ruleOthers
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getOthersParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getAllParserRuleCall_4()); }
	ruleAll
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getAllParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Alternatives_4_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getGroup_4_0_1_0()); }
(rule__ComponentConfiguration__Group_4_0_1_0__0)
{ after(grammarAccess.getComponentConfigurationAccess().getGroup_4_0_1_0()); }
)

    |(
{ before(grammarAccess.getComponentConfigurationAccess().getGroup_4_0_1_1()); }
(rule__ComponentConfiguration__Group_4_0_1_1__0)
{ after(grammarAccess.getComponentConfigurationAccess().getGroup_4_0_1_1()); }
)

    |(
{ before(grammarAccess.getComponentConfigurationAccess().getOpenKeyword_4_0_1_2()); }

	Open 

{ after(grammarAccess.getComponentConfigurationAccess().getOpenKeyword_4_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeNatureDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeNatureDefinitionAccess().getArrayNatureDefinitionParserRuleCall_0()); }
	ruleArrayNatureDefinition
{ after(grammarAccess.getCompositeNatureDefinitionAccess().getArrayNatureDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompositeNatureDefinitionAccess().getRecordNatureDefinitionParserRuleCall_1()); }
	ruleRecordNatureDefinition
{ after(grammarAccess.getCompositeNatureDefinitionAccess().getRecordNatureDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeTypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeTypeDefinitionAccess().getArrayTypeDefinitionParserRuleCall_0()); }
	ruleArrayTypeDefinition
{ after(grammarAccess.getCompositeTypeDefinitionAccess().getArrayTypeDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompositeTypeDefinitionAccess().getRecordTypeDefinitionParserRuleCall_1()); }
	ruleRecordTypeDefinition
{ after(grammarAccess.getCompositeTypeDefinitionAccess().getRecordTypeDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getUnaffectedParserRuleCall_0()); }
	ruleUnaffected
{ after(grammarAccess.getWaveformsAccess().getUnaffectedParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getWaveformsAccess().getGroup_1()); }
(rule__Waveforms__Group_1__0)
{ after(grammarAccess.getWaveformsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationItemAccess().getBlockConfigurationParserRuleCall_0()); }
	ruleBlockConfiguration
{ after(grammarAccess.getConfigurationItemAccess().getBlockConfigurationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConfigurationItemAccess().getComponentConfigurationParserRuleCall_1()); }
	ruleComponentConfiguration
{ after(grammarAccess.getConfigurationItemAccess().getComponentConfigurationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Alternatives_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getGroup_4_1_0()); }
(rule__ConfigurationSpecification__Group_4_1_0__0)
{ after(grammarAccess.getConfigurationSpecificationAccess().getGroup_4_1_0()); }
)

    |(
{ before(grammarAccess.getConfigurationSpecificationAccess().getGroup_4_1_1()); }
(rule__ConfigurationSpecification__Group_4_1_1__0)
{ after(grammarAccess.getConfigurationSpecificationAccess().getGroup_4_1_1()); }
)

    |(
{ before(grammarAccess.getConfigurationSpecificationAccess().getOpenKeyword_4_1_2()); }

	Open 

{ after(grammarAccess.getConfigurationSpecificationAccess().getOpenKeyword_4_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DelayMechanism__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayMechanismAccess().getTransportMechanismParserRuleCall_0()); }
	ruleTransportMechanism
{ after(grammarAccess.getDelayMechanismAccess().getTransportMechanismParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDelayMechanismAccess().getRejectMechanismParserRuleCall_1()); }
	ruleRejectMechanism
{ after(grammarAccess.getDelayMechanismAccess().getRejectMechanismParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationList__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationListAccess().getMultiIdentifierNameParserRuleCall_0()); }
	ruleMultiIdentifierName
{ after(grammarAccess.getInstantiationListAccess().getMultiIdentifierNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstantiationListAccess().getOthersParserRuleCall_1()); }
	ruleOthers
{ after(grammarAccess.getInstantiationListAccess().getOthersParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstantiationListAccess().getAllParserRuleCall_2()); }
	ruleAll
{ after(grammarAccess.getInstantiationListAccess().getAllParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityStatementAccess().getConcurrentAssertionStatementParserRuleCall_0()); }
	ruleConcurrentAssertionStatement
{ after(grammarAccess.getEntityStatementAccess().getConcurrentAssertionStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEntityStatementAccess().getProcessStatementParserRuleCall_1()); }
	ruleProcessStatement
{ after(grammarAccess.getEntityStatementAccess().getProcessStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEntityStatementAccess().getConcurrentProcedureCallStatementParserRuleCall_2()); }
	ruleConcurrentProcedureCallStatement
{ after(grammarAccess.getEntityStatementAccess().getConcurrentProcedureCallStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getIdentifierNameParserRuleCall_0()); }
	ruleIdentifierName
{ after(grammarAccess.getEnumerationLiteralAccess().getIdentifierNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEnumerationLiteralAccess().getCharacterNameParserRuleCall_1()); }
	ruleCharacterName
{ after(grammarAccess.getEnumerationLiteralAccess().getCharacterNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_0()); }
(rule__SimpleExpression__Group_0__0)
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
(rule__SimpleExpression__Group_1__0)
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getGroup_0()); }
(rule__Factor__Group_0__0)
{ after(grammarAccess.getFactorAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFactorAccess().getUnaryExpressionParserRuleCall_1()); }
	ruleUnaryExpression
{ after(grammarAccess.getFactorAccess().getUnaryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getGroup_0()); }
(rule__SignFactor__Group_0__0)
{ after(grammarAccess.getSignFactorAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSignFactorAccess().getSignUnaryExpressionParserRuleCall_1()); }
	ruleSignUnaryExpression
{ after(grammarAccess.getSignFactorAccess().getSignUnaryExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getAllocatorExpressionParserRuleCall_0()); }
	ruleAllocatorExpression
{ after(grammarAccess.getPrimaryAccess().getAllocatorExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getNameExpressionParserRuleCall_1()); }
	ruleNameExpression
{ after(grammarAccess.getPrimaryAccess().getNameExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getNullExpressionParserRuleCall_2()); }
	ruleNullExpression
{ after(grammarAccess.getPrimaryAccess().getNullExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getBitStringNameParserRuleCall_3()); }
	ruleBitStringName
{ after(grammarAccess.getPrimaryAccess().getBitStringNameParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getCharacterNameParserRuleCall_4()); }
	ruleCharacterName
{ after(grammarAccess.getPrimaryAccess().getCharacterNameParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getValueExpressionParserRuleCall_5()); }
	ruleValueExpression
{ after(grammarAccess.getPrimaryAccess().getValueExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getAggregateParserRuleCall_6()); }
	ruleAggregate
{ after(grammarAccess.getPrimaryAccess().getAggregateParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenerationScheme__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerationSchemeAccess().getForGenerationSchemeParserRuleCall_0()); }
	ruleForGenerationScheme
{ after(grammarAccess.getGenerationSchemeAccess().getForGenerationSchemeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGenerationSchemeAccess().getIfGenerationSchemeParserRuleCall_1()); }
	ruleIfGenerationScheme
{ after(grammarAccess.getGenerationSchemeAccess().getIfGenerationSchemeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentAccess().getNameParserRuleCall_0()); }
	ruleName
{ after(grammarAccess.getGroupConstituentAccess().getNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGroupConstituentAccess().getCharacterNameParserRuleCall_1()); }
	ruleCharacterName
{ after(grammarAccess.getGroupConstituentAccess().getCharacterNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getRangeConstraintParserRuleCall_0()); }
	ruleRangeConstraint
{ after(grammarAccess.getConstraintAccess().getRangeConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstraintAccess().getIndexConstraintParserRuleCall_1()); }
	ruleIndexConstraint
{ after(grammarAccess.getConstraintAccess().getIndexConstraintParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParameterDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall_0()); }
	ruleInterfaceConstantDeclaration
{ after(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall_1()); }
	ruleInterfaceSignalDeclaration
{ after(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceVariableDeclarationParserRuleCall_2()); }
	ruleInterfaceVariableDeclaration
{ after(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceVariableDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceFileDeclarationParserRuleCall_3()); }
	ruleInterfaceFileDeclaration
{ after(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceFileDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureParameterDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceVariableDeclarationParserRuleCall_0()); }
	ruleInterfaceVariableDeclaration
{ after(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceVariableDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall_1()); }
	ruleInterfaceSignalDeclaration
{ after(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall_2()); }
	ruleInterfaceConstantDeclaration
{ after(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceFileDeclarationParserRuleCall_3()); }
	ruleInterfaceFileDeclaration
{ after(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceFileDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationScheme__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationSchemeAccess().getWhileIterationSchemeParserRuleCall_0()); }
	ruleWhileIterationScheme
{ after(grammarAccess.getIterationSchemeAccess().getWhileIterationSchemeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIterationSchemeAccess().getForIterationSchemeParserRuleCall_1()); }
	ruleForIterationScheme
{ after(grammarAccess.getIterationSchemeAccess().getForIterationSchemeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameExpressionAccess().getGroup_0()); }
(rule__NameExpression__Group_0__0)
{ after(grammarAccess.getNameExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNameExpressionAccess().getNamePrefixExpressionParserRuleCall_1()); }
	ruleNamePrefixExpression
{ after(grammarAccess.getNameExpressionAccess().getNamePrefixExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamePrefix__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamePrefixAccess().getIdentifierNameParserRuleCall_0()); }
	ruleIdentifierName
{ after(grammarAccess.getNamePrefixAccess().getIdentifierNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNamePrefixAccess().getStringNameParserRuleCall_1()); }
	ruleStringName
{ after(grammarAccess.getNamePrefixAccess().getStringNameParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNamePrefixAccess().getAllParserRuleCall_2()); }
	ruleAll
{ after(grammarAccess.getNamePrefixAccess().getAllParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNamePrefixAccess().getOthersParserRuleCall_3()); }
	ruleOthers
{ after(grammarAccess.getNamePrefixAccess().getOthersParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamePrefixExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamePrefixExpressionAccess().getIdentifierNameParserRuleCall_0()); }
	ruleIdentifierName
{ after(grammarAccess.getNamePrefixExpressionAccess().getIdentifierNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNamePrefixExpressionAccess().getStringNameParserRuleCall_1()); }
	ruleStringName
{ after(grammarAccess.getNamePrefixExpressionAccess().getStringNameParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNamePrefixExpressionAccess().getAllParserRuleCall_2()); }
	ruleAll
{ after(grammarAccess.getNamePrefixExpressionAccess().getAllParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNamePrefixExpressionAccess().getOthersParserRuleCall_3()); }
	ruleOthers
{ after(grammarAccess.getNamePrefixExpressionAccess().getOthersParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameSuffix__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameSuffixAccess().getSelectedNameParserRuleCall_0()); }
	ruleSelectedName
{ after(grammarAccess.getNameSuffixAccess().getSelectedNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNameSuffixAccess().getAttributeNameParserRuleCall_1()); }
	ruleAttributeName
{ after(grammarAccess.getNameSuffixAccess().getAttributeNameParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNameSuffixAccess().getAggregateParserRuleCall_2()); }
	ruleAggregate
{ after(grammarAccess.getNameSuffixAccess().getAggregateParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNameSuffixAccess().getSliceNameParserRuleCall_3()); }
	ruleSliceName
{ after(grammarAccess.getNameSuffixAccess().getSliceNameParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedName__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedNameAccess().getIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName
{ after(grammarAccess.getSelectedNameAccess().getIdentifierNameParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getSelectedNameAccess().getCharacterNameParserRuleCall_1_1()); }
	ruleCharacterName
{ after(grammarAccess.getSelectedNameAccess().getCharacterNameParserRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getSelectedNameAccess().getStringNameParserRuleCall_1_2()); }
	ruleStringName
{ after(grammarAccess.getSelectedNameAccess().getStringNameParserRuleCall_1_2()); }
)

    |(
{ before(grammarAccess.getSelectedNameAccess().getAllParserRuleCall_1_3()); }
	ruleAll
{ after(grammarAccess.getSelectedNameAccess().getAllParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDefinitionAccess().getScalarNatureDefinitionParserRuleCall_0()); }
	ruleScalarNatureDefinition
{ after(grammarAccess.getNatureDefinitionAccess().getScalarNatureDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNatureDefinitionAccess().getCompositeNatureDefinitionParserRuleCall_1()); }
	ruleCompositeNatureDefinition
{ after(grammarAccess.getNatureDefinitionAccess().getCompositeNatureDefinitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialStatementAccess().getWaitStatementParserRuleCall_0()); }
	ruleWaitStatement
{ after(grammarAccess.getSequentialStatementAccess().getWaitStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getAssertionStatementParserRuleCall_1()); }
	ruleAssertionStatement
{ after(grammarAccess.getSequentialStatementAccess().getAssertionStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getReportStatementParserRuleCall_2()); }
	ruleReportStatement
{ after(grammarAccess.getSequentialStatementAccess().getReportStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getIfStatementParserRuleCall_3()); }
	ruleIfStatement
{ after(grammarAccess.getSequentialStatementAccess().getIfStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getCaseStatementParserRuleCall_4()); }
	ruleCaseStatement
{ after(grammarAccess.getSequentialStatementAccess().getCaseStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getLoopStatementParserRuleCall_5()); }
	ruleLoopStatement
{ after(grammarAccess.getSequentialStatementAccess().getLoopStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getNextStatementParserRuleCall_6()); }
	ruleNextStatement
{ after(grammarAccess.getSequentialStatementAccess().getNextStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getExitStatementParserRuleCall_7()); }
	ruleExitStatement
{ after(grammarAccess.getSequentialStatementAccess().getExitStatementParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getReturnStatementParserRuleCall_8()); }
	ruleReturnStatement
{ after(grammarAccess.getSequentialStatementAccess().getReturnStatementParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getNullStatementParserRuleCall_9()); }
	ruleNullStatement
{ after(grammarAccess.getSequentialStatementAccess().getNullStatementParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getBreakStatementParserRuleCall_10()); }
	ruleBreakStatement
{ after(grammarAccess.getSequentialStatementAccess().getBreakStatementParserRuleCall_10()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getProcedureCallStatementParserRuleCall_11()); }
	ruleProcedureCallStatement
{ after(grammarAccess.getSequentialStatementAccess().getProcedureCallStatementParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getVariableAssignmentStatementParserRuleCall_12()); }
(	ruleVariableAssignmentStatement)
{ after(grammarAccess.getSequentialStatementAccess().getVariableAssignmentStatementParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getSequentialStatementAccess().getSequentialSignalAssignmentStatementParserRuleCall_13()); }
	ruleSequentialSignalAssignmentStatement
{ after(grammarAccess.getSequentialStatementAccess().getSequentialSignalAssignmentStatementParserRuleCall_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousStatementAccess().getSimpleSimultaneousStatementParserRuleCall_0()); }
(	ruleSimpleSimultaneousStatement)
{ after(grammarAccess.getSimultaneousStatementAccess().getSimpleSimultaneousStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimultaneousStatementAccess().getSimultaneousIfStatementParserRuleCall_1()); }
	ruleSimultaneousIfStatement
{ after(grammarAccess.getSimultaneousStatementAccess().getSimultaneousIfStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSimultaneousStatementAccess().getSimultaneousCaseStatementParserRuleCall_2()); }
	ruleSimultaneousCaseStatement
{ after(grammarAccess.getSimultaneousStatementAccess().getSimultaneousCaseStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSimultaneousStatementAccess().getSimultaneousProceduralStatementParserRuleCall_3()); }
	ruleSimultaneousProceduralStatement
{ after(grammarAccess.getSimultaneousStatementAccess().getSimultaneousProceduralStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSimultaneousStatementAccess().getNullStatementParserRuleCall_4()); }
	ruleNullStatement
{ after(grammarAccess.getSimultaneousStatementAccess().getNullStatementParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityDeclarationAccess().getBranchQuantityDeclarationParserRuleCall_0()); }
	ruleBranchQuantityDeclaration
{ after(grammarAccess.getQuantityDeclarationAccess().getBranchQuantityDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getQuantityDeclarationAccess().getFreeQuantityDeclarationParserRuleCall_1()); }
	ruleFreeQuantityDeclaration
{ after(grammarAccess.getQuantityDeclarationAccess().getFreeQuantityDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getQuantityDeclarationAccess().getSourceQuantityDeclarationParserRuleCall_2()); }
	ruleSourceQuantityDeclaration
{ after(grammarAccess.getQuantityDeclarationAccess().getSourceQuantityDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceAspect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceAspectAccess().getSpectrumParserRuleCall_0()); }
	ruleSpectrum
{ after(grammarAccess.getSourceAspectAccess().getSpectrumParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSourceAspectAccess().getNoiseParserRuleCall_1()); }
	ruleNoise
{ after(grammarAccess.getSourceAspectAccess().getNoiseParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramDeclarationAccess().getProcedureDeclarationParserRuleCall_0()); }
	ruleProcedureDeclaration
{ after(grammarAccess.getSubprogramDeclarationAccess().getProcedureDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSubprogramDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); }
	ruleFunctionDeclaration
{ after(grammarAccess.getSubprogramDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Alternatives_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getProcedureKeyword_6_0()); }

	Procedure 

{ after(grammarAccess.getSubprogramBodyAccess().getProcedureKeyword_6_0()); }
)

    |(
{ before(grammarAccess.getSubprogramBodyAccess().getFunctionKeyword_6_1()); }

	Function 

{ after(grammarAccess.getSubprogramBodyAccess().getFunctionKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DiscreteRange__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiscreteRangeAccess().getRangeSpecificationParserRuleCall_0()); }
	ruleRangeSpecification
{ after(grammarAccess.getDiscreteRangeAccess().getRangeSpecificationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDiscreteRangeAccess().getSubtypeIndicationExpressionParserRuleCall_1()); }
	ruleSubtypeIndicationExpression
{ after(grammarAccess.getDiscreteRangeAccess().getSubtypeIndicationExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_0()); }
(rule__SubtypeIndication__Group_0__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_1()); }
(rule__SubtypeIndication__Group_1__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_2()); }
(rule__SubtypeIndication__Group_2__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getSubtypeIndicationAccess().getNameParserRuleCall_3()); }
	ruleName
{ after(grammarAccess.getSubtypeIndicationAccess().getNameParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_0()); }
(rule__SubtypeIndicationExpression__Group_0__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1()); }
(rule__SubtypeIndicationExpression__Group_1__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2()); }
(rule__SubtypeIndicationExpression__Group_2__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getNameExpressionParserRuleCall_3()); }
	ruleNameExpression
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getNameExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_0()); }
(rule__SubnatureIndication__Group_0__0)
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_1()); }
(rule__SubnatureIndication__Group_1__0)
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSubnatureIndicationAccess().getNameParserRuleCall_2()); }
	ruleName
{ after(grammarAccess.getSubnatureIndicationAccess().getNameParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Target__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getNameExpressionParserRuleCall_0()); }
	ruleNameExpression
{ after(grammarAccess.getTargetAccess().getNameExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTargetAccess().getAggregateParserRuleCall_1()); }
	ruleAggregate
{ after(grammarAccess.getTargetAccess().getAggregateParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_0()); }
	ruleEnumerationTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getCompositeTypeDefinitionParserRuleCall_1()); }
	ruleCompositeTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getCompositeTypeDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getAccessTypeDefinitionParserRuleCall_2()); }
	ruleAccessTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getAccessTypeDefinitionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getFileTypeDefinitionParserRuleCall_3()); }
	ruleFileTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getFileTypeDefinitionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getPhysicalTypeDefinitionParserRuleCall_4()); }
(	rulePhysicalTypeDefinition)
{ after(grammarAccess.getTypeDefinitionAccess().getPhysicalTypeDefinitionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getTypeDefinitionAccess().getRangeTypeDefinitionParserRuleCall_5()); }
	ruleRangeTypeDefinition
{ after(grammarAccess.getTypeDefinitionAccess().getRangeTypeDefinitionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getGroup_0()); }
(rule__RangeTypeDefinition__Group_0__0)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getGroup_1()); }
(rule__RangeTypeDefinition__Group_1__0)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getGroup_0()); }
(rule__ValueExpression__Group_0__0)
{ after(grammarAccess.getValueExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getValueExpressionAccess().getGroup_1()); }
(rule__ValueExpression__Group_1__0)
{ after(grammarAccess.getValueExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DesignatorName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignatorNameAccess().getIdentifierNameParserRuleCall_0()); }
	ruleIdentifierName
{ after(grammarAccess.getDesignatorNameAccess().getIdentifierNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDesignatorNameAccess().getStringNameParserRuleCall_1()); }
	ruleStringName
{ after(grammarAccess.getDesignatorNameAccess().getStringNameParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Designator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignatorAccess().getIdentifierParserRuleCall_0()); }
	ruleIdentifier
{ after(grammarAccess.getDesignatorAccess().getIdentifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDesignatorAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getDesignatorAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdentifierAccess().getEXTENDED_IDENTIFIERTerminalRuleCall_1()); }
	RULE_EXTENDED_IDENTIFIER
{ after(grammarAccess.getIdentifierAccess().getEXTENDED_IDENTIFIERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalKindAccess().getREGISTEREnumLiteralDeclaration_0()); }
(	Register
)
{ after(grammarAccess.getSignalKindAccess().getREGISTEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSignalKindAccess().getBUSEnumLiteralDeclaration_1()); }
(	Bus
)
{ after(grammarAccess.getSignalKindAccess().getBUSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeDirection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeDirectionAccess().getTOEnumLiteralDeclaration_0()); }
(	To
)
{ after(grammarAccess.getRangeDirectionAccess().getTOEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRangeDirectionAccess().getDOWNTOEnumLiteralDeclaration_1()); }
(	Downto
)
{ after(grammarAccess.getRangeDirectionAccess().getDOWNTOEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModeAccess().getINEnumLiteralDeclaration_0()); }
(	In
)
{ after(grammarAccess.getModeAccess().getINEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getModeAccess().getOUTEnumLiteralDeclaration_1()); }
(	Out
)
{ after(grammarAccess.getModeAccess().getOUTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getModeAccess().getINOUTEnumLiteralDeclaration_2()); }
(	Inout
)
{ after(grammarAccess.getModeAccess().getINOUTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getModeAccess().getBUFFEREnumLiteralDeclaration_3()); }
(	Buffer
)
{ after(grammarAccess.getModeAccess().getBUFFEREnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getModeAccess().getLINKAGEEnumLiteralDeclaration_4()); }
(	Linkage
)
{ after(grammarAccess.getModeAccess().getLINKAGEEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getABSEnumLiteralDeclaration_0()); }
(	Abs
)
{ after(grammarAccess.getUnaryOperatorAccess().getABSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_1()); }
(	Not
)
{ after(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplyingOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplyingOperatorAccess().getMULEnumLiteralDeclaration_0()); }
(	Asterisk
)
{ after(grammarAccess.getMultiplyingOperatorAccess().getMULEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplyingOperatorAccess().getDIVEnumLiteralDeclaration_1()); }
(	Solidus
)
{ after(grammarAccess.getMultiplyingOperatorAccess().getDIVEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiplyingOperatorAccess().getMODEnumLiteralDeclaration_2()); }
(	Mod
)
{ after(grammarAccess.getMultiplyingOperatorAccess().getMODEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMultiplyingOperatorAccess().getREMEnumLiteralDeclaration_3()); }
(	Rem
)
{ after(grammarAccess.getMultiplyingOperatorAccess().getREMEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftOperatorAccess().getSLLEnumLiteralDeclaration_0()); }
(	Sll
)
{ after(grammarAccess.getShiftOperatorAccess().getSLLEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getSRLEnumLiteralDeclaration_1()); }
(	Srl
)
{ after(grammarAccess.getShiftOperatorAccess().getSRLEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getSLAEnumLiteralDeclaration_2()); }
(	Sla
)
{ after(grammarAccess.getShiftOperatorAccess().getSLAEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getSRAEnumLiteralDeclaration_3()); }
(	Sra
)
{ after(grammarAccess.getShiftOperatorAccess().getSRAEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getROLEnumLiteralDeclaration_4()); }
(	Rol
)
{ after(grammarAccess.getShiftOperatorAccess().getROLEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getShiftOperatorAccess().getROREnumLiteralDeclaration_5()); }
(	Ror
)
{ after(grammarAccess.getShiftOperatorAccess().getROREnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	EqualsSign
)
{ after(grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getNEQEnumLiteralDeclaration_1()); }
(	SolidusEqualsSign
)
{ after(grammarAccess.getRelationalOperatorAccess().getNEQEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLOWERTHANEnumLiteralDeclaration_2()); }
(	LessThanSign
)
{ after(grammarAccess.getRelationalOperatorAccess().getLOWERTHANEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getLEEnumLiteralDeclaration_3()); }
(	LessThanSignEqualsSign
)
{ after(grammarAccess.getRelationalOperatorAccess().getLEEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGREATERTHANEnumLiteralDeclaration_4()); }
(	GreaterThanSign
)
{ after(grammarAccess.getRelationalOperatorAccess().getGREATERTHANEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGEEnumLiteralDeclaration_5()); }
(	GreaterThanSignEqualsSign
)
{ after(grammarAccess.getRelationalOperatorAccess().getGEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOperatorAccess().getANDEnumLiteralDeclaration_0()); }
(	And
)
{ after(grammarAccess.getLogicalOperatorAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getOREnumLiteralDeclaration_1()); }
(	Or
)
{ after(grammarAccess.getLogicalOperatorAccess().getOREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getNANDEnumLiteralDeclaration_2()); }
(	Nand
)
{ after(grammarAccess.getLogicalOperatorAccess().getNANDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getNOREnumLiteralDeclaration_3()); }
(	Nor
)
{ after(grammarAccess.getLogicalOperatorAccess().getNOREnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getXOREnumLiteralDeclaration_4()); }
(	Xor
)
{ after(grammarAccess.getLogicalOperatorAccess().getXOREnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getLogicalOperatorAccess().getXNOREnumLiteralDeclaration_5()); }
(	Xnor
)
{ after(grammarAccess.getLogicalOperatorAccess().getXNOREnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddingOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddingOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
(	PlusSign
)
{ after(grammarAccess.getAddingOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAddingOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	HyphenMinus
)
{ after(grammarAccess.getAddingOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAddingOperatorAccess().getAMPERSANDEnumLiteralDeclaration_2()); }
(	Ampersand
)
{ after(grammarAccess.getAddingOperatorAccess().getAMPERSANDEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getPLUSEnumLiteralDeclaration_0()); }
(	PlusSign
)
{ after(grammarAccess.getSignAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSignAccess().getMINUSEnumLiteralDeclaration_1()); }
(	HyphenMinus
)
{ after(grammarAccess.getSignAccess().getMINUSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Purity__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPurityAccess().getPUREEnumLiteralDeclaration_0()); }
(	Pure
)
{ after(grammarAccess.getPurityAccess().getPUREEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPurityAccess().getIMPUREEnumLiteralDeclaration_1()); }
(	Impure
)
{ after(grammarAccess.getPurityAccess().getIMPUREEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityClass__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityClassAccess().getENTITYEnumLiteralDeclaration_0()); }
(	Entity
)
{ after(grammarAccess.getEntityClassAccess().getENTITYEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getARCHITECTUREEnumLiteralDeclaration_1()); }
(	Architecture
)
{ after(grammarAccess.getEntityClassAccess().getARCHITECTUREEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getCONFIGURATIONEnumLiteralDeclaration_2()); }
(	Configuration
)
{ after(grammarAccess.getEntityClassAccess().getCONFIGURATIONEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getPROCEDUREEnumLiteralDeclaration_3()); }
(	Procedure
)
{ after(grammarAccess.getEntityClassAccess().getPROCEDUREEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getFUNCTIONEnumLiteralDeclaration_4()); }
(	Function
)
{ after(grammarAccess.getEntityClassAccess().getFUNCTIONEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getPACKAGEEnumLiteralDeclaration_5()); }
(	Package
)
{ after(grammarAccess.getEntityClassAccess().getPACKAGEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getTYPEEnumLiteralDeclaration_6()); }
(	Type
)
{ after(grammarAccess.getEntityClassAccess().getTYPEEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getSUBTYPEEnumLiteralDeclaration_7()); }
(	Subtype
)
{ after(grammarAccess.getEntityClassAccess().getSUBTYPEEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getCONSTANTEnumLiteralDeclaration_8()); }
(	Constant
)
{ after(grammarAccess.getEntityClassAccess().getCONSTANTEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getSIGNALEnumLiteralDeclaration_9()); }
(	Signal
)
{ after(grammarAccess.getEntityClassAccess().getSIGNALEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getVARIABLEEnumLiteralDeclaration_10()); }
(	Variable
)
{ after(grammarAccess.getEntityClassAccess().getVARIABLEEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getCOMPONENTEnumLiteralDeclaration_11()); }
(	Component
)
{ after(grammarAccess.getEntityClassAccess().getCOMPONENTEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getLABELEnumLiteralDeclaration_12()); }
(	Label
)
{ after(grammarAccess.getEntityClassAccess().getLABELEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getLITERALEnumLiteralDeclaration_13()); }
(	Literal
)
{ after(grammarAccess.getEntityClassAccess().getLITERALEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getUNITSEnumLiteralDeclaration_14()); }
(	Units
)
{ after(grammarAccess.getEntityClassAccess().getUNITSEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getGROUPEnumLiteralDeclaration_15()); }
(	Group
)
{ after(grammarAccess.getEntityClassAccess().getGROUPEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getFILEEnumLiteralDeclaration_16()); }
(	File
)
{ after(grammarAccess.getEntityClassAccess().getFILEEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getNATUREEnumLiteralDeclaration_17()); }
(	Nature
)
{ after(grammarAccess.getEntityClassAccess().getNATUREEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getSUBNATUREEnumLiteralDeclaration_18()); }
(	Subnature
)
{ after(grammarAccess.getEntityClassAccess().getSUBNATUREEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getQUANTITYEnumLiteralDeclaration_19()); }
(	Quantity
)
{ after(grammarAccess.getEntityClassAccess().getQUANTITYEnumLiteralDeclaration_19()); }
)

    |(
{ before(grammarAccess.getEntityClassAccess().getTERMINALEnumLiteralDeclaration_20()); }
(	Terminal
)
{ after(grammarAccess.getEntityClassAccess().getTERMINALEnumLiteralDeclaration_20()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DesignUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group__0__Impl
	rule__DesignUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getAlternatives_0()); }
(rule__DesignUnit__Alternatives_0)*
{ after(grammarAccess.getDesignUnitAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getModuleAssignment_1()); }
(rule__DesignUnit__ModuleAssignment_1)
{ after(grammarAccess.getDesignUnitAccess().getModuleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DesignUnit__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_0__0__Impl
	rule__DesignUnit__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getLibraryKeyword_0_0_0()); }

	Library 

{ after(grammarAccess.getDesignUnitAccess().getLibraryKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_0__1__Impl
	rule__DesignUnit__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getLibraryAssignment_0_0_1()); }
(rule__DesignUnit__LibraryAssignment_0_0_1)
{ after(grammarAccess.getDesignUnitAccess().getLibraryAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_0__2__Impl
	rule__DesignUnit__Group_0_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getGroup_0_0_2()); }
(rule__DesignUnit__Group_0_0_2__0)*
{ after(grammarAccess.getDesignUnitAccess().getGroup_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getSemicolonKeyword_0_0_3()); }

	Semicolon 

{ after(grammarAccess.getDesignUnitAccess().getSemicolonKeyword_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DesignUnit__Group_0_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_0_2__0__Impl
	rule__DesignUnit__Group_0_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getCommaKeyword_0_0_2_0()); }

	Comma 

{ after(grammarAccess.getDesignUnitAccess().getCommaKeyword_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getLibraryAssignment_0_0_2_1()); }
(rule__DesignUnit__LibraryAssignment_0_0_2_1)
{ after(grammarAccess.getDesignUnitAccess().getLibraryAssignment_0_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DesignUnit__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_1__0__Impl
	rule__DesignUnit__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getUseKeyword_0_1_0()); }

	Use 

{ after(grammarAccess.getDesignUnitAccess().getUseKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_1__1__Impl
	rule__DesignUnit__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getUseAssignment_0_1_1()); }
(rule__DesignUnit__UseAssignment_0_1_1)
{ after(grammarAccess.getDesignUnitAccess().getUseAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_1__2__Impl
	rule__DesignUnit__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getGroup_0_1_2()); }
(rule__DesignUnit__Group_0_1_2__0)*
{ after(grammarAccess.getDesignUnitAccess().getGroup_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getSemicolonKeyword_0_1_3()); }

	Semicolon 

{ after(grammarAccess.getDesignUnitAccess().getSemicolonKeyword_0_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DesignUnit__Group_0_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_1_2__0__Impl
	rule__DesignUnit__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getCommaKeyword_0_1_2_0()); }

	Comma 

{ after(grammarAccess.getDesignUnitAccess().getCommaKeyword_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DesignUnit__Group_0_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DesignUnit__Group_0_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__Group_0_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getUseAssignment_0_1_2_1()); }
(rule__DesignUnit__UseAssignment_0_1_2_1)
{ after(grammarAccess.getDesignUnitAccess().getUseAssignment_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Architecture__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__0__Impl
	rule__Architecture__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getArchitectureKeyword_0()); }

	Architecture 

{ after(grammarAccess.getArchitectureAccess().getArchitectureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__1__Impl
	rule__Architecture__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getNameAssignment_1()); }
(rule__Architecture__NameAssignment_1)
{ after(grammarAccess.getArchitectureAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__2__Impl
	rule__Architecture__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getOfKeyword_2()); }

	Of 

{ after(grammarAccess.getArchitectureAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__3__Impl
	rule__Architecture__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getOfAssignment_3()); }
(rule__Architecture__OfAssignment_3)
{ after(grammarAccess.getArchitectureAccess().getOfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__4__Impl
	rule__Architecture__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getIsKeyword_4()); }

	Is 

{ after(grammarAccess.getArchitectureAccess().getIsKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__5__Impl
	rule__Architecture__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getDeclarationAssignment_5()); }
(rule__Architecture__DeclarationAssignment_5)*
{ after(grammarAccess.getArchitectureAccess().getDeclarationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__6__Impl
	rule__Architecture__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getBeginKeyword_6()); }

	Begin 

{ after(grammarAccess.getArchitectureAccess().getBeginKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__7__Impl
	rule__Architecture__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getStatementAssignment_7()); }
(rule__Architecture__StatementAssignment_7)*
{ after(grammarAccess.getArchitectureAccess().getStatementAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__8__Impl
	rule__Architecture__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getEndKeyword_8()); }

	End 

{ after(grammarAccess.getArchitectureAccess().getEndKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__9__Impl
	rule__Architecture__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getArchitectureKeyword_9()); }
(
	Architecture 
)?
{ after(grammarAccess.getArchitectureAccess().getArchitectureKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__10__Impl
	rule__Architecture__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getIdentifierParserRuleCall_10()); }
(	ruleIdentifier)?
{ after(grammarAccess.getArchitectureAccess().getIdentifierParserRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Architecture__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Architecture__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getSemicolonKeyword_11()); }

	Semicolon 

{ after(grammarAccess.getArchitectureAccess().getSemicolonKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__PackageBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__0__Impl
	rule__PackageBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getPackageKeyword_0()); }

	Package 

{ after(grammarAccess.getPackageBodyAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__1__Impl
	rule__PackageBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getBodyKeyword_1()); }

	Body 

{ after(grammarAccess.getPackageBodyAccess().getBodyKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__2__Impl
	rule__PackageBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getNameAssignment_2()); }
(rule__PackageBody__NameAssignment_2)
{ after(grammarAccess.getPackageBodyAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__3__Impl
	rule__PackageBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getIsKeyword_3()); }

	Is 

{ after(grammarAccess.getPackageBodyAccess().getIsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__4__Impl
	rule__PackageBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getDeclarationAssignment_4()); }
(rule__PackageBody__DeclarationAssignment_4)*
{ after(grammarAccess.getPackageBodyAccess().getDeclarationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__5__Impl
	rule__PackageBody__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getPackageBodyAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__6__Impl
	rule__PackageBody__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getGroup_6()); }
(rule__PackageBody__Group_6__0)?
{ after(grammarAccess.getPackageBodyAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__7__Impl
	rule__PackageBody__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getIdentifierParserRuleCall_7()); }
(	ruleIdentifier)?
{ after(grammarAccess.getPackageBodyAccess().getIdentifierParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getPackageBodyAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__PackageBody__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group_6__0__Impl
	rule__PackageBody__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getPackageKeyword_6_0()); }

	Package 

{ after(grammarAccess.getPackageBodyAccess().getPackageKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageBody__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageBody__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getBodyKeyword_6_1()); }

	Body 

{ after(grammarAccess.getPackageBodyAccess().getBodyKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Package__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageKeyword_0()); }

	Package 

{ after(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameAssignment_1()); }
(rule__Package__NameAssignment_1)
{ after(grammarAccess.getPackageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__2__Impl
	rule__Package__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getIsKeyword_2()); }

	Is 

{ after(grammarAccess.getPackageAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__3__Impl
	rule__Package__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getDeclarationAssignment_3()); }
(rule__Package__DeclarationAssignment_3)*
{ after(grammarAccess.getPackageAccess().getDeclarationAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__4__Impl
	rule__Package__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getEndKeyword_4()); }

	End 

{ after(grammarAccess.getPackageAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__5__Impl
	rule__Package__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageKeyword_5()); }
(
	Package 
)?
{ after(grammarAccess.getPackageAccess().getPackageKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__6__Impl
	rule__Package__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getIdentifierParserRuleCall_6()); }
(	ruleIdentifier)?
{ after(grammarAccess.getPackageAccess().getIdentifierParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getSemicolonKeyword_7()); }

	Semicolon 

{ after(grammarAccess.getPackageAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Entity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEntityKeyword_0()); }

	Entity 

{ after(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getNameAssignment_1()); }
(rule__Entity__NameAssignment_1)
{ after(grammarAccess.getEntityAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getIsKeyword_2()); }

	Is 

{ after(grammarAccess.getEntityAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getGenericAssignment_3()); }
(rule__Entity__GenericAssignment_3)?
{ after(grammarAccess.getEntityAccess().getGenericAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getPortAssignment_4()); }
(rule__Entity__PortAssignment_4)?
{ after(grammarAccess.getEntityAccess().getPortAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__5__Impl
	rule__Entity__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getDeclarationAssignment_5()); }
(rule__Entity__DeclarationAssignment_5)*
{ after(grammarAccess.getEntityAccess().getDeclarationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__6__Impl
	rule__Entity__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getGroup_6()); }
(rule__Entity__Group_6__0)?
{ after(grammarAccess.getEntityAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__7__Impl
	rule__Entity__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEndKeyword_7()); }

	End 

{ after(grammarAccess.getEntityAccess().getEndKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__8__Impl
	rule__Entity__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEntityKeyword_8()); }
(
	Entity 
)?
{ after(grammarAccess.getEntityAccess().getEntityKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__9__Impl
	rule__Entity__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getIdentifierParserRuleCall_9()); }
(	ruleIdentifier)?
{ after(grammarAccess.getEntityAccess().getIdentifierParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getSemicolonKeyword_10()); }

	Semicolon 

{ after(grammarAccess.getEntityAccess().getSemicolonKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__Entity__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group_6__0__Impl
	rule__Entity__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getBeginKeyword_6_0()); }

	Begin 

{ after(grammarAccess.getEntityAccess().getBeginKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getStatementAssignment_6_1()); }
(rule__Entity__StatementAssignment_6_1)*
{ after(grammarAccess.getEntityAccess().getStatementAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Configuration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__0__Impl
	rule__Configuration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getConfigurationKeyword_0()); }

	Configuration 

{ after(grammarAccess.getConfigurationAccess().getConfigurationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__1__Impl
	rule__Configuration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getNameAssignment_1()); }
(rule__Configuration__NameAssignment_1)
{ after(grammarAccess.getConfigurationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__2__Impl
	rule__Configuration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getOfKeyword_2()); }

	Of 

{ after(grammarAccess.getConfigurationAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__3__Impl
	rule__Configuration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getOfAssignment_3()); }
(rule__Configuration__OfAssignment_3)
{ after(grammarAccess.getConfigurationAccess().getOfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__4__Impl
	rule__Configuration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getIsKeyword_4()); }

	Is 

{ after(grammarAccess.getConfigurationAccess().getIsKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__5__Impl
	rule__Configuration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getDeclarationAssignment_5()); }
(rule__Configuration__DeclarationAssignment_5)*
{ after(grammarAccess.getConfigurationAccess().getDeclarationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__6__Impl
	rule__Configuration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getBlockAssignment_6()); }
(rule__Configuration__BlockAssignment_6)
{ after(grammarAccess.getConfigurationAccess().getBlockAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__7__Impl
	rule__Configuration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getEndKeyword_7()); }

	End 

{ after(grammarAccess.getConfigurationAccess().getEndKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__8__Impl
	rule__Configuration__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getConfigurationKeyword_8()); }
(
	Configuration 
)?
{ after(grammarAccess.getConfigurationAccess().getConfigurationKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__9__Impl
	rule__Configuration__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getIdentifierParserRuleCall_9()); }
(	ruleIdentifier)?
{ after(grammarAccess.getConfigurationAccess().getIdentifierParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getSemicolonKeyword_10()); }

	Semicolon 

{ after(grammarAccess.getConfigurationAccess().getSemicolonKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__UseClauseDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseClauseDeclaration__Group__0__Impl
	rule__UseClauseDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseClauseDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseClauseDeclarationAccess().getUseKeyword_0()); }

	Use 

{ after(grammarAccess.getUseClauseDeclarationAccess().getUseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseClauseDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseClauseDeclaration__Group__1__Impl
	rule__UseClauseDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UseClauseDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseClauseDeclarationAccess().getUseAssignment_1()); }
(rule__UseClauseDeclaration__UseAssignment_1)
{ after(grammarAccess.getUseClauseDeclarationAccess().getUseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseClauseDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseClauseDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseClauseDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseClauseDeclarationAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getUseClauseDeclarationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AccessTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessTypeDefinition__Group__0__Impl
	rule__AccessTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessTypeDefinitionAccess().getAccessKeyword_0()); }

	Access 

{ after(grammarAccess.getAccessTypeDefinitionAccess().getAccessKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessTypeDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessTypeDefinitionAccess().getTypeAssignment_1()); }
(rule__AccessTypeDefinition__TypeAssignment_1)
{ after(grammarAccess.getAccessTypeDefinitionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssertionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group__0__Impl
	rule__AssertionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getGroup_0()); }
(rule__AssertionStatement__Group_0__0)?
{ after(grammarAccess.getAssertionStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group__1__Impl
	rule__AssertionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getAssertKeyword_1()); }

	Assert 

{ after(grammarAccess.getAssertionStatementAccess().getAssertKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group__2__Impl
	rule__AssertionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getConditionAssignment_2()); }
(rule__AssertionStatement__ConditionAssignment_2)
{ after(grammarAccess.getAssertionStatementAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group__3__Impl
	rule__AssertionStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getGroup_3()); }
(rule__AssertionStatement__Group_3__0)?
{ after(grammarAccess.getAssertionStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group__4__Impl
	rule__AssertionStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getGroup_4()); }
(rule__AssertionStatement__Group_4__0)?
{ after(grammarAccess.getAssertionStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getAssertionStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AssertionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group_0__0__Impl
	rule__AssertionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getLabelAssignment_0_0()); }
(rule__AssertionStatement__LabelAssignment_0_0)
{ after(grammarAccess.getAssertionStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getAssertionStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssertionStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group_3__0__Impl
	rule__AssertionStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getReportKeyword_3_0()); }

	Report 

{ after(grammarAccess.getAssertionStatementAccess().getReportKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getReportAssignment_3_1()); }
(rule__AssertionStatement__ReportAssignment_3_1)
{ after(grammarAccess.getAssertionStatementAccess().getReportAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssertionStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group_4__0__Impl
	rule__AssertionStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getSeverityKeyword_4_0()); }

	Severity 

{ after(grammarAccess.getAssertionStatementAccess().getSeverityKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssertionStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssertionStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getSeverityAssignment_4_1()); }
(rule__AssertionStatement__SeverityAssignment_4_1)
{ after(grammarAccess.getAssertionStatementAccess().getSeverityAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentAssertionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__0__Impl
	rule__ConcurrentAssertionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getGroup_0()); }
(rule__ConcurrentAssertionStatement__Group_0__0)?
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__1__Impl
	rule__ConcurrentAssertionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getPostponedAssignment_1()); }
(rule__ConcurrentAssertionStatement__PostponedAssignment_1)?
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getPostponedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__2__Impl
	rule__ConcurrentAssertionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getAssertKeyword_2()); }

	Assert 

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getAssertKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__3__Impl
	rule__ConcurrentAssertionStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getConditionAssignment_3()); }
(rule__ConcurrentAssertionStatement__ConditionAssignment_3)
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__4__Impl
	rule__ConcurrentAssertionStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getGroup_4()); }
(rule__ConcurrentAssertionStatement__Group_4__0)?
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__5__Impl
	rule__ConcurrentAssertionStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getGroup_5()); }
(rule__ConcurrentAssertionStatement__Group_5__0)?
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ConcurrentAssertionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group_0__0__Impl
	rule__ConcurrentAssertionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getLabelAssignment_0_0()); }
(rule__ConcurrentAssertionStatement__LabelAssignment_0_0)
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentAssertionStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group_4__0__Impl
	rule__ConcurrentAssertionStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getReportKeyword_4_0()); }

	Report 

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getReportKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getReportAssignment_4_1()); }
(rule__ConcurrentAssertionStatement__ReportAssignment_4_1)
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getReportAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentAssertionStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group_5__0__Impl
	rule__ConcurrentAssertionStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityKeyword_5_0()); }

	Severity 

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentAssertionStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentAssertionStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityAssignment_5_1()); }
(rule__ConcurrentAssertionStatement__SeverityAssignment_5_1)
{ after(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_0__0__Impl
	rule__Parameter__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAssociationExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getParameterAccess().getAssociationExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_0__1__Impl
	rule__Parameter__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getChoiceAssignment_0_1()); }
(rule__Parameter__ChoiceAssignment_0_1)
{ after(grammarAccess.getParameterAccess().getChoiceAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_0__2__Impl
	rule__Parameter__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getEqualsSignGreaterThanSignKeyword_0_2()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getParameterAccess().getEqualsSignGreaterThanSignKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getAlternatives_0_3()); }
(rule__Parameter__Alternatives_0_3)
{ after(grammarAccess.getParameterAccess().getAlternatives_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Choices__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choices__Group__0__Impl
	rule__Choices__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoicesAccess().getChoiceParserRuleCall_0()); }
	ruleChoice
{ after(grammarAccess.getChoicesAccess().getChoiceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choices__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choices__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoicesAccess().getGroup_1()); }
(rule__Choices__Group_1__0)?
{ after(grammarAccess.getChoicesAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choices__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choices__Group_1__0__Impl
	rule__Choices__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoicesAccess().getMultiExpressionExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getChoicesAccess().getMultiExpressionExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choices__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choices__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getChoicesAccess().getGroup_1_1()); }
(rule__Choices__Group_1_1__0)
{ after(grammarAccess.getChoicesAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getChoicesAccess().getGroup_1_1()); }
(rule__Choices__Group_1_1__0)*
{ after(grammarAccess.getChoicesAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choices__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choices__Group_1_1__0__Impl
	rule__Choices__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoicesAccess().getVerticalLineKeyword_1_1_0()); }

	VerticalLine 

{ after(grammarAccess.getChoicesAccess().getVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choices__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choices__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoicesAccess().getExpressionAssignment_1_1_1()); }
(rule__Choices__ExpressionAssignment_1_1_1)
{ after(grammarAccess.getChoicesAccess().getExpressionAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Open__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Open__Group__0__Impl
	rule__Open__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenAccess().getOpenExpressionAction_0()); }
(

)
{ after(grammarAccess.getOpenAccess().getOpenExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Open__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Open__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Open__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenAccess().getOpenKeyword_1()); }

	Open 

{ after(grammarAccess.getOpenAccess().getOpenKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__0__Impl
	rule__AttributeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getAttributeKeyword_0()); }

	Attribute 

{ after(grammarAccess.getAttributeDeclarationAccess().getAttributeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__1__Impl
	rule__AttributeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1()); }
(rule__AttributeDeclaration__NameAssignment_1)
{ after(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__2__Impl
	rule__AttributeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__3__Impl
	rule__AttributeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getTypeAssignment_3()); }
(rule__AttributeDeclaration__TypeAssignment_3)
{ after(grammarAccess.getAttributeDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getAttributeDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AttributeSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__0__Impl
	rule__AttributeSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getAttributeKeyword_0()); }

	Attribute 

{ after(grammarAccess.getAttributeSpecificationAccess().getAttributeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__1__Impl
	rule__AttributeSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getNameAssignment_1()); }
(rule__AttributeSpecification__NameAssignment_1)
{ after(grammarAccess.getAttributeSpecificationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__2__Impl
	rule__AttributeSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getOfKeyword_2()); }

	Of 

{ after(grammarAccess.getAttributeSpecificationAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__3__Impl
	rule__AttributeSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getEntityAssignment_3()); }
(rule__AttributeSpecification__EntityAssignment_3)
{ after(grammarAccess.getAttributeSpecificationAccess().getEntityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__4__Impl
	rule__AttributeSpecification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getColonKeyword_4()); }

	Colon 

{ after(grammarAccess.getAttributeSpecificationAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__5__Impl
	rule__AttributeSpecification__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getClassAssignment_5()); }
(rule__AttributeSpecification__ClassAssignment_5)
{ after(grammarAccess.getAttributeSpecificationAccess().getClassAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__6__Impl
	rule__AttributeSpecification__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getIsKeyword_6()); }

	Is 

{ after(grammarAccess.getAttributeSpecificationAccess().getIsKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__7__Impl
	rule__AttributeSpecification__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getIsAssignment_7()); }
(rule__AttributeSpecification__IsAssignment_7)
{ after(grammarAccess.getAttributeSpecificationAccess().getIsAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeSpecification__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeSpecification__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getAttributeSpecificationAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__AttributeDesignator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_1__0__Impl
	rule__AttributeDesignator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDesignator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_1_1()); }
(rule__AttributeDesignator__ValueAssignment_1_1)
{ after(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeDesignator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_2__0__Impl
	rule__AttributeDesignator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDesignator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_2_1()); }
(rule__AttributeDesignator__ValueAssignment_2_1)
{ after(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeDesignator__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_3__0__Impl
	rule__AttributeDesignator__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_3_0()); }
(

)
{ after(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDesignator__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_3_1()); }
(rule__AttributeDesignator__ValueAssignment_3_1)
{ after(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeDesignator__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_4__0__Impl
	rule__AttributeDesignator__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_4_0()); }
(

)
{ after(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDesignator__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_4_1()); }
(rule__AttributeDesignator__ValueAssignment_4_1)
{ after(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeDesignator__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_5__0__Impl
	rule__AttributeDesignator__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_5_0()); }
(

)
{ after(grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeDesignator__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeDesignator__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_5_1()); }
(rule__AttributeDesignator__ValueAssignment_5_1)
{ after(grammarAccess.getAttributeDesignatorAccess().getValueAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntity__Group__0__Impl
	rule__AttributeEntity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityAccess().getAttributeEntityDesignatorParserRuleCall_0()); }
	ruleAttributeEntityDesignator
{ after(grammarAccess.getAttributeEntityAccess().getAttributeEntityDesignatorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntity__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityAccess().getGroup_1()); }
(rule__AttributeEntity__Group_1__0)?
{ after(grammarAccess.getAttributeEntityAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntity__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntity__Group_1__0__Impl
	rule__AttributeEntity__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityAccess().getNameListNameAction_1_0()); }
(

)
{ after(grammarAccess.getAttributeEntityAccess().getNameListNameAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntity__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntity__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAttributeEntityAccess().getGroup_1_1()); }
(rule__AttributeEntity__Group_1_1__0)
{ after(grammarAccess.getAttributeEntityAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAttributeEntityAccess().getGroup_1_1()); }
(rule__AttributeEntity__Group_1_1__0)*
{ after(grammarAccess.getAttributeEntityAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntity__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntity__Group_1_1__0__Impl
	rule__AttributeEntity__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getAttributeEntityAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntity__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntity__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityAccess().getNameAssignment_1_1_1()); }
(rule__AttributeEntity__NameAssignment_1_1_1)
{ after(grammarAccess.getAttributeEntityAccess().getNameAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntityDesignator__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_0__0__Impl
	rule__AttributeEntityDesignator__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getIdentifierNameParserRuleCall_0_0()); }
	ruleIdentifierName
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getIdentifierNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntityDesignator__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_0_1()); }
(rule__AttributeEntityDesignator__Group_0_1__0)?
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntityDesignator__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_0_1__0__Impl
	rule__AttributeEntityDesignator__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_0_1_0()); }
(

)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntityDesignator__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureAssignment_0_1_1()); }
(rule__AttributeEntityDesignator__SignatureAssignment_0_1_1)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntityDesignator__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_1__0__Impl
	rule__AttributeEntityDesignator__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getCharacterNameParserRuleCall_1_0()); }
	ruleCharacterName
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getCharacterNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntityDesignator__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_1_1()); }
(rule__AttributeEntityDesignator__Group_1_1__0)?
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntityDesignator__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_1_1__0__Impl
	rule__AttributeEntityDesignator__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_1_1_0()); }
(

)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntityDesignator__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureAssignment_1_1_1()); }
(rule__AttributeEntityDesignator__SignatureAssignment_1_1_1)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntityDesignator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_2__0__Impl
	rule__AttributeEntityDesignator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getStringNameParserRuleCall_2_0()); }
	ruleStringName
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getStringNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntityDesignator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_2_1()); }
(rule__AttributeEntityDesignator__Group_2_1__0)?
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeEntityDesignator__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_2_1__0__Impl
	rule__AttributeEntityDesignator__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_2_1_0()); }
(

)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeEntityDesignator__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeEntityDesignator__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureAssignment_2_1_1()); }
(rule__AttributeEntityDesignator__SignatureAssignment_2_1_1)
{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NameSignature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameSignature__Group__0__Impl
	rule__NameSignature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameSignature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameSignatureAccess().getNameParserRuleCall_0()); }
	ruleName
{ after(grammarAccess.getNameSignatureAccess().getNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameSignature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameSignature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameSignature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameSignatureAccess().getGroup_1()); }
(rule__NameSignature__Group_1__0)?
{ after(grammarAccess.getNameSignatureAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NameSignature__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameSignature__Group_1__0__Impl
	rule__NameSignature__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameSignature__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameSignatureAccess().getSignatureExpressionNameAction_1_0()); }
(

)
{ after(grammarAccess.getNameSignatureAccess().getSignatureExpressionNameAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameSignature__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameSignature__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameSignature__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameSignatureAccess().getSignatureAssignment_1_1()); }
(rule__NameSignature__SignatureAssignment_1_1)
{ after(grammarAccess.getNameSignatureAccess().getSignatureAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockConfiguration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__0__Impl
	rule__BlockConfiguration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getForKeyword_0()); }

	For 

{ after(grammarAccess.getBlockConfigurationAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__1__Impl
	rule__BlockConfiguration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getNameAssignment_1()); }
(rule__BlockConfiguration__NameAssignment_1)
{ after(grammarAccess.getBlockConfigurationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__2__Impl
	rule__BlockConfiguration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getGroup_2()); }
(rule__BlockConfiguration__Group_2__0)*
{ after(grammarAccess.getBlockConfigurationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__3__Impl
	rule__BlockConfiguration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getItemAssignment_3()); }
(rule__BlockConfiguration__ItemAssignment_3)*
{ after(grammarAccess.getBlockConfigurationAccess().getItemAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__4__Impl
	rule__BlockConfiguration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getEndKeyword_4()); }

	End 

{ after(grammarAccess.getBlockConfigurationAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__5__Impl
	rule__BlockConfiguration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getForKeyword_5()); }

	For 

{ after(grammarAccess.getBlockConfigurationAccess().getForKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getBlockConfigurationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__BlockConfiguration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group_2__0__Impl
	rule__BlockConfiguration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getUseKeyword_2_0()); }

	Use 

{ after(grammarAccess.getBlockConfigurationAccess().getUseKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group_2__1__Impl
	rule__BlockConfiguration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getUseAssignment_2_1()); }
(rule__BlockConfiguration__UseAssignment_2_1)
{ after(grammarAccess.getBlockConfigurationAccess().getUseAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group_2__2__Impl
	rule__BlockConfiguration__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getGroup_2_2()); }
(rule__BlockConfiguration__Group_2_2__0)*
{ after(grammarAccess.getBlockConfigurationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getSemicolonKeyword_2_3()); }

	Semicolon 

{ after(grammarAccess.getBlockConfigurationAccess().getSemicolonKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BlockConfiguration__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group_2_2__0__Impl
	rule__BlockConfiguration__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getCommaKeyword_2_2_0()); }

	Comma 

{ after(grammarAccess.getBlockConfigurationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockConfiguration__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockConfiguration__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getUseAssignment_2_2_1()); }
(rule__BlockConfiguration__UseAssignment_2_2_1)
{ after(grammarAccess.getBlockConfigurationAccess().getUseAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__0__Impl
	rule__BlockStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLabelAssignment_0()); }
(rule__BlockStatement__LabelAssignment_0)
{ after(grammarAccess.getBlockStatementAccess().getLabelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__1__Impl
	rule__BlockStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getBlockStatementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__2__Impl
	rule__BlockStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBlockKeyword_2()); }

	Block 

{ after(grammarAccess.getBlockStatementAccess().getBlockKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__3__Impl
	rule__BlockStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup_3()); }
(rule__BlockStatement__Group_3__0)?
{ after(grammarAccess.getBlockStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__4__Impl
	rule__BlockStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getIsKeyword_4()); }
(
	Is 
)?
{ after(grammarAccess.getBlockStatementAccess().getIsKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__5__Impl
	rule__BlockStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup_5()); }
(rule__BlockStatement__Group_5__0)?
{ after(grammarAccess.getBlockStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__6__Impl
	rule__BlockStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup_6()); }
(rule__BlockStatement__Group_6__0)?
{ after(grammarAccess.getBlockStatementAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__7__Impl
	rule__BlockStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getDeclarationAssignment_7()); }
(rule__BlockStatement__DeclarationAssignment_7)*
{ after(grammarAccess.getBlockStatementAccess().getDeclarationAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__8__Impl
	rule__BlockStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBeginKeyword_8()); }

	Begin 

{ after(grammarAccess.getBlockStatementAccess().getBeginKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__9__Impl
	rule__BlockStatement__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getStatementAssignment_9()); }
(rule__BlockStatement__StatementAssignment_9)*
{ after(grammarAccess.getBlockStatementAccess().getStatementAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__10__Impl
	rule__BlockStatement__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getEndKeyword_10()); }

	End 

{ after(grammarAccess.getBlockStatementAccess().getEndKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__11__Impl
	rule__BlockStatement__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBlockKeyword_11()); }

	Block 

{ after(grammarAccess.getBlockStatementAccess().getBlockKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__12__Impl
	rule__BlockStatement__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getIdentifierParserRuleCall_12()); }
(	ruleIdentifier)?
{ after(grammarAccess.getBlockStatementAccess().getIdentifierParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getSemicolonKeyword_13()); }

	Semicolon 

{ after(grammarAccess.getBlockStatementAccess().getSemicolonKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}






























rule__BlockStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_3__0__Impl
	rule__BlockStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLeftParenthesisKeyword_3_0()); }

	LeftParenthesis 

{ after(grammarAccess.getBlockStatementAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_3__1__Impl
	rule__BlockStatement__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGuardAssignment_3_1()); }
(rule__BlockStatement__GuardAssignment_3_1)
{ after(grammarAccess.getBlockStatementAccess().getGuardAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getRightParenthesisKeyword_3_2()); }

	RightParenthesis 

{ after(grammarAccess.getBlockStatementAccess().getRightParenthesisKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BlockStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_5__0__Impl
	rule__BlockStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGenericAssignment_5_0()); }
(rule__BlockStatement__GenericAssignment_5_0)
{ after(grammarAccess.getBlockStatementAccess().getGenericAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup_5_1()); }
(rule__BlockStatement__Group_5_1__0)?
{ after(grammarAccess.getBlockStatementAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockStatement__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_5_1__0__Impl
	rule__BlockStatement__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGenericMapAssignment_5_1_0()); }
(rule__BlockStatement__GenericMapAssignment_5_1_0)
{ after(grammarAccess.getBlockStatementAccess().getGenericMapAssignment_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getSemicolonKeyword_5_1_1()); }

	Semicolon 

{ after(grammarAccess.getBlockStatementAccess().getSemicolonKeyword_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockStatement__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_6__0__Impl
	rule__BlockStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getPortAssignment_6_0()); }
(rule__BlockStatement__PortAssignment_6_0)
{ after(grammarAccess.getBlockStatementAccess().getPortAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup_6_1()); }
(rule__BlockStatement__Group_6_1__0)?
{ after(grammarAccess.getBlockStatementAccess().getGroup_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockStatement__Group_6_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_6_1__0__Impl
	rule__BlockStatement__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_6_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getPortMapAssignment_6_1_0()); }
(rule__BlockStatement__PortMapAssignment_6_1_0)
{ after(grammarAccess.getBlockStatementAccess().getPortMapAssignment_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group_6_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group_6_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getSemicolonKeyword_6_1_1()); }

	Semicolon 

{ after(grammarAccess.getBlockStatementAccess().getSemicolonKeyword_6_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BreakStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__0__Impl
	rule__BreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
(

)
{ after(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__1__Impl
	rule__BreakStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup_1()); }
(rule__BreakStatement__Group_1__0)?
{ after(grammarAccess.getBreakStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__2__Impl
	rule__BreakStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakKeyword_2()); }

	Break 

{ after(grammarAccess.getBreakStatementAccess().getBreakKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__3__Impl
	rule__BreakStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup_3()); }
(rule__BreakStatement__Group_3__0)?
{ after(grammarAccess.getBreakStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__4__Impl
	rule__BreakStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup_4()); }
(rule__BreakStatement__Group_4__0)?
{ after(grammarAccess.getBreakStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BreakStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_1__0__Impl
	rule__BreakStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getLabelAssignment_1_0()); }
(rule__BreakStatement__LabelAssignment_1_0)
{ after(grammarAccess.getBreakStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getBreakStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BreakStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_3__0__Impl
	rule__BreakStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakAssignment_3_0()); }
(rule__BreakStatement__BreakAssignment_3_0)
{ after(grammarAccess.getBreakStatementAccess().getBreakAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup_3_1()); }
(rule__BreakStatement__Group_3_1__0)*
{ after(grammarAccess.getBreakStatementAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BreakStatement__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_3_1__0__Impl
	rule__BreakStatement__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getBreakStatementAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakAssignment_3_1_1()); }
(rule__BreakStatement__BreakAssignment_3_1_1)
{ after(grammarAccess.getBreakStatementAccess().getBreakAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BreakStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_4__0__Impl
	rule__BreakStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getWhenKeyword_4_0()); }

	When 

{ after(grammarAccess.getBreakStatementAccess().getWhenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getWhenAssignment_4_1()); }
(rule__BreakStatement__WhenAssignment_4_1)
{ after(grammarAccess.getBreakStatementAccess().getWhenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentBreakStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__0__Impl
	rule__ConcurrentBreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getBreakStatementAction_0()); }
(

)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getBreakStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__1__Impl
	rule__ConcurrentBreakStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getGroup_1()); }
(rule__ConcurrentBreakStatement__Group_1__0)?
{ after(grammarAccess.getConcurrentBreakStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__2__Impl
	rule__ConcurrentBreakStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getBreakKeyword_2()); }

	Break 

{ after(grammarAccess.getConcurrentBreakStatementAccess().getBreakKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__3__Impl
	rule__ConcurrentBreakStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getGroup_3()); }
(rule__ConcurrentBreakStatement__Group_3__0)?
{ after(grammarAccess.getConcurrentBreakStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__4__Impl
	rule__ConcurrentBreakStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getGroup_4()); }
(rule__ConcurrentBreakStatement__Group_4__0)?
{ after(grammarAccess.getConcurrentBreakStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__5__Impl
	rule__ConcurrentBreakStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getGroup_5()); }
(rule__ConcurrentBreakStatement__Group_5__0)?
{ after(grammarAccess.getConcurrentBreakStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getConcurrentBreakStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ConcurrentBreakStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_1__0__Impl
	rule__ConcurrentBreakStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getLabelAssignment_1_0()); }
(rule__ConcurrentBreakStatement__LabelAssignment_1_0)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getConcurrentBreakStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentBreakStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_3__0__Impl
	rule__ConcurrentBreakStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getBreakAssignment_3_0()); }
(rule__ConcurrentBreakStatement__BreakAssignment_3_0)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getBreakAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getGroup_3_1()); }
(rule__ConcurrentBreakStatement__Group_3_1__0)*
{ after(grammarAccess.getConcurrentBreakStatementAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentBreakStatement__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_3_1__0__Impl
	rule__ConcurrentBreakStatement__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getCommaKeyword_3_1_0()); }

	Comma 

{ after(grammarAccess.getConcurrentBreakStatementAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getBreakAssignment_3_1_1()); }
(rule__ConcurrentBreakStatement__BreakAssignment_3_1_1)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getBreakAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentBreakStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_4__0__Impl
	rule__ConcurrentBreakStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getOnKeyword_4_0()); }

	On 

{ after(grammarAccess.getConcurrentBreakStatementAccess().getOnKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getSensitivityAssignment_4_1()); }
(rule__ConcurrentBreakStatement__SensitivityAssignment_4_1)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getSensitivityAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentBreakStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_5__0__Impl
	rule__ConcurrentBreakStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getWhenKeyword_5_0()); }

	When 

{ after(grammarAccess.getConcurrentBreakStatementAccess().getWhenKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentBreakStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentBreakStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getWhenAssignment_5_1()); }
(rule__ConcurrentBreakStatement__WhenAssignment_5_1)
{ after(grammarAccess.getConcurrentBreakStatementAccess().getWhenAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BreakStatementItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group__0__Impl
	rule__BreakStatementItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getGroup_0()); }
(rule__BreakStatementItem__Group_0__0)?
{ after(grammarAccess.getBreakStatementItemAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatementItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group__1__Impl
	rule__BreakStatementItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getUseAssignment_1()); }
(rule__BreakStatementItem__UseAssignment_1)
{ after(grammarAccess.getBreakStatementItemAccess().getUseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatementItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group__2__Impl
	rule__BreakStatementItem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getEqualsSignGreaterThanSignKeyword_2()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getBreakStatementItemAccess().getEqualsSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatementItem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getArrowAssignment_3()); }
(rule__BreakStatementItem__ArrowAssignment_3)
{ after(grammarAccess.getBreakStatementItemAccess().getArrowAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BreakStatementItem__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group_0__0__Impl
	rule__BreakStatementItem__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getForKeyword_0_0()); }

	For 

{ after(grammarAccess.getBreakStatementItemAccess().getForKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatementItem__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group_0__1__Impl
	rule__BreakStatementItem__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getNameAssignment_0_1()); }
(rule__BreakStatementItem__NameAssignment_0_1)
{ after(grammarAccess.getBreakStatementItemAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatementItem__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatementItem__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getUseKeyword_0_2()); }

	Use 

{ after(grammarAccess.getBreakStatementItemAccess().getUseKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CaseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__0__Impl
	rule__CaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getGroup_0()); }
(rule__CaseStatement__Group_0__0)?
{ after(grammarAccess.getCaseStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__1__Impl
	rule__CaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getCaseKeyword_1()); }

	Case 

{ after(grammarAccess.getCaseStatementAccess().getCaseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__2__Impl
	rule__CaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getCaseAssignment_2()); }
(rule__CaseStatement__CaseAssignment_2)
{ after(grammarAccess.getCaseStatementAccess().getCaseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__3__Impl
	rule__CaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getIsKeyword_3()); }

	Is 

{ after(grammarAccess.getCaseStatementAccess().getIsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__4__Impl
	rule__CaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getCaseStatementAccess().getWhenAssignment_4()); }
(rule__CaseStatement__WhenAssignment_4)
{ after(grammarAccess.getCaseStatementAccess().getWhenAssignment_4()); }
)
(
{ before(grammarAccess.getCaseStatementAccess().getWhenAssignment_4()); }
(rule__CaseStatement__WhenAssignment_4)*
{ after(grammarAccess.getCaseStatementAccess().getWhenAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__5__Impl
	rule__CaseStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getCaseStatementAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__6__Impl
	rule__CaseStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getCaseKeyword_6()); }

	Case 

{ after(grammarAccess.getCaseStatementAccess().getCaseKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__7__Impl
	rule__CaseStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getIdentifierParserRuleCall_7()); }
(	ruleIdentifier)?
{ after(grammarAccess.getCaseStatementAccess().getIdentifierParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__CaseStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group_0__0__Impl
	rule__CaseStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getLabelAssignment_0_0()); }
(rule__CaseStatement__LabelAssignment_0_0)
{ after(grammarAccess.getCaseStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getCaseStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CaseAlternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseAlternative__Group__0__Impl
	rule__CaseAlternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAlternativeAccess().getWhenKeyword_0()); }

	When 

{ after(grammarAccess.getCaseAlternativeAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseAlternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseAlternative__Group__1__Impl
	rule__CaseAlternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAlternativeAccess().getChoiceAssignment_1()); }
(rule__CaseAlternative__ChoiceAssignment_1)
{ after(grammarAccess.getCaseAlternativeAccess().getChoiceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseAlternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseAlternative__Group__2__Impl
	rule__CaseAlternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseAlternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseAlternative__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAlternativeAccess().getStatementAssignment_3()); }
(rule__CaseAlternative__StatementAssignment_3)*
{ after(grammarAccess.getCaseAlternativeAccess().getStatementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__All__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__All__Group__0__Impl
	rule__All__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__All__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllAccess().getAllExpressionAction_0()); }
(

)
{ after(grammarAccess.getAllAccess().getAllExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__All__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__All__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__All__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllAccess().getAllKeyword_1()); }

	All 

{ after(grammarAccess.getAllAccess().getAllKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Others__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Others__Group__0__Impl
	rule__Others__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Others__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOthersAccess().getOthersExpressionAction_0()); }
(

)
{ after(grammarAccess.getOthersAccess().getOthersExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Others__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Others__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Others__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOthersAccess().getOthersKeyword_1()); }

	Others 

{ after(grammarAccess.getOthersAccess().getOthersKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unaffected__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unaffected__Group__0__Impl
	rule__Unaffected__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unaffected__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaffectedAccess().getUnaffectedExpressionAction_0()); }
(

)
{ after(grammarAccess.getUnaffectedAccess().getUnaffectedExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unaffected__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unaffected__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unaffected__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaffectedAccess().getUnaffectedKeyword_1()); }

	Unaffected 

{ after(grammarAccess.getUnaffectedAccess().getUnaffectedKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentConfiguration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__0__Impl
	rule__ComponentConfiguration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getForKeyword_0()); }

	For 

{ after(grammarAccess.getComponentConfigurationAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__1__Impl
	rule__ComponentConfiguration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getListAssignment_1()); }
(rule__ComponentConfiguration__ListAssignment_1)
{ after(grammarAccess.getComponentConfigurationAccess().getListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__2__Impl
	rule__ComponentConfiguration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getComponentConfigurationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__3__Impl
	rule__ComponentConfiguration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getComponentAssignment_3()); }
(rule__ComponentConfiguration__ComponentAssignment_3)
{ after(grammarAccess.getComponentConfigurationAccess().getComponentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__4__Impl
	rule__ComponentConfiguration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getGroup_4()); }
(rule__ComponentConfiguration__Group_4__0)?
{ after(grammarAccess.getComponentConfigurationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__5__Impl
	rule__ComponentConfiguration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getBlockAssignment_5()); }
(rule__ComponentConfiguration__BlockAssignment_5)?
{ after(grammarAccess.getComponentConfigurationAccess().getBlockAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__6__Impl
	rule__ComponentConfiguration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getEndKeyword_6()); }

	End 

{ after(grammarAccess.getComponentConfigurationAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__7__Impl
	rule__ComponentConfiguration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getForKeyword_7()); }

	For 

{ after(grammarAccess.getComponentConfigurationAccess().getForKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getComponentConfigurationAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ComponentConfiguration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4__0__Impl
	rule__ComponentConfiguration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getGroup_4_0()); }
(rule__ComponentConfiguration__Group_4_0__0)?
{ after(grammarAccess.getComponentConfigurationAccess().getGroup_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4__1__Impl
	rule__ComponentConfiguration__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getGenericMapAssignment_4_1()); }
(rule__ComponentConfiguration__GenericMapAssignment_4_1)?
{ after(grammarAccess.getComponentConfigurationAccess().getGenericMapAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4__2__Impl
	rule__ComponentConfiguration__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getPortMapAssignment_4_2()); }
(rule__ComponentConfiguration__PortMapAssignment_4_2)?
{ after(grammarAccess.getComponentConfigurationAccess().getPortMapAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getSemicolonKeyword_4_3()); }

	Semicolon 

{ after(grammarAccess.getComponentConfigurationAccess().getSemicolonKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComponentConfiguration__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4_0__0__Impl
	rule__ComponentConfiguration__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getUseKeyword_4_0_0()); }

	Use 

{ after(grammarAccess.getComponentConfigurationAccess().getUseKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getAlternatives_4_0_1()); }
(rule__ComponentConfiguration__Alternatives_4_0_1)
{ after(grammarAccess.getComponentConfigurationAccess().getAlternatives_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentConfiguration__Group_4_0_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4_0_1_0__0__Impl
	rule__ComponentConfiguration__Group_4_0_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4_0_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getEntityKeyword_4_0_1_0_0()); }

	Entity 

{ after(grammarAccess.getComponentConfigurationAccess().getEntityKeyword_4_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group_4_0_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4_0_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4_0_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getEntityAssignment_4_0_1_0_1()); }
(rule__ComponentConfiguration__EntityAssignment_4_0_1_0_1)
{ after(grammarAccess.getComponentConfigurationAccess().getEntityAssignment_4_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentConfiguration__Group_4_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4_0_1_1__0__Impl
	rule__ComponentConfiguration__Group_4_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4_0_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getConfigurationKeyword_4_0_1_1_0()); }

	Configuration 

{ after(grammarAccess.getComponentConfigurationAccess().getConfigurationKeyword_4_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentConfiguration__Group_4_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentConfiguration__Group_4_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__Group_4_0_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getConfigurationAssignment_4_0_1_1_1()); }
(rule__ComponentConfiguration__ConfigurationAssignment_4_0_1_1_1)
{ after(grammarAccess.getComponentConfigurationAccess().getConfigurationAssignment_4_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Component__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__0__Impl
	rule__Component__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getComponentKeyword_0()); }

	Component 

{ after(grammarAccess.getComponentAccess().getComponentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__1__Impl
	rule__Component__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getNameAssignment_1()); }
(rule__Component__NameAssignment_1)
{ after(grammarAccess.getComponentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__2__Impl
	rule__Component__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getIsKeyword_2()); }
(
	Is 
)?
{ after(grammarAccess.getComponentAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__3__Impl
	rule__Component__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getGenericAssignment_3()); }
(rule__Component__GenericAssignment_3)?
{ after(grammarAccess.getComponentAccess().getGenericAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__4__Impl
	rule__Component__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getPortAssignment_4()); }
(rule__Component__PortAssignment_4)?
{ after(grammarAccess.getComponentAccess().getPortAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__5__Impl
	rule__Component__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getComponentAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__6__Impl
	rule__Component__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getComponentKeyword_6()); }

	Component 

{ after(grammarAccess.getComponentAccess().getComponentKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__7__Impl
	rule__Component__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getIdentifierParserRuleCall_7()); }
(	ruleIdentifier)?
{ after(grammarAccess.getComponentAccess().getIdentifierParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Component__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Component__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getComponentAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ComponentInstantiationStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__0__Impl
	rule__ComponentInstantiationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getLabelAssignment_0()); }
(rule__ComponentInstantiationStatement__LabelAssignment_0)
{ after(grammarAccess.getComponentInstantiationStatementAccess().getLabelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiationStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__1__Impl
	rule__ComponentInstantiationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getComponentInstantiationStatementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiationStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__2__Impl
	rule__ComponentInstantiationStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getComponentKeyword_2()); }
(
	Component 
)?
{ after(grammarAccess.getComponentInstantiationStatementAccess().getComponentKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiationStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__3__Impl
	rule__ComponentInstantiationStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getNameAssignment_3()); }
(rule__ComponentInstantiationStatement__NameAssignment_3)
{ after(grammarAccess.getComponentInstantiationStatementAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiationStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__4__Impl
	rule__ComponentInstantiationStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getGenericMapAssignment_4()); }
(rule__ComponentInstantiationStatement__GenericMapAssignment_4)?
{ after(grammarAccess.getComponentInstantiationStatementAccess().getGenericMapAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiationStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__5__Impl
	rule__ComponentInstantiationStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getPortMapAssignment_5()); }
(rule__ComponentInstantiationStatement__PortMapAssignment_5)?
{ after(grammarAccess.getComponentInstantiationStatementAccess().getPortMapAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiationStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiationStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getComponentInstantiationStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__EntityInstantiationStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__0__Impl
	rule__EntityInstantiationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getLabelAssignment_0()); }
(rule__EntityInstantiationStatement__LabelAssignment_0)
{ after(grammarAccess.getEntityInstantiationStatementAccess().getLabelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityInstantiationStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__1__Impl
	rule__EntityInstantiationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getEntityInstantiationStatementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityInstantiationStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__2__Impl
	rule__EntityInstantiationStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getEntityKeyword_2()); }

	Entity 

{ after(grammarAccess.getEntityInstantiationStatementAccess().getEntityKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityInstantiationStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__3__Impl
	rule__EntityInstantiationStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getNameAssignment_3()); }
(rule__EntityInstantiationStatement__NameAssignment_3)
{ after(grammarAccess.getEntityInstantiationStatementAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityInstantiationStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__4__Impl
	rule__EntityInstantiationStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getGenericMapAssignment_4()); }
(rule__EntityInstantiationStatement__GenericMapAssignment_4)?
{ after(grammarAccess.getEntityInstantiationStatementAccess().getGenericMapAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityInstantiationStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__5__Impl
	rule__EntityInstantiationStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getPortMapAssignment_5()); }
(rule__EntityInstantiationStatement__PortMapAssignment_5)?
{ after(grammarAccess.getEntityInstantiationStatementAccess().getPortMapAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EntityInstantiationStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EntityInstantiationStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getEntityInstantiationStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ConfigurationInstantiationStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__0__Impl
	rule__ConfigurationInstantiationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getLabelAssignment_0()); }
(rule__ConfigurationInstantiationStatement__LabelAssignment_0)
{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getLabelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationInstantiationStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__1__Impl
	rule__ConfigurationInstantiationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationInstantiationStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__2__Impl
	rule__ConfigurationInstantiationStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getConfigurationKeyword_2()); }

	Configuration 

{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getConfigurationKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationInstantiationStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__3__Impl
	rule__ConfigurationInstantiationStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getNameAssignment_3()); }
(rule__ConfigurationInstantiationStatement__NameAssignment_3)
{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationInstantiationStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__4__Impl
	rule__ConfigurationInstantiationStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getGenericMapAssignment_4()); }
(rule__ConfigurationInstantiationStatement__GenericMapAssignment_4)?
{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getGenericMapAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationInstantiationStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__5__Impl
	rule__ConfigurationInstantiationStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getPortMapAssignment_5()); }
(rule__ConfigurationInstantiationStatement__PortMapAssignment_5)?
{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getPortMapAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationInstantiationStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationInstantiationStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SelectedSignalAssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__0__Impl
	rule__SelectedSignalAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGroup_0()); }
(rule__SelectedSignalAssignmentStatement__Group_0__0)?
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__1__Impl
	rule__SelectedSignalAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedAssignment_1()); }
(rule__SelectedSignalAssignmentStatement__PostponedAssignment_1)?
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__2__Impl
	rule__SelectedSignalAssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWithKeyword_2()); }

	With 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__3__Impl
	rule__SelectedSignalAssignmentStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectedAssignment_3()); }
(rule__SelectedSignalAssignmentStatement__SelectedAssignment_3)
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectedAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__4__Impl
	rule__SelectedSignalAssignmentStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectKeyword_4()); }

	Select 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__5__Impl
	rule__SelectedSignalAssignmentStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getTargetAssignment_5()); }
(rule__SelectedSignalAssignmentStatement__TargetAssignment_5)
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getTargetAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__6__Impl
	rule__SelectedSignalAssignmentStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_6()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__7__Impl
	rule__SelectedSignalAssignmentStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedAssignment_7()); }
(rule__SelectedSignalAssignmentStatement__GuardedAssignment_7)?
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__8__Impl
	rule__SelectedSignalAssignmentStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getDelayAssignment_8()); }
(rule__SelectedSignalAssignmentStatement__DelayAssignment_8)?
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getDelayAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__9__Impl
	rule__SelectedSignalAssignmentStatement__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformAssignment_9()); }
(rule__SelectedSignalAssignmentStatement__WaveformAssignment_9)
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__10__Impl
	rule__SelectedSignalAssignmentStatement__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGroup_10()); }
(rule__SelectedSignalAssignmentStatement__Group_10__0)*
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGroup_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSemicolonKeyword_11()); }

	Semicolon 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSemicolonKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


























rule__SelectedSignalAssignmentStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group_0__0__Impl
	rule__SelectedSignalAssignmentStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLabelAssignment_0_0()); }
(rule__SelectedSignalAssignmentStatement__LabelAssignment_0_0)
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectedSignalAssignmentStatement__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group_10__0__Impl
	rule__SelectedSignalAssignmentStatement__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getCommaKeyword_10_0()); }

	Comma 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getCommaKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedSignalAssignmentStatement__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedSignalAssignmentStatement__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformAssignment_10_1()); }
(rule__SelectedSignalAssignmentStatement__WaveformAssignment_10_1)
{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformAssignment_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalSignalAssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__0__Impl
	rule__ConditionalSignalAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGroup_0()); }
(rule__ConditionalSignalAssignmentStatement__Group_0__0)?
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__1__Impl
	rule__ConditionalSignalAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedAssignment_1()); }
(rule__ConditionalSignalAssignmentStatement__PostponedAssignment_1)?
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__2__Impl
	rule__ConditionalSignalAssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getTargetAssignment_2()); }
(rule__ConditionalSignalAssignmentStatement__TargetAssignment_2)
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getTargetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__3__Impl
	rule__ConditionalSignalAssignmentStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_3()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__4__Impl
	rule__ConditionalSignalAssignmentStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedAssignment_4()); }
(rule__ConditionalSignalAssignmentStatement__GuardedAssignment_4)?
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__5__Impl
	rule__ConditionalSignalAssignmentStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getDelayAssignment_5()); }
(rule__ConditionalSignalAssignmentStatement__DelayAssignment_5)?
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getDelayAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__6__Impl
	rule__ConditionalSignalAssignmentStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformAssignment_6()); }
(rule__ConditionalSignalAssignmentStatement__WaveformAssignment_6)
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__7__Impl
	rule__ConditionalSignalAssignmentStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGroup_7()); }
(rule__ConditionalSignalAssignmentStatement__Group_7__0)*
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ConditionalSignalAssignmentStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group_0__0__Impl
	rule__ConditionalSignalAssignmentStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLabelAssignment_0_0()); }
(rule__ConditionalSignalAssignmentStatement__LabelAssignment_0_0)
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalSignalAssignmentStatement__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group_7__0__Impl
	rule__ConditionalSignalAssignmentStatement__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getElseKeyword_7_0()); }
(
	Else 
)
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getElseKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalSignalAssignmentStatement__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalSignalAssignmentStatement__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformAssignment_7_1()); }
(rule__ConditionalSignalAssignmentStatement__WaveformAssignment_7_1)
{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequentialSignalAssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__0__Impl
	rule__SequentialSignalAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGroup_0()); }
(rule__SequentialSignalAssignmentStatement__Group_0__0)?
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__1__Impl
	rule__SequentialSignalAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedAssignment_1()); }
(rule__SequentialSignalAssignmentStatement__PostponedAssignment_1)?
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__2__Impl
	rule__SequentialSignalAssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getTargetAssignment_2()); }
(rule__SequentialSignalAssignmentStatement__TargetAssignment_2)
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getTargetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__3__Impl
	rule__SequentialSignalAssignmentStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_3()); }

	LessThanSignEqualsSign 

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__4__Impl
	rule__SequentialSignalAssignmentStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedAssignment_4()); }
(rule__SequentialSignalAssignmentStatement__GuardedAssignment_4)?
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__5__Impl
	rule__SequentialSignalAssignmentStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getDelayAssignment_5()); }
(rule__SequentialSignalAssignmentStatement__DelayAssignment_5)?
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getDelayAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__6__Impl
	rule__SequentialSignalAssignmentStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getWaveformAssignment_6()); }
(rule__SequentialSignalAssignmentStatement__WaveformAssignment_6)
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getWaveformAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getSemicolonKeyword_7()); }

	Semicolon 

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__SequentialSignalAssignmentStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group_0__0__Impl
	rule__SequentialSignalAssignmentStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLabelAssignment_0_0()); }
(rule__SequentialSignalAssignmentStatement__LabelAssignment_0_0)
{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequentialSignalAssignmentStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequentialSignalAssignmentStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableAssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group__0__Impl
	rule__VariableAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getGroup_0()); }
(rule__VariableAssignmentStatement__Group_0__0)
{ after(grammarAccess.getVariableAssignmentStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group__1__Impl
	rule__VariableAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getInitialAssignment_1()); }
(rule__VariableAssignmentStatement__InitialAssignment_1)
{ after(grammarAccess.getVariableAssignmentStatementAccess().getInitialAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getVariableAssignmentStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableAssignmentStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getGroup_0_0()); }
(rule__VariableAssignmentStatement__Group_0_0__0)
{ after(grammarAccess.getVariableAssignmentStatementAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__VariableAssignmentStatement__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group_0_0__0__Impl
	rule__VariableAssignmentStatement__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getGroup_0_0_0()); }
(rule__VariableAssignmentStatement__Group_0_0_0__0)?
{ after(grammarAccess.getVariableAssignmentStatementAccess().getGroup_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignmentStatement__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group_0_0__1__Impl
	rule__VariableAssignmentStatement__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getTargetAssignment_0_0_1()); }
(rule__VariableAssignmentStatement__TargetAssignment_0_0_1)
{ after(grammarAccess.getVariableAssignmentStatementAccess().getTargetAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignmentStatement__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getColonEqualsSignKeyword_0_0_2()); }

	ColonEqualsSign 

{ after(grammarAccess.getVariableAssignmentStatementAccess().getColonEqualsSignKeyword_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableAssignmentStatement__Group_0_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group_0_0_0__0__Impl
	rule__VariableAssignmentStatement__Group_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group_0_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getLabelAssignment_0_0_0_0()); }
(rule__VariableAssignmentStatement__LabelAssignment_0_0_0_0)
{ after(grammarAccess.getVariableAssignmentStatementAccess().getLabelAssignment_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableAssignmentStatement__Group_0_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableAssignmentStatement__Group_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__Group_0_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getColonKeyword_0_0_0_1()); }

	Colon 

{ after(grammarAccess.getVariableAssignmentStatementAccess().getColonKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleSimultaneousStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group__0__Impl
	rule__SimpleSimultaneousStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_0()); }
(rule__SimpleSimultaneousStatement__Group_0__0)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group__1__Impl
	rule__SimpleSimultaneousStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getRightAssignment_1()); }
(rule__SimpleSimultaneousStatement__RightAssignment_1)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getRightAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group__2__Impl
	rule__SimpleSimultaneousStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_2()); }
(rule__SimpleSimultaneousStatement__Group_2__0)?
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimpleSimultaneousStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_0_0()); }
(rule__SimpleSimultaneousStatement__Group_0_0__0)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SimpleSimultaneousStatement__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_0_0__0__Impl
	rule__SimpleSimultaneousStatement__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_0_0_0()); }
(rule__SimpleSimultaneousStatement__Group_0_0_0__0)?
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getGroup_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_0_0__1__Impl
	rule__SimpleSimultaneousStatement__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getLeftAssignment_0_0_1()); }
(rule__SimpleSimultaneousStatement__LeftAssignment_0_0_1)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getLeftAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getEqualsSignEqualsSignKeyword_0_0_2()); }

	EqualsSignEqualsSign 

{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getEqualsSignEqualsSignKeyword_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleSimultaneousStatement__Group_0_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_0_0_0__0__Impl
	rule__SimpleSimultaneousStatement__Group_0_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_0_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getLabelAssignment_0_0_0_0()); }
(rule__SimpleSimultaneousStatement__LabelAssignment_0_0_0_0)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getLabelAssignment_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group_0_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_0_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_0_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getColonKeyword_0_0_0_1()); }

	Colon 

{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getColonKeyword_0_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleSimultaneousStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_2__0__Impl
	rule__SimpleSimultaneousStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceKeyword_2_0()); }

	Tolerance 

{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleSimultaneousStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleSimultaneousStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceAssignment_2_1()); }
(rule__SimpleSimultaneousStatement__ToleranceAssignment_2_1)
{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalWaveform__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalWaveform__Group__0__Impl
	rule__ConditionalWaveform__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalWaveform__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalWaveformAccess().getWaveformsParserRuleCall_0()); }
	ruleWaveforms
{ after(grammarAccess.getConditionalWaveformAccess().getWaveformsParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalWaveform__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalWaveform__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalWaveform__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalWaveformAccess().getGroup_1()); }
(rule__ConditionalWaveform__Group_1__0)?
{ after(grammarAccess.getConditionalWaveformAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalWaveform__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalWaveform__Group_1__0__Impl
	rule__ConditionalWaveform__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalWaveform__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalWaveformAccess().getConditionalWaveformExpressionExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getConditionalWaveformAccess().getConditionalWaveformExpressionExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalWaveform__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalWaveform__Group_1__1__Impl
	rule__ConditionalWaveform__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalWaveform__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalWaveformAccess().getWhenKeyword_1_1()); }

	When 

{ after(grammarAccess.getConditionalWaveformAccess().getWhenKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalWaveform__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalWaveform__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalWaveform__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalWaveformAccess().getChoiceAssignment_1_2()); }
(rule__ConditionalWaveform__ChoiceAssignment_1_2)
{ after(grammarAccess.getConditionalWaveformAccess().getChoiceAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Waveforms__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveforms__Group_1__0__Impl
	rule__Waveforms__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getWaveformParserRuleCall_1_0()); }
	ruleWaveform
{ after(grammarAccess.getWaveformsAccess().getWaveformParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waveforms__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveforms__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getGroup_1_1()); }
(rule__Waveforms__Group_1_1__0)?
{ after(grammarAccess.getWaveformsAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Waveforms__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveforms__Group_1_1__0__Impl
	rule__Waveforms__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getMultiExpressionExpressionAction_1_1_0()); }
(

)
{ after(grammarAccess.getWaveformsAccess().getMultiExpressionExpressionAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waveforms__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveforms__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWaveformsAccess().getGroup_1_1_1()); }
(rule__Waveforms__Group_1_1_1__0)
{ after(grammarAccess.getWaveformsAccess().getGroup_1_1_1()); }
)
(
{ before(grammarAccess.getWaveformsAccess().getGroup_1_1_1()); }
(rule__Waveforms__Group_1_1_1__0)*
{ after(grammarAccess.getWaveformsAccess().getGroup_1_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Waveforms__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveforms__Group_1_1_1__0__Impl
	rule__Waveforms__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getCommaKeyword_1_1_1_0()); }

	Comma 

{ after(grammarAccess.getWaveformsAccess().getCommaKeyword_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waveforms__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveforms__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getExpressionAssignment_1_1_1_1()); }
(rule__Waveforms__ExpressionAssignment_1_1_1_1)
{ after(grammarAccess.getWaveformsAccess().getExpressionAssignment_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConfigurationSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__0__Impl
	rule__ConfigurationSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getForKeyword_0()); }

	For 

{ after(grammarAccess.getConfigurationSpecificationAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__1__Impl
	rule__ConfigurationSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getListAssignment_1()); }
(rule__ConfigurationSpecification__ListAssignment_1)
{ after(grammarAccess.getConfigurationSpecificationAccess().getListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__2__Impl
	rule__ConfigurationSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getConfigurationSpecificationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__3__Impl
	rule__ConfigurationSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getComponentAssignment_3()); }
(rule__ConfigurationSpecification__ComponentAssignment_3)
{ after(grammarAccess.getConfigurationSpecificationAccess().getComponentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__4__Impl
	rule__ConfigurationSpecification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getGroup_4()); }
(rule__ConfigurationSpecification__Group_4__0)?
{ after(grammarAccess.getConfigurationSpecificationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__5__Impl
	rule__ConfigurationSpecification__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getGenericMapAssignment_5()); }
(rule__ConfigurationSpecification__GenericMapAssignment_5)?
{ after(grammarAccess.getConfigurationSpecificationAccess().getGenericMapAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__6__Impl
	rule__ConfigurationSpecification__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getPortMapAssignment_6()); }
(rule__ConfigurationSpecification__PortMapAssignment_6)?
{ after(grammarAccess.getConfigurationSpecificationAccess().getPortMapAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getSemicolonKeyword_7()); }

	Semicolon 

{ after(grammarAccess.getConfigurationSpecificationAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ConfigurationSpecification__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group_4__0__Impl
	rule__ConfigurationSpecification__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getUseKeyword_4_0()); }

	Use 

{ after(grammarAccess.getConfigurationSpecificationAccess().getUseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getAlternatives_4_1()); }
(rule__ConfigurationSpecification__Alternatives_4_1)
{ after(grammarAccess.getConfigurationSpecificationAccess().getAlternatives_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConfigurationSpecification__Group_4_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group_4_1_0__0__Impl
	rule__ConfigurationSpecification__Group_4_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group_4_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getEntityKeyword_4_1_0_0()); }

	Entity 

{ after(grammarAccess.getConfigurationSpecificationAccess().getEntityKeyword_4_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group_4_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group_4_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group_4_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getEntityAssignment_4_1_0_1()); }
(rule__ConfigurationSpecification__EntityAssignment_4_1_0_1)
{ after(grammarAccess.getConfigurationSpecificationAccess().getEntityAssignment_4_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConfigurationSpecification__Group_4_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group_4_1_1__0__Impl
	rule__ConfigurationSpecification__Group_4_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group_4_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getConfigurationKeyword_4_1_1_0()); }

	Configuration 

{ after(grammarAccess.getConfigurationSpecificationAccess().getConfigurationKeyword_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigurationSpecification__Group_4_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigurationSpecification__Group_4_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__Group_4_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getConfigurationAssignment_4_1_1_1()); }
(rule__ConfigurationSpecification__ConfigurationAssignment_4_1_1_1)
{ after(grammarAccess.getConfigurationSpecificationAccess().getConfigurationAssignment_4_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RejectMechanism__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RejectMechanism__Group__0__Impl
	rule__RejectMechanism__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RejectMechanism__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectMechanismAccess().getRejectMechanismAction_0()); }
(

)
{ after(grammarAccess.getRejectMechanismAccess().getRejectMechanismAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RejectMechanism__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RejectMechanism__Group__1__Impl
	rule__RejectMechanism__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RejectMechanism__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectMechanismAccess().getGroup_1()); }
(rule__RejectMechanism__Group_1__0)?
{ after(grammarAccess.getRejectMechanismAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RejectMechanism__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RejectMechanism__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RejectMechanism__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectMechanismAccess().getInertialKeyword_2()); }

	Inertial 

{ after(grammarAccess.getRejectMechanismAccess().getInertialKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RejectMechanism__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RejectMechanism__Group_1__0__Impl
	rule__RejectMechanism__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RejectMechanism__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectMechanismAccess().getRejectKeyword_1_0()); }

	Reject 

{ after(grammarAccess.getRejectMechanismAccess().getRejectKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RejectMechanism__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RejectMechanism__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RejectMechanism__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectMechanismAccess().getRejectAssignment_1_1()); }
(rule__RejectMechanism__RejectAssignment_1_1)
{ after(grammarAccess.getRejectMechanismAccess().getRejectAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransportMechanism__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransportMechanism__Group__0__Impl
	rule__TransportMechanism__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransportMechanism__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransportMechanismAccess().getTransportMechanismAction_0()); }
(

)
{ after(grammarAccess.getTransportMechanismAccess().getTransportMechanismAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransportMechanism__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransportMechanism__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransportMechanism__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransportMechanismAccess().getTransportKeyword_1()); }

	Transport 

{ after(grammarAccess.getTransportMechanismAccess().getTransportKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DisconnectionSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__0__Impl
	rule__DisconnectionSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectKeyword_0()); }

	Disconnect 

{ after(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DisconnectionSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__1__Impl
	rule__DisconnectionSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectAssignment_1()); }
(rule__DisconnectionSpecification__DisconnectAssignment_1)
{ after(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DisconnectionSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__2__Impl
	rule__DisconnectionSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getDisconnectionSpecificationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DisconnectionSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__3__Impl
	rule__DisconnectionSpecification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getTypeAssignment_3()); }
(rule__DisconnectionSpecification__TypeAssignment_3)
{ after(grammarAccess.getDisconnectionSpecificationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DisconnectionSpecification__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__4__Impl
	rule__DisconnectionSpecification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getAfterKeyword_4()); }

	After 

{ after(grammarAccess.getDisconnectionSpecificationAccess().getAfterKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DisconnectionSpecification__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__5__Impl
	rule__DisconnectionSpecification__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getAfterAssignment_5()); }
(rule__DisconnectionSpecification__AfterAssignment_5)
{ after(grammarAccess.getDisconnectionSpecificationAccess().getAfterAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DisconnectionSpecification__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DisconnectionSpecification__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getDisconnectionSpecificationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__MultiName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiName__Group__0__Impl
	rule__MultiName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiNameAccess().getNameParserRuleCall_0()); }
	ruleName
{ after(grammarAccess.getMultiNameAccess().getNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiNameAccess().getGroup_1()); }
(rule__MultiName__Group_1__0)?
{ after(grammarAccess.getMultiNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiName__Group_1__0__Impl
	rule__MultiName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiNameAccess().getNameListNameAction_1_0()); }
(

)
{ after(grammarAccess.getMultiNameAccess().getNameListNameAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMultiNameAccess().getGroup_1_1()); }
(rule__MultiName__Group_1_1__0)
{ after(grammarAccess.getMultiNameAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getMultiNameAccess().getGroup_1_1()); }
(rule__MultiName__Group_1_1__0)*
{ after(grammarAccess.getMultiNameAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiName__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiName__Group_1_1__0__Impl
	rule__MultiName__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiNameAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getMultiNameAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiName__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiName__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiNameAccess().getNameAssignment_1_1_1()); }
(rule__MultiName__NameAssignment_1_1_1)
{ after(grammarAccess.getMultiNameAccess().getNameAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiIdentifierName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiIdentifierName__Group__0__Impl
	rule__MultiIdentifierName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getIdentifierNameParserRuleCall_0()); }
	ruleIdentifierName
{ after(grammarAccess.getMultiIdentifierNameAccess().getIdentifierNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiIdentifierName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiIdentifierName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getGroup_1()); }
(rule__MultiIdentifierName__Group_1__0)?
{ after(grammarAccess.getMultiIdentifierNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiIdentifierName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiIdentifierName__Group_1__0__Impl
	rule__MultiIdentifierName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getNameListNameAction_1_0()); }
(

)
{ after(grammarAccess.getMultiIdentifierNameAccess().getNameListNameAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiIdentifierName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiIdentifierName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getGroup_1_1()); }
(rule__MultiIdentifierName__Group_1_1__0)
{ after(grammarAccess.getMultiIdentifierNameAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getGroup_1_1()); }
(rule__MultiIdentifierName__Group_1_1__0)*
{ after(grammarAccess.getMultiIdentifierNameAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiIdentifierName__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiIdentifierName__Group_1_1__0__Impl
	rule__MultiIdentifierName__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getMultiIdentifierNameAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiIdentifierName__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiIdentifierName__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getNameAssignment_1_1_1()); }
(rule__MultiIdentifierName__NameAssignment_1_1_1)
{ after(grammarAccess.getMultiIdentifierNameAccess().getNameAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__0__Impl
	rule__EnumerationTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLeftParenthesisKeyword_0()); }

	LeftParenthesis 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__1__Impl
	rule__EnumerationTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralAssignment_1()); }
(rule__EnumerationTypeDefinition__LiteralAssignment_1)
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__2__Impl
	rule__EnumerationTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup_2()); }
(rule__EnumerationTypeDefinition__Group_2__0)*
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumerationTypeDefinition__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group_2__0__Impl
	rule__EnumerationTypeDefinition__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_2_0()); }

	Comma 

{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationTypeDefinition__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationTypeDefinition__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralAssignment_2_1()); }
(rule__EnumerationTypeDefinition__LiteralAssignment_2_1)
{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__0__Impl
	rule__ExitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getExitStatementAction_0()); }
(

)
{ after(grammarAccess.getExitStatementAccess().getExitStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__1__Impl
	rule__ExitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getGroup_1()); }
(rule__ExitStatement__Group_1__0)?
{ after(grammarAccess.getExitStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__2__Impl
	rule__ExitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getExitKeyword_2()); }

	Exit 

{ after(grammarAccess.getExitStatementAccess().getExitKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__3__Impl
	rule__ExitStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getExitAssignment_3()); }
(rule__ExitStatement__ExitAssignment_3)?
{ after(grammarAccess.getExitStatementAccess().getExitAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__4__Impl
	rule__ExitStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getGroup_4()); }
(rule__ExitStatement__Group_4__0)?
{ after(grammarAccess.getExitStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getExitStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ExitStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group_1__0__Impl
	rule__ExitStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getLabelAssignment_1_0()); }
(rule__ExitStatement__LabelAssignment_1_0)
{ after(grammarAccess.getExitStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getExitStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExitStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group_4__0__Impl
	rule__ExitStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getWhenKeyword_4_0()); }

	When 

{ after(grammarAccess.getExitStatementAccess().getWhenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExitStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExitStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getWhenAssignment_4_1()); }
(rule__ExitStatement__WhenAssignment_4_1)
{ after(grammarAccess.getExitStatementAccess().getWhenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRelationParserRuleCall_0()); }
	ruleRelation
{ after(grammarAccess.getExpressionAccess().getRelationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)*
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLogicalExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getLogicalExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1()); }
(rule__Expression__OperatorAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
(rule__Expression__RightAssignment_1_2)
{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Relation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getShiftExpressionParserRuleCall_0()); }
	ruleShiftExpression
{ after(grammarAccess.getRelationAccess().getShiftExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getGroup_1()); }
(rule__Relation__Group_1__0)?
{ after(grammarAccess.getRelationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1__0__Impl
	rule__Relation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRelationalExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getRelationAccess().getRelationalExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1__1__Impl
	rule__Relation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getOperatorAssignment_1_1()); }
(rule__Relation__OperatorAssignment_1_1)
{ after(grammarAccess.getRelationAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRightAssignment_1_2()); }
(rule__Relation__RightAssignment_1_2)
{ after(grammarAccess.getRelationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ShiftExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__0__Impl
	rule__ShiftExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
	ruleSimpleExpression
{ after(grammarAccess.getShiftExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
(rule__ShiftExpression__Group_1__0)?
{ after(grammarAccess.getShiftExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShiftExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__0__Impl
	rule__ShiftExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__1__Impl
	rule__ShiftExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ShiftExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getShiftExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShiftExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShiftExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2()); }
(rule__ShiftExpression__RightAssignment_1_2)
{ after(grammarAccess.getShiftExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_0__0__Impl
	rule__SimpleExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getTermExpressionParserRuleCall_0_0()); }
	ruleTermExpression
{ after(grammarAccess.getSimpleExpressionAccess().getTermExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_0_1()); }
(rule__SimpleExpression__Group_0_1__0)*
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleExpression__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_0_1__0__Impl
	rule__SimpleExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getAddingExpressionLeftAction_0_1_0()); }
(

)
{ after(grammarAccess.getSimpleExpressionAccess().getAddingExpressionLeftAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_0_1__1__Impl
	rule__SimpleExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOperatorAssignment_0_1_1()); }
(rule__SimpleExpression__OperatorAssignment_0_1_1)
{ after(grammarAccess.getSimpleExpressionAccess().getOperatorAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightAssignment_0_1_2()); }
(rule__SimpleExpression__RightAssignment_0_1_2)
{ after(grammarAccess.getSimpleExpressionAccess().getRightAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__0__Impl
	rule__SimpleExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getSignTermExpressionParserRuleCall_1_0()); }
	ruleSignTermExpression
{ after(grammarAccess.getSimpleExpressionAccess().getSignTermExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_1_1()); }
(rule__SimpleExpression__Group_1_1__0)*
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1_1__0__Impl
	rule__SimpleExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getAddingExpressionLeftAction_1_1_0()); }
(

)
{ after(grammarAccess.getSimpleExpressionAccess().getAddingExpressionLeftAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1_1__1__Impl
	rule__SimpleExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOperatorAssignment_1_1_1()); }
(rule__SimpleExpression__OperatorAssignment_1_1_1)
{ after(grammarAccess.getSimpleExpressionAccess().getOperatorAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_1_2()); }
(rule__SimpleExpression__RightAssignment_1_1_2)
{ after(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignTermExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignTermExpression__Group__0__Impl
	rule__SignTermExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getSignFactorParserRuleCall_0()); }
	ruleSignFactor
{ after(grammarAccess.getSignTermExpressionAccess().getSignFactorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignTermExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignTermExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getGroup_1()); }
(rule__SignTermExpression__Group_1__0)*
{ after(grammarAccess.getSignTermExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignTermExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignTermExpression__Group_1__0__Impl
	rule__SignTermExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getMultiplyingExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSignTermExpressionAccess().getMultiplyingExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignTermExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignTermExpression__Group_1__1__Impl
	rule__SignTermExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getOperatorAssignment_1_1()); }
(rule__SignTermExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getSignTermExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignTermExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignTermExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getRightAssignment_1_2()); }
(rule__SignTermExpression__RightAssignment_1_2)
{ after(grammarAccess.getSignTermExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TermExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermExpression__Group__0__Impl
	rule__TermExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getFactorParserRuleCall_0()); }
	ruleFactor
{ after(grammarAccess.getTermExpressionAccess().getFactorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getGroup_1()); }
(rule__TermExpression__Group_1__0)*
{ after(grammarAccess.getTermExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TermExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermExpression__Group_1__0__Impl
	rule__TermExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getMultiplyingExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getTermExpressionAccess().getMultiplyingExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermExpression__Group_1__1__Impl
	rule__TermExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getOperatorAssignment_1_1()); }
(rule__TermExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getTermExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TermExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TermExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getRightAssignment_1_2()); }
(rule__TermExpression__RightAssignment_1_2)
{ after(grammarAccess.getTermExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Factor__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_0__0__Impl
	rule__Factor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0_0()); }
	rulePrimary
{ after(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getGroup_0_1()); }
(rule__Factor__Group_0_1__0)?
{ after(grammarAccess.getFactorAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Factor__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_0_1__0__Impl
	rule__Factor__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getPowerExpressionLeftAction_0_1_0()); }
(

)
{ after(grammarAccess.getFactorAccess().getPowerExpressionLeftAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_0_1__1__Impl
	rule__Factor__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getAsteriskAsteriskKeyword_0_1_1()); }

	AsteriskAsterisk 

{ after(grammarAccess.getFactorAccess().getAsteriskAsteriskKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factor__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightAssignment_0_1_2()); }
(rule__Factor__RightAssignment_0_1_2)
{ after(grammarAccess.getFactorAccess().getRightAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
	rule__UnaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_1()); }
(rule__UnaryExpression__OperatorAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_2()); }
(rule__UnaryExpression__ExpressionAssignment_2)
{ after(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignFactor__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignFactor__Group_0__0__Impl
	rule__SignFactor__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getSignPrimaryParserRuleCall_0_0()); }
	ruleSignPrimary
{ after(grammarAccess.getSignFactorAccess().getSignPrimaryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignFactor__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignFactor__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getGroup_0_1()); }
(rule__SignFactor__Group_0_1__0)?
{ after(grammarAccess.getSignFactorAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignFactor__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignFactor__Group_0_1__0__Impl
	rule__SignFactor__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getPowerExpressionLeftAction_0_1_0()); }
(

)
{ after(grammarAccess.getSignFactorAccess().getPowerExpressionLeftAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignFactor__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignFactor__Group_0_1__1__Impl
	rule__SignFactor__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getAsteriskAsteriskKeyword_0_1_1()); }

	AsteriskAsterisk 

{ after(grammarAccess.getSignFactorAccess().getAsteriskAsteriskKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignFactor__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignFactor__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getRightAssignment_0_1_2()); }
(rule__SignFactor__RightAssignment_0_1_2)
{ after(grammarAccess.getSignFactorAccess().getRightAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignUnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignUnaryExpression__Group__0__Impl
	rule__SignUnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignUnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignUnaryExpressionAccess().getSignExpressionAction_0()); }
(

)
{ after(grammarAccess.getSignUnaryExpressionAccess().getSignExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignUnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignUnaryExpression__Group__1__Impl
	rule__SignUnaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignUnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignUnaryExpressionAccess().getSignAssignment_1()); }
(rule__SignUnaryExpression__SignAssignment_1)
{ after(grammarAccess.getSignUnaryExpressionAccess().getSignAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignUnaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignUnaryExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignUnaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignUnaryExpressionAccess().getExpressionAssignment_2()); }
(rule__SignUnaryExpression__ExpressionAssignment_2)
{ after(grammarAccess.getSignUnaryExpressionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SignPrimary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignPrimary__Group__0__Impl
	rule__SignPrimary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignPrimary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignPrimaryAccess().getSignExpressionAction_0()); }
(

)
{ after(grammarAccess.getSignPrimaryAccess().getSignExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignPrimary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignPrimary__Group__1__Impl
	rule__SignPrimary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignPrimary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignPrimaryAccess().getSignAssignment_1()); }
(rule__SignPrimary__SignAssignment_1)
{ after(grammarAccess.getSignPrimaryAccess().getSignAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignPrimary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignPrimary__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignPrimary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignPrimaryAccess().getExpressionAssignment_2()); }
(rule__SignPrimary__ExpressionAssignment_2)
{ after(grammarAccess.getSignPrimaryAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FileDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group__0__Impl
	rule__FileDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getFileKeyword_0()); }

	File 

{ after(grammarAccess.getFileDeclarationAccess().getFileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group__1__Impl
	rule__FileDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getNameAssignment_1()); }
(rule__FileDeclaration__NameAssignment_1)
{ after(grammarAccess.getFileDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group__2__Impl
	rule__FileDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getFileDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group__3__Impl
	rule__FileDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getTypeAssignment_3()); }
(rule__FileDeclaration__TypeAssignment_3)
{ after(grammarAccess.getFileDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group__4__Impl
	rule__FileDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getGroup_4()); }
(rule__FileDeclaration__Group_4__0)?
{ after(grammarAccess.getFileDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getFileDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FileDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group_4__0__Impl
	rule__FileDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getGroup_4_0()); }
(rule__FileDeclaration__Group_4_0__0)?
{ after(grammarAccess.getFileDeclarationAccess().getGroup_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group_4__1__Impl
	rule__FileDeclaration__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getIsKeyword_4_1()); }

	Is 

{ after(grammarAccess.getFileDeclarationAccess().getIsKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getIsAssignment_4_2()); }
(rule__FileDeclaration__IsAssignment_4_2)
{ after(grammarAccess.getFileDeclarationAccess().getIsAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FileDeclaration__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group_4_0__0__Impl
	rule__FileDeclaration__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getOpenKeyword_4_0_0()); }

	Open 

{ after(grammarAccess.getFileDeclarationAccess().getOpenKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileDeclaration__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileDeclaration__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getOpenAssignment_4_0_1()); }
(rule__FileDeclaration__OpenAssignment_4_0_1)
{ after(grammarAccess.getFileDeclarationAccess().getOpenAssignment_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceFileDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceFileDeclaration__Group__0__Impl
	rule__InterfaceFileDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFileDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getFileKeyword_0()); }

	File 

{ after(grammarAccess.getInterfaceFileDeclarationAccess().getFileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceFileDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceFileDeclaration__Group__1__Impl
	rule__InterfaceFileDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFileDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getNameAssignment_1()); }
(rule__InterfaceFileDeclaration__NameAssignment_1)
{ after(grammarAccess.getInterfaceFileDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceFileDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceFileDeclaration__Group__2__Impl
	rule__InterfaceFileDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFileDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getInterfaceFileDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceFileDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceFileDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFileDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getTypeAssignment_3()); }
(rule__InterfaceFileDeclaration__TypeAssignment_3)
{ after(grammarAccess.getInterfaceFileDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FileTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileTypeDefinition__Group__0__Impl
	rule__FileTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileTypeDefinitionAccess().getFileKeyword_0()); }

	File 

{ after(grammarAccess.getFileTypeDefinitionAccess().getFileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileTypeDefinition__Group__1__Impl
	rule__FileTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FileTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileTypeDefinitionAccess().getOfKeyword_1()); }

	Of 

{ after(grammarAccess.getFileTypeDefinitionAccess().getOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FileTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FileTypeDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileTypeDefinitionAccess().getTypeAssignment_2()); }
(rule__FileTypeDefinition__TypeAssignment_2)
{ after(grammarAccess.getFileTypeDefinitionAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GenerateStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__0__Impl
	rule__GenerateStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getLabelAssignment_0()); }
(rule__GenerateStatement__LabelAssignment_0)
{ after(grammarAccess.getGenerateStatementAccess().getLabelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__1__Impl
	rule__GenerateStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getGenerateStatementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__2__Impl
	rule__GenerateStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getSchemeAssignment_2()); }
(rule__GenerateStatement__SchemeAssignment_2)
{ after(grammarAccess.getGenerateStatementAccess().getSchemeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__3__Impl
	rule__GenerateStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getGenerateKeyword_3()); }

	Generate 

{ after(grammarAccess.getGenerateStatementAccess().getGenerateKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__4__Impl
	rule__GenerateStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getGroup_4()); }
(rule__GenerateStatement__Group_4__0)?
{ after(grammarAccess.getGenerateStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__5__Impl
	rule__GenerateStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getStatementAssignment_5()); }
(rule__GenerateStatement__StatementAssignment_5)*
{ after(grammarAccess.getGenerateStatementAccess().getStatementAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__6__Impl
	rule__GenerateStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getEndKeyword_6()); }

	End 

{ after(grammarAccess.getGenerateStatementAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__7__Impl
	rule__GenerateStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getGenerateKeyword_7()); }

	Generate 

{ after(grammarAccess.getGenerateStatementAccess().getGenerateKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__8__Impl
	rule__GenerateStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getIdentifierParserRuleCall_8()); }
(	ruleIdentifier)?
{ after(grammarAccess.getGenerateStatementAccess().getIdentifierParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getSemicolonKeyword_9()); }

	Semicolon 

{ after(grammarAccess.getGenerateStatementAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__GenerateStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group_4__0__Impl
	rule__GenerateStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getDeclarationAssignment_4_0()); }
(rule__GenerateStatement__DeclarationAssignment_4_0)*
{ after(grammarAccess.getGenerateStatementAccess().getDeclarationAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenerateStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenerateStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getBeginKeyword_4_1()); }

	Begin 

{ after(grammarAccess.getGenerateStatementAccess().getBeginKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForGenerationScheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForGenerationScheme__Group__0__Impl
	rule__ForGenerationScheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForGenerationScheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForGenerationSchemeAccess().getForKeyword_0()); }

	For 

{ after(grammarAccess.getForGenerationSchemeAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForGenerationScheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForGenerationScheme__Group__1__Impl
	rule__ForGenerationScheme__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForGenerationScheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForGenerationSchemeAccess().getVariableAssignment_1()); }
(rule__ForGenerationScheme__VariableAssignment_1)
{ after(grammarAccess.getForGenerationSchemeAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForGenerationScheme__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForGenerationScheme__Group__2__Impl
	rule__ForGenerationScheme__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForGenerationScheme__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForGenerationSchemeAccess().getInKeyword_2()); }

	In 

{ after(grammarAccess.getForGenerationSchemeAccess().getInKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForGenerationScheme__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForGenerationScheme__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForGenerationScheme__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForGenerationSchemeAccess().getInAssignment_3()); }
(rule__ForGenerationScheme__InAssignment_3)
{ after(grammarAccess.getForGenerationSchemeAccess().getInAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfGenerationScheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfGenerationScheme__Group__0__Impl
	rule__IfGenerationScheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfGenerationScheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfGenerationSchemeAccess().getIfKeyword_0()); }

	If 

{ after(grammarAccess.getIfGenerationSchemeAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfGenerationScheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfGenerationScheme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfGenerationScheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfGenerationSchemeAccess().getConditionAssignment_1()); }
(rule__IfGenerationScheme__ConditionAssignment_1)
{ after(grammarAccess.getIfGenerationSchemeAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Generics__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group__0__Impl
	rule__Generics__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getGenericKeyword_0()); }

	Generic 

{ after(grammarAccess.getGenericsAccess().getGenericKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generics__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group__1__Impl
	rule__Generics__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getGenericsAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generics__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group__2__Impl
	rule__Generics__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getDeclarationAssignment_2()); }
(rule__Generics__DeclarationAssignment_2)
{ after(grammarAccess.getGenericsAccess().getDeclarationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generics__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group__3__Impl
	rule__Generics__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getGroup_3()); }
(rule__Generics__Group_3__0)*
{ after(grammarAccess.getGenericsAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generics__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group__4__Impl
	rule__Generics__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getGenericsAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generics__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getGenericsAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Generics__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group_3__0__Impl
	rule__Generics__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getSemicolonKeyword_3_0()); }

	Semicolon 

{ after(grammarAccess.getGenericsAccess().getSemicolonKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generics__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generics__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getDeclarationAssignment_3_1()); }
(rule__Generics__DeclarationAssignment_3_1)
{ after(grammarAccess.getGenericsAccess().getDeclarationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GenericMaps__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group__0__Impl
	rule__GenericMaps__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getGenericKeyword_0()); }

	Generic 

{ after(grammarAccess.getGenericMapsAccess().getGenericKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMaps__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group__1__Impl
	rule__GenericMaps__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getMapKeyword_1()); }

	Map 

{ after(grammarAccess.getGenericMapsAccess().getMapKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMaps__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group__2__Impl
	rule__GenericMaps__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getGenericMapsAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMaps__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group__3__Impl
	rule__GenericMaps__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getGenericAssignment_3()); }
(rule__GenericMaps__GenericAssignment_3)
{ after(grammarAccess.getGenericMapsAccess().getGenericAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMaps__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group__4__Impl
	rule__GenericMaps__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getGroup_4()); }
(rule__GenericMaps__Group_4__0)*
{ after(grammarAccess.getGenericMapsAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMaps__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getRightParenthesisKeyword_5()); }

	RightParenthesis 

{ after(grammarAccess.getGenericMapsAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__GenericMaps__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group_4__0__Impl
	rule__GenericMaps__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getCommaKeyword_4_0()); }

	Comma 

{ after(grammarAccess.getGenericMapsAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GenericMaps__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GenericMaps__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getGenericAssignment_4_1()); }
(rule__GenericMaps__GenericAssignment_4_1)
{ after(grammarAccess.getGenericMapsAccess().getGenericAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__0__Impl
	rule__GroupDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getGroupKeyword_0()); }

	Group 

{ after(grammarAccess.getGroupDeclarationAccess().getGroupKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__1__Impl
	rule__GroupDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getNameAssignment_1()); }
(rule__GroupDeclaration__NameAssignment_1)
{ after(grammarAccess.getGroupDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__2__Impl
	rule__GroupDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getGroupDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__3__Impl
	rule__GroupDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getIsAssignment_3()); }
(rule__GroupDeclaration__IsAssignment_3)
{ after(grammarAccess.getGroupDeclarationAccess().getIsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__4__Impl
	rule__GroupDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getLeftParenthesisKeyword_4()); }

	LeftParenthesis 

{ after(grammarAccess.getGroupDeclarationAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__5__Impl
	rule__GroupDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getMemberAssignment_5()); }
(rule__GroupDeclaration__MemberAssignment_5)
{ after(grammarAccess.getGroupDeclarationAccess().getMemberAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__6__Impl
	rule__GroupDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getRightParenthesisKeyword_6()); }

	RightParenthesis 

{ after(grammarAccess.getGroupDeclarationAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupDeclaration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getSemicolonKeyword_7()); }

	Semicolon 

{ after(grammarAccess.getGroupDeclarationAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__GroupConstituents__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupConstituents__Group__0__Impl
	rule__GroupConstituents__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentsAccess().getGroupConstituentParserRuleCall_0()); }
	ruleGroupConstituent
{ after(grammarAccess.getGroupConstituentsAccess().getGroupConstituentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupConstituents__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupConstituents__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentsAccess().getGroup_1()); }
(rule__GroupConstituents__Group_1__0)?
{ after(grammarAccess.getGroupConstituentsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupConstituents__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupConstituents__Group_1__0__Impl
	rule__GroupConstituents__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentsAccess().getNameListNameAction_1_0()); }
(

)
{ after(grammarAccess.getGroupConstituentsAccess().getNameListNameAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupConstituents__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupConstituents__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getGroupConstituentsAccess().getGroup_1_1()); }
(rule__GroupConstituents__Group_1_1__0)
{ after(grammarAccess.getGroupConstituentsAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getGroupConstituentsAccess().getGroup_1_1()); }
(rule__GroupConstituents__Group_1_1__0)*
{ after(grammarAccess.getGroupConstituentsAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupConstituents__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupConstituents__Group_1_1__0__Impl
	rule__GroupConstituents__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentsAccess().getCommaKeyword_1_1_0()); }

	Comma 

{ after(grammarAccess.getGroupConstituentsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupConstituents__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupConstituents__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentsAccess().getNameAssignment_1_1_1()); }
(rule__GroupConstituents__NameAssignment_1_1_1)
{ after(grammarAccess.getGroupConstituentsAccess().getNameAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GroupTemplateDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__0__Impl
	rule__GroupTemplateDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getGroupKeyword_0()); }

	Group 

{ after(grammarAccess.getGroupTemplateDeclarationAccess().getGroupKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__1__Impl
	rule__GroupTemplateDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getNameAssignment_1()); }
(rule__GroupTemplateDeclaration__NameAssignment_1)
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__2__Impl
	rule__GroupTemplateDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getIsKeyword_2()); }

	Is 

{ after(grammarAccess.getGroupTemplateDeclarationAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__3__Impl
	rule__GroupTemplateDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getLeftParenthesisKeyword_3()); }

	LeftParenthesis 

{ after(grammarAccess.getGroupTemplateDeclarationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__4__Impl
	rule__GroupTemplateDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getEntryAssignment_4()); }
(rule__GroupTemplateDeclaration__EntryAssignment_4)
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getEntryAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__5__Impl
	rule__GroupTemplateDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getLessThanSignGreaterThanSignKeyword_5()); }
(
	LessThanSignGreaterThanSign 
)?
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getLessThanSignGreaterThanSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__6__Impl
	rule__GroupTemplateDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getGroup_6()); }
(rule__GroupTemplateDeclaration__Group_6__0)*
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__7__Impl
	rule__GroupTemplateDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getRightParenthesisKeyword_7()); }

	RightParenthesis 

{ after(grammarAccess.getGroupTemplateDeclarationAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getGroupTemplateDeclarationAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__GroupTemplateDeclaration__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group_6__0__Impl
	rule__GroupTemplateDeclaration__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getCommaKeyword_6_0()); }

	Comma 

{ after(grammarAccess.getGroupTemplateDeclarationAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group_6__1__Impl
	rule__GroupTemplateDeclaration__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getEntryAssignment_6_1()); }
(rule__GroupTemplateDeclaration__EntryAssignment_6_1)
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getEntryAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GroupTemplateDeclaration__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GroupTemplateDeclaration__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getLessThanSignGreaterThanSignKeyword_6_2()); }
(
	LessThanSignGreaterThanSign 
)?
{ after(grammarAccess.getGroupTemplateDeclarationAccess().getLessThanSignGreaterThanSignKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_0()); }
(rule__IfStatement__Group_0__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }

	If 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTestAssignment_2()); }
(rule__IfStatement__TestAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getTestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_3()); }
(rule__IfStatement__Group_3__0)*
{ after(grammarAccess.getIfStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_4()); }
(rule__IfStatement__Group_4__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getIfStatementAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__6__Impl
	rule__IfStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_6()); }

	If 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__7__Impl
	rule__IfStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIdentifierParserRuleCall_7()); }
(	ruleIdentifier)?
{ after(grammarAccess.getIfStatementAccess().getIdentifierParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getIfStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__IfStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_0__0__Impl
	rule__IfStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLabelAssignment_0_0()); }
(rule__IfStatement__LabelAssignment_0_0)
{ after(grammarAccess.getIfStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getIfStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__0__Impl
	rule__IfStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElsifKeyword_3_0()); }

	Elsif 

{ after(grammarAccess.getIfStatementAccess().getElsifKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTestAssignment_3_1()); }
(rule__IfStatement__TestAssignment_3_1)
{ after(grammarAccess.getIfStatementAccess().getTestAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_4__0__Impl
	rule__IfStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_4_0()); }

	Else 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getStatementAssignment_4_1()); }
(rule__IfStatement__StatementAssignment_4_1)*
{ after(grammarAccess.getIfStatementAccess().getStatementAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatementTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementTest__Group__0__Impl
	rule__IfStatementTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementTestAccess().getConditionAssignment_0()); }
(rule__IfStatementTest__ConditionAssignment_0)
{ after(grammarAccess.getIfStatementTestAccess().getConditionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatementTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementTest__Group__1__Impl
	rule__IfStatementTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementTestAccess().getThenKeyword_1()); }

	Then 

{ after(grammarAccess.getIfStatementTestAccess().getThenKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatementTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatementTest__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementTestAccess().getStatementAssignment_2()); }
(rule__IfStatementTest__StatementAssignment_2)*
{ after(grammarAccess.getIfStatementTestAccess().getStatementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RangeConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeConstraint__Group__0__Impl
	rule__RangeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeConstraintAccess().getRangeKeyword_0()); }

	Range 

{ after(grammarAccess.getRangeConstraintAccess().getRangeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeConstraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeConstraintAccess().getRangeParserRuleCall_1()); }
	ruleRange
{ after(grammarAccess.getRangeConstraintAccess().getRangeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group__0__Impl
	rule__IndexConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getLeftParenthesisKeyword_0()); }

	LeftParenthesis 

{ after(grammarAccess.getIndexConstraintAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group__1__Impl
	rule__IndexConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getDiscreteRangeParserRuleCall_1()); }
	ruleDiscreteRange
{ after(grammarAccess.getIndexConstraintAccess().getDiscreteRangeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group__2__Impl
	rule__IndexConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getGroup_2()); }
(rule__IndexConstraint__Group_2__0)?
{ after(grammarAccess.getIndexConstraintAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getIndexConstraintAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IndexConstraint__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group_2__0__Impl
	rule__IndexConstraint__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getMultiExpressionExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getIndexConstraintAccess().getMultiExpressionExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexConstraint__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIndexConstraintAccess().getGroup_2_1()); }
(rule__IndexConstraint__Group_2_1__0)
{ after(grammarAccess.getIndexConstraintAccess().getGroup_2_1()); }
)
(
{ before(grammarAccess.getIndexConstraintAccess().getGroup_2_1()); }
(rule__IndexConstraint__Group_2_1__0)*
{ after(grammarAccess.getIndexConstraintAccess().getGroup_2_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexConstraint__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group_2_1__0__Impl
	rule__IndexConstraint__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getCommaKeyword_2_1_0()); }

	Comma 

{ after(grammarAccess.getIndexConstraintAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexConstraint__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexConstraint__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getExpressionAssignment_2_1_1()); }
(rule__IndexConstraint__ExpressionAssignment_2_1_1)
{ after(grammarAccess.getIndexConstraintAccess().getExpressionAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LoopStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__0__Impl
	rule__LoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getLoopStatementAction_0()); }
(

)
{ after(grammarAccess.getLoopStatementAccess().getLoopStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__1__Impl
	rule__LoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getGroup_1()); }
(rule__LoopStatement__Group_1__0)?
{ after(grammarAccess.getLoopStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__2__Impl
	rule__LoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getIterationAssignment_2()); }
(rule__LoopStatement__IterationAssignment_2)?
{ after(grammarAccess.getLoopStatementAccess().getIterationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__3__Impl
	rule__LoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getLoopKeyword_3()); }

	Loop 

{ after(grammarAccess.getLoopStatementAccess().getLoopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__4__Impl
	rule__LoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getStatementAssignment_4()); }
(rule__LoopStatement__StatementAssignment_4)*
{ after(grammarAccess.getLoopStatementAccess().getStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__5__Impl
	rule__LoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getLoopStatementAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__6__Impl
	rule__LoopStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getLoopKeyword_6()); }

	Loop 

{ after(grammarAccess.getLoopStatementAccess().getLoopKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__7__Impl
	rule__LoopStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getIdentifierParserRuleCall_7()); }
(	ruleIdentifier)?
{ after(grammarAccess.getLoopStatementAccess().getIdentifierParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getLoopStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__LoopStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group_1__0__Impl
	rule__LoopStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getLabelAssignment_1_0()); }
(rule__LoopStatement__LabelAssignment_1_0)
{ after(grammarAccess.getLoopStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getLoopStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileIterationScheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileIterationScheme__Group__0__Impl
	rule__WhileIterationScheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileIterationScheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileIterationSchemeAccess().getWhileKeyword_0()); }

	While 

{ after(grammarAccess.getWhileIterationSchemeAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileIterationScheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileIterationScheme__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileIterationScheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileIterationSchemeAccess().getConditionAssignment_1()); }
(rule__WhileIterationScheme__ConditionAssignment_1)
{ after(grammarAccess.getWhileIterationSchemeAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForIterationScheme__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForIterationScheme__Group__0__Impl
	rule__ForIterationScheme__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForIterationScheme__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForIterationSchemeAccess().getForKeyword_0()); }

	For 

{ after(grammarAccess.getForIterationSchemeAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForIterationScheme__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForIterationScheme__Group__1__Impl
	rule__ForIterationScheme__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForIterationScheme__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForIterationSchemeAccess().getVariableAssignment_1()); }
(rule__ForIterationScheme__VariableAssignment_1)
{ after(grammarAccess.getForIterationSchemeAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForIterationScheme__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForIterationScheme__Group__2__Impl
	rule__ForIterationScheme__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForIterationScheme__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForIterationSchemeAccess().getInKeyword_2()); }

	In 

{ after(grammarAccess.getForIterationSchemeAccess().getInKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForIterationScheme__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForIterationScheme__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForIterationScheme__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForIterationSchemeAccess().getInAssignment_3()); }
(rule__ForIterationScheme__InAssignment_3)
{ after(grammarAccess.getForIterationSchemeAccess().getInAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Name__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__0__Impl
	rule__Name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getNamePrefixParserRuleCall_0()); }
	ruleNamePrefix
{ after(grammarAccess.getNameAccess().getNamePrefixParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getGroup_1()); }
(rule__Name__Group_1__0)?
{ after(grammarAccess.getNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Name__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group_1__0__Impl
	rule__Name__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getNameExpressionElementAction_1_0()); }
(

)
{ after(grammarAccess.getNameAccess().getNameExpressionElementAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Name__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Name__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Name__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getNameAccess().getElementAssignment_1_1()); }
(rule__Name__ElementAssignment_1_1)
{ after(grammarAccess.getNameAccess().getElementAssignment_1_1()); }
)
(
{ before(grammarAccess.getNameAccess().getElementAssignment_1_1()); }
(rule__Name__ElementAssignment_1_1)*
{ after(grammarAccess.getNameAccess().getElementAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NameExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameExpression__Group_0__0__Impl
	rule__NameExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameExpressionAccess().getNameExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getNameExpressionAccess().getNameExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameExpression__Group_0__1__Impl
	rule__NameExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameExpressionAccess().getElementAssignment_0_1()); }
(rule__NameExpression__ElementAssignment_0_1)
{ after(grammarAccess.getNameExpressionAccess().getElementAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getNameExpressionAccess().getElementAssignment_0_2()); }
(rule__NameExpression__ElementAssignment_0_2)
{ after(grammarAccess.getNameExpressionAccess().getElementAssignment_0_2()); }
)
(
{ before(grammarAccess.getNameExpressionAccess().getElementAssignment_0_2()); }
(rule__NameExpression__ElementAssignment_0_2)*
{ after(grammarAccess.getNameExpressionAccess().getElementAssignment_0_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringName__Group__0__Impl
	rule__StringName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringNameAccess().getStringExpressionAction_0()); }
(

)
{ after(grammarAccess.getStringNameAccess().getStringExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringNameAccess().getValueAssignment_1()); }
(rule__StringName__ValueAssignment_1)
{ after(grammarAccess.getStringNameAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CharacterName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CharacterName__Group__0__Impl
	rule__CharacterName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharacterNameAccess().getCharacterExpressionAction_0()); }
(

)
{ after(grammarAccess.getCharacterNameAccess().getCharacterExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CharacterName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CharacterName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharacterNameAccess().getValueAssignment_1()); }
(rule__CharacterName__ValueAssignment_1)
{ after(grammarAccess.getCharacterNameAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IdentifierName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierName__Group__0__Impl
	rule__IdentifierName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierNameAccess().getIdentifierExpressionAction_0()); }
(

)
{ after(grammarAccess.getIdentifierNameAccess().getIdentifierExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IdentifierName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IdentifierName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierNameAccess().getValueAssignment_1()); }
(rule__IdentifierName__ValueAssignment_1)
{ after(grammarAccess.getIdentifierNameAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedName__Group__0__Impl
	rule__SelectedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedNameAccess().getFullStopKeyword_0()); }

	FullStop 

{ after(grammarAccess.getSelectedNameAccess().getFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedNameAccess().getAlternatives_1()); }
(rule__SelectedName__Alternatives_1)
{ after(grammarAccess.getSelectedNameAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeName__Group__0__Impl
	rule__AttributeName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getAttributeExpressionAction_0()); }
(

)
{ after(grammarAccess.getAttributeNameAccess().getAttributeExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeName__Group__1__Impl
	rule__AttributeName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getSignatureAssignment_1()); }
(rule__AttributeName__SignatureAssignment_1)?
{ after(grammarAccess.getAttributeNameAccess().getSignatureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getValueAssignment_2()); }
(rule__AttributeName__ValueAssignment_2)
{ after(grammarAccess.getAttributeNameAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NatureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NatureDeclaration__Group__0__Impl
	rule__NatureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getNatureKeyword_0()); }

	Nature 

{ after(grammarAccess.getNatureDeclarationAccess().getNatureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NatureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NatureDeclaration__Group__1__Impl
	rule__NatureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getNameAssignment_1()); }
(rule__NatureDeclaration__NameAssignment_1)
{ after(grammarAccess.getNatureDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NatureDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NatureDeclaration__Group__2__Impl
	rule__NatureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getIsKeyword_2()); }

	Is 

{ after(grammarAccess.getNatureDeclarationAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NatureDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NatureDeclaration__Group__3__Impl
	rule__NatureDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getIsAssignment_3()); }
(rule__NatureDeclaration__IsAssignment_3)
{ after(grammarAccess.getNatureDeclarationAccess().getIsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NatureDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NatureDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getNatureDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ScalarNatureDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScalarNatureDefinition__Group__0__Impl
	rule__ScalarNatureDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getNameAssignment_0()); }
(rule__ScalarNatureDefinition__NameAssignment_0)
{ after(grammarAccess.getScalarNatureDefinitionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScalarNatureDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScalarNatureDefinition__Group__1__Impl
	rule__ScalarNatureDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getAcrossKeyword_1()); }

	Across 

{ after(grammarAccess.getScalarNatureDefinitionAccess().getAcrossKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScalarNatureDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScalarNatureDefinition__Group__2__Impl
	rule__ScalarNatureDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getAcrossAssignment_2()); }
(rule__ScalarNatureDefinition__AcrossAssignment_2)
{ after(grammarAccess.getScalarNatureDefinitionAccess().getAcrossAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScalarNatureDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScalarNatureDefinition__Group__3__Impl
	rule__ScalarNatureDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getThroughKeyword_3()); }

	Through 

{ after(grammarAccess.getScalarNatureDefinitionAccess().getThroughKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScalarNatureDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScalarNatureDefinition__Group__4__Impl
	rule__ScalarNatureDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getThroughAssignment_4()); }
(rule__ScalarNatureDefinition__ThroughAssignment_4)
{ after(grammarAccess.getScalarNatureDefinitionAccess().getThroughAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScalarNatureDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScalarNatureDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getReferenceKeyword_5()); }

	Reference 

{ after(grammarAccess.getScalarNatureDefinitionAccess().getReferenceKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NextStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group__0__Impl
	rule__NextStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getNextStatementAction_0()); }
(

)
{ after(grammarAccess.getNextStatementAccess().getNextStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group__1__Impl
	rule__NextStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getGroup_1()); }
(rule__NextStatement__Group_1__0)?
{ after(grammarAccess.getNextStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group__2__Impl
	rule__NextStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getNextKeyword_2()); }

	Next 

{ after(grammarAccess.getNextStatementAccess().getNextKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group__3__Impl
	rule__NextStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getNextAssignment_3()); }
(rule__NextStatement__NextAssignment_3)?
{ after(grammarAccess.getNextStatementAccess().getNextAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group__4__Impl
	rule__NextStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getGroup_4()); }
(rule__NextStatement__Group_4__0)?
{ after(grammarAccess.getNextStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getNextStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NextStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group_1__0__Impl
	rule__NextStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getLabelAssignment_1_0()); }
(rule__NextStatement__LabelAssignment_1_0)
{ after(grammarAccess.getNextStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getNextStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NextStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group_4__0__Impl
	rule__NextStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getWhenKeyword_4_0()); }

	When 

{ after(grammarAccess.getNextStatementAccess().getWhenKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NextStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NextStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getWhenAssignment_4_1()); }
(rule__NextStatement__WhenAssignment_4_1)
{ after(grammarAccess.getNextStatementAccess().getWhenAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Ports__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group__0__Impl
	rule__Ports__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getPortKeyword_0()); }

	Port 

{ after(grammarAccess.getPortsAccess().getPortKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ports__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group__1__Impl
	rule__Ports__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getPortsAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ports__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group__2__Impl
	rule__Ports__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getDeclarationAssignment_2()); }
(rule__Ports__DeclarationAssignment_2)
{ after(grammarAccess.getPortsAccess().getDeclarationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ports__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group__3__Impl
	rule__Ports__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getGroup_3()); }
(rule__Ports__Group_3__0)*
{ after(grammarAccess.getPortsAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ports__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group__4__Impl
	rule__Ports__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getRightParenthesisKeyword_4()); }

	RightParenthesis 

{ after(grammarAccess.getPortsAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ports__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getPortsAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Ports__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group_3__0__Impl
	rule__Ports__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getSemicolonKeyword_3_0()); }

	Semicolon 

{ after(grammarAccess.getPortsAccess().getSemicolonKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ports__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ports__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getDeclarationAssignment_3_1()); }
(rule__Ports__DeclarationAssignment_3_1)
{ after(grammarAccess.getPortsAccess().getDeclarationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PortMaps__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group__0__Impl
	rule__PortMaps__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getPortKeyword_0()); }

	Port 

{ after(grammarAccess.getPortMapsAccess().getPortKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PortMaps__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group__1__Impl
	rule__PortMaps__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getMapKeyword_1()); }

	Map 

{ after(grammarAccess.getPortMapsAccess().getMapKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PortMaps__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group__2__Impl
	rule__PortMaps__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getLeftParenthesisKeyword_2()); }

	LeftParenthesis 

{ after(grammarAccess.getPortMapsAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PortMaps__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group__3__Impl
	rule__PortMaps__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getPortAssignment_3()); }
(rule__PortMaps__PortAssignment_3)
{ after(grammarAccess.getPortMapsAccess().getPortAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PortMaps__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group__4__Impl
	rule__PortMaps__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getGroup_4()); }
(rule__PortMaps__Group_4__0)*
{ after(grammarAccess.getPortMapsAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PortMaps__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getRightParenthesisKeyword_5()); }

	RightParenthesis 

{ after(grammarAccess.getPortMapsAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PortMaps__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group_4__0__Impl
	rule__PortMaps__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getCommaKeyword_4_0()); }

	Comma 

{ after(grammarAccess.getPortMapsAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PortMaps__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PortMaps__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getPortAssignment_4_1()); }
(rule__PortMaps__PortAssignment_4_1)
{ after(grammarAccess.getPortMapsAccess().getPortAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcedureCallStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureCallStatement__Group__0__Impl
	rule__ProcedureCallStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getGroup_0()); }
(rule__ProcedureCallStatement__Group_0__0)?
{ after(grammarAccess.getProcedureCallStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureCallStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureCallStatement__Group__1__Impl
	rule__ProcedureCallStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getProcedureAssignment_1()); }
(rule__ProcedureCallStatement__ProcedureAssignment_1)
{ after(grammarAccess.getProcedureCallStatementAccess().getProcedureAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureCallStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureCallStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getProcedureCallStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ProcedureCallStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureCallStatement__Group_0__0__Impl
	rule__ProcedureCallStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getLabelAssignment_0_0()); }
(rule__ProcedureCallStatement__LabelAssignment_0_0)
{ after(grammarAccess.getProcedureCallStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureCallStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureCallStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getProcedureCallStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcurrentProcedureCallStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentProcedureCallStatement__Group__0__Impl
	rule__ConcurrentProcedureCallStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getGroup_0()); }
(rule__ConcurrentProcedureCallStatement__Group_0__0)?
{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentProcedureCallStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentProcedureCallStatement__Group__1__Impl
	rule__ConcurrentProcedureCallStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedAssignment_1()); }
(rule__ConcurrentProcedureCallStatement__PostponedAssignment_1)
{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentProcedureCallStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentProcedureCallStatement__Group__2__Impl
	rule__ConcurrentProcedureCallStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getProcedureAssignment_2()); }
(rule__ConcurrentProcedureCallStatement__ProcedureAssignment_2)
{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getProcedureAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentProcedureCallStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentProcedureCallStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConcurrentProcedureCallStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentProcedureCallStatement__Group_0__0__Impl
	rule__ConcurrentProcedureCallStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getLabelAssignment_0_0()); }
(rule__ConcurrentProcedureCallStatement__LabelAssignment_0_0)
{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcurrentProcedureCallStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcurrentProcedureCallStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__0__Impl
	rule__ProcessStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getProcessStatementAction_0()); }
(

)
{ after(grammarAccess.getProcessStatementAccess().getProcessStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__1__Impl
	rule__ProcessStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getGroup_1()); }
(rule__ProcessStatement__Group_1__0)?
{ after(grammarAccess.getProcessStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__2__Impl
	rule__ProcessStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getPostponedAssignment_2()); }
(rule__ProcessStatement__PostponedAssignment_2)?
{ after(grammarAccess.getProcessStatementAccess().getPostponedAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__3__Impl
	rule__ProcessStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getProcessKeyword_3()); }

	Process 

{ after(grammarAccess.getProcessStatementAccess().getProcessKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__4__Impl
	rule__ProcessStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getGroup_4()); }
(rule__ProcessStatement__Group_4__0)?
{ after(grammarAccess.getProcessStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__5__Impl
	rule__ProcessStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getIsKeyword_5()); }
(
	Is 
)?
{ after(grammarAccess.getProcessStatementAccess().getIsKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__6__Impl
	rule__ProcessStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getDeclarationAssignment_6()); }
(rule__ProcessStatement__DeclarationAssignment_6)*
{ after(grammarAccess.getProcessStatementAccess().getDeclarationAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__7__Impl
	rule__ProcessStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getBeginKeyword_7()); }

	Begin 

{ after(grammarAccess.getProcessStatementAccess().getBeginKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__8__Impl
	rule__ProcessStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getStatementAssignment_8()); }
(rule__ProcessStatement__StatementAssignment_8)*
{ after(grammarAccess.getProcessStatementAccess().getStatementAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__9__Impl
	rule__ProcessStatement__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getEndKeyword_9()); }

	End 

{ after(grammarAccess.getProcessStatementAccess().getEndKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__10__Impl
	rule__ProcessStatement__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getPostponedKeyword_10()); }
(
	Postponed 
)?
{ after(grammarAccess.getProcessStatementAccess().getPostponedKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__11
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__11__Impl
	rule__ProcessStatement__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__11__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getProcessKeyword_11()); }

	Process 

{ after(grammarAccess.getProcessStatementAccess().getProcessKeyword_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__12
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__12__Impl
	rule__ProcessStatement__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__12__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getIdentifierParserRuleCall_12()); }
(	ruleIdentifier)?
{ after(grammarAccess.getProcessStatementAccess().getIdentifierParserRuleCall_12()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group__13
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group__13__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getSemicolonKeyword_13()); }

	Semicolon 

{ after(grammarAccess.getProcessStatementAccess().getSemicolonKeyword_13()); }
)

;
finally {
	restoreStackSize(stackSize);
}






























rule__ProcessStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group_1__0__Impl
	rule__ProcessStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getLabelAssignment_1_0()); }
(rule__ProcessStatement__LabelAssignment_1_0)
{ after(grammarAccess.getProcessStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getProcessStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group_4__0__Impl
	rule__ProcessStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getLeftParenthesisKeyword_4_0()); }

	LeftParenthesis 

{ after(grammarAccess.getProcessStatementAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group_4__1__Impl
	rule__ProcessStatement__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getSensitivityAssignment_4_1()); }
(rule__ProcessStatement__SensitivityAssignment_4_1)
{ after(grammarAccess.getProcessStatementAccess().getSensitivityAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessStatement__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessStatement__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getRightParenthesisKeyword_4_2()); }

	RightParenthesis 

{ after(grammarAccess.getProcessStatementAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AllocatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllocatorExpression__Group__0__Impl
	rule__AllocatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocatorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocatorExpressionAccess().getNewKeyword_0()); }

	New 

{ after(grammarAccess.getAllocatorExpressionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AllocatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AllocatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AllocatorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocatorExpressionAccess().getTypeAssignment_1()); }
(rule__AllocatorExpression__TypeAssignment_1)
{ after(grammarAccess.getAllocatorExpressionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RecordNatureDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureDefinition__Group__0__Impl
	rule__RecordNatureDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getRecordKeyword_0()); }

	Record 

{ after(grammarAccess.getRecordNatureDefinitionAccess().getRecordKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureDefinition__Group__1__Impl
	rule__RecordNatureDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getRecordAssignment_1()); }
(rule__RecordNatureDefinition__RecordAssignment_1)
{ after(grammarAccess.getRecordNatureDefinitionAccess().getRecordAssignment_1()); }
)
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getRecordAssignment_1()); }
(rule__RecordNatureDefinition__RecordAssignment_1)*
{ after(grammarAccess.getRecordNatureDefinitionAccess().getRecordAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureDefinition__Group__2__Impl
	rule__RecordNatureDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getEndKeyword_2()); }

	End 

{ after(grammarAccess.getRecordNatureDefinitionAccess().getEndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureDefinition__Group__3__Impl
	rule__RecordNatureDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getRecordKeyword_3()); }

	Record 

{ after(grammarAccess.getRecordNatureDefinitionAccess().getRecordKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getIdentifierParserRuleCall_4()); }
(	ruleIdentifier)?
{ after(grammarAccess.getRecordNatureDefinitionAccess().getIdentifierParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordNatureElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureElement__Group__0__Impl
	rule__RecordNatureElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureElementAccess().getNameAssignment_0()); }
(rule__RecordNatureElement__NameAssignment_0)
{ after(grammarAccess.getRecordNatureElementAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureElement__Group__1__Impl
	rule__RecordNatureElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureElementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getRecordNatureElementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureElement__Group__2__Impl
	rule__RecordNatureElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureElementAccess().getNatureAssignment_2()); }
(rule__RecordNatureElement__NatureAssignment_2)
{ after(grammarAccess.getRecordNatureElementAccess().getNatureAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordNatureElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordNatureElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureElementAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getRecordNatureElementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RecordTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__0__Impl
	rule__RecordTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_0()); }

	Record 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__1__Impl
	rule__RecordTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationAssignment_1()); }
(rule__RecordTypeDefinition__DeclarationAssignment_1)
{ after(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationAssignment_1()); }
)
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationAssignment_1()); }
(rule__RecordTypeDefinition__DeclarationAssignment_1)*
{ after(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__2__Impl
	rule__RecordTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getEndKeyword_2()); }

	End 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getEndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__3__Impl
	rule__RecordTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_3()); }

	Record 

{ after(grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getIdentifierParserRuleCall_4()); }
(	ruleIdentifier)?
{ after(grammarAccess.getRecordTypeDefinitionAccess().getIdentifierParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RecordTypeElement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeElement__Group__0__Impl
	rule__RecordTypeElement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeElement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeElementAccess().getNameAssignment_0()); }
(rule__RecordTypeElement__NameAssignment_0)
{ after(grammarAccess.getRecordTypeElementAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeElement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeElement__Group__1__Impl
	rule__RecordTypeElement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeElement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeElementAccess().getColonKeyword_1()); }

	Colon 

{ after(grammarAccess.getRecordTypeElementAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeElement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeElement__Group__2__Impl
	rule__RecordTypeElement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeElement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeElementAccess().getTypeAssignment_2()); }
(rule__RecordTypeElement__TypeAssignment_2)
{ after(grammarAccess.getRecordTypeElementAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RecordTypeElement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RecordTypeElement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeElement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeElementAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getRecordTypeElementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReportStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group__0__Impl
	rule__ReportStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getGroup_0()); }
(rule__ReportStatement__Group_0__0)?
{ after(grammarAccess.getReportStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group__1__Impl
	rule__ReportStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getReportKeyword_1()); }

	Report 

{ after(grammarAccess.getReportStatementAccess().getReportKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group__2__Impl
	rule__ReportStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getReportAssignment_2()); }
(rule__ReportStatement__ReportAssignment_2)
{ after(grammarAccess.getReportStatementAccess().getReportAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group__3__Impl
	rule__ReportStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getGroup_3()); }
(rule__ReportStatement__Group_3__0)?
{ after(grammarAccess.getReportStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getReportStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ReportStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group_0__0__Impl
	rule__ReportStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getLabelAssignment_0_0()); }
(rule__ReportStatement__LabelAssignment_0_0)
{ after(grammarAccess.getReportStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getReportStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReportStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group_3__0__Impl
	rule__ReportStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getSeverityKeyword_3_0()); }

	Severity 

{ after(grammarAccess.getReportStatementAccess().getSeverityKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getSeverityAssignment_3_1()); }
(rule__ReportStatement__SeverityAssignment_3_1)
{ after(grammarAccess.getReportStatementAccess().getSeverityAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup_1()); }
(rule__ReturnStatement__Group_1__0)?
{ after(grammarAccess.getReturnStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
	rule__ReturnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_2()); }

	Return 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__3__Impl
	rule__ReturnStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_3()); }
(rule__ReturnStatement__ExpressionAssignment_3)?
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ReturnStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_1__0__Impl
	rule__ReturnStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getLabelAssignment_1_0()); }
(rule__ReturnStatement__LabelAssignment_1_0)
{ after(grammarAccess.getReturnStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getReturnStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NullStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__0__Impl
	rule__NullStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getExpressionStatementAction_0()); }
(

)
{ after(grammarAccess.getNullStatementAccess().getExpressionStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__1__Impl
	rule__NullStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getGroup_1()); }
(rule__NullStatement__Group_1__0)?
{ after(grammarAccess.getNullStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__2__Impl
	rule__NullStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getExpressionAssignment_2()); }
(rule__NullStatement__ExpressionAssignment_2)
{ after(grammarAccess.getNullStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getNullStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NullStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group_1__0__Impl
	rule__NullStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getLabelAssignment_1_0()); }
(rule__NullStatement__LabelAssignment_1_0)
{ after(grammarAccess.getNullStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getNullStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignalDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__0__Impl
	rule__SignalDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getSignalKeyword_0()); }

	Signal 

{ after(grammarAccess.getSignalDeclarationAccess().getSignalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__1__Impl
	rule__SignalDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getNameAssignment_1()); }
(rule__SignalDeclaration__NameAssignment_1)
{ after(grammarAccess.getSignalDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__2__Impl
	rule__SignalDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getSignalDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__3__Impl
	rule__SignalDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getTypeAssignment_3()); }
(rule__SignalDeclaration__TypeAssignment_3)
{ after(grammarAccess.getSignalDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__4__Impl
	rule__SignalDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getKindAssignment_4()); }
(rule__SignalDeclaration__KindAssignment_4)?
{ after(grammarAccess.getSignalDeclarationAccess().getKindAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__5__Impl
	rule__SignalDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getGroup_5()); }
(rule__SignalDeclaration__Group_5__0)?
{ after(grammarAccess.getSignalDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getSignalDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SignalDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group_5__0__Impl
	rule__SignalDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getColonEqualsSignKeyword_5_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getSignalDeclarationAccess().getColonEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignalDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignalDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getInitialAssignment_5_1()); }
(rule__SignalDeclaration__InitialAssignment_5_1)
{ after(grammarAccess.getSignalDeclarationAccess().getInitialAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSharedAssignment_0()); }
(rule__VariableDeclaration__SharedAssignment_0)?
{ after(grammarAccess.getVariableDeclarationAccess().getSharedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariableKeyword_1()); }

	Variable 

{ after(grammarAccess.getVariableDeclarationAccess().getVariableKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
(rule__VariableDeclaration__NameAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonKeyword_3()); }

	Colon 

{ after(grammarAccess.getVariableDeclarationAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
	rule__VariableDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_4()); }
(rule__VariableDeclaration__TypeAssignment_4)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__5__Impl
	rule__VariableDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_5()); }
(rule__VariableDeclaration__Group_5__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__VariableDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_5__0__Impl
	rule__VariableDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_5_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialAssignment_5_1()); }
(rule__VariableDeclaration__InitialAssignment_5_1)
{ after(grammarAccess.getVariableDeclarationAccess().getInitialAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__0__Impl
	rule__ConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getConstantKeyword_0()); }

	Constant 

{ after(grammarAccess.getConstantDeclarationAccess().getConstantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__1__Impl
	rule__ConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
(rule__ConstantDeclaration__NameAssignment_1)
{ after(grammarAccess.getConstantDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__2__Impl
	rule__ConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getConstantDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__3__Impl
	rule__ConstantDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getTypeAssignment_3()); }
(rule__ConstantDeclaration__TypeAssignment_3)
{ after(grammarAccess.getConstantDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__4__Impl
	rule__ConstantDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getGroup_4()); }
(rule__ConstantDeclaration__Group_4__0)?
{ after(grammarAccess.getConstantDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ConstantDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group_4__0__Impl
	rule__ConstantDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getColonEqualsSignKeyword_4_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getConstantDeclarationAccess().getColonEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getInitialAssignment_4_1()); }
(rule__ConstantDeclaration__InitialAssignment_4_1)
{ after(grammarAccess.getConstantDeclarationAccess().getInitialAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceSignalDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__0__Impl
	rule__InterfaceSignalDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getSignalKeyword_0()); }
(
	Signal 
)?
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getSignalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__1__Impl
	rule__InterfaceSignalDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getNameAssignment_1()); }
(rule__InterfaceSignalDeclaration__NameAssignment_1)
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__2__Impl
	rule__InterfaceSignalDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__3__Impl
	rule__InterfaceSignalDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getModeAssignment_3()); }
(rule__InterfaceSignalDeclaration__ModeAssignment_3)?
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getModeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__4__Impl
	rule__InterfaceSignalDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getTypeAssignment_4()); }
(rule__InterfaceSignalDeclaration__TypeAssignment_4)
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__5__Impl
	rule__InterfaceSignalDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getKindAssignment_5()); }
(rule__InterfaceSignalDeclaration__KindAssignment_5)?
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getKindAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getGroup_6()); }
(rule__InterfaceSignalDeclaration__Group_6__0)?
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__InterfaceSignalDeclaration__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group_6__0__Impl
	rule__InterfaceSignalDeclaration__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getColonEqualsSignKeyword_6_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getColonEqualsSignKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceSignalDeclaration__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceSignalDeclaration__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getInitialAssignment_6_1()); }
(rule__InterfaceSignalDeclaration__InitialAssignment_6_1)
{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getInitialAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group__0__Impl
	rule__InterfaceVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getVariableKeyword_0()); }
(
	Variable 
)?
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getVariableKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group__1__Impl
	rule__InterfaceVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getNameAssignment_1()); }
(rule__InterfaceVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group__2__Impl
	rule__InterfaceVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group__3__Impl
	rule__InterfaceVariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getModeAssignment_3()); }
(rule__InterfaceVariableDeclaration__ModeAssignment_3)?
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getModeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group__4__Impl
	rule__InterfaceVariableDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getTypeAssignment_4()); }
(rule__InterfaceVariableDeclaration__TypeAssignment_4)
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getGroup_5()); }
(rule__InterfaceVariableDeclaration__Group_5__0)?
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__InterfaceVariableDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group_5__0__Impl
	rule__InterfaceVariableDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getColonEqualsSignKeyword_5_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getColonEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceVariableDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceVariableDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getInitialAssignment_5_1()); }
(rule__InterfaceVariableDeclaration__InitialAssignment_5_1)
{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getInitialAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group__0__Impl
	rule__InterfaceConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getConstantKeyword_0()); }
(
	Constant 
)?
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getConstantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group__1__Impl
	rule__InterfaceConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getNameAssignment_1()); }
(rule__InterfaceConstantDeclaration__NameAssignment_1)
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group__2__Impl
	rule__InterfaceConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group__3__Impl
	rule__InterfaceConstantDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getInKeyword_3()); }
(
	In 
)?
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceConstantDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group__4__Impl
	rule__InterfaceConstantDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getTypeAssignment_4()); }
(rule__InterfaceConstantDeclaration__TypeAssignment_4)
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceConstantDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getGroup_5()); }
(rule__InterfaceConstantDeclaration__Group_5__0)?
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__InterfaceConstantDeclaration__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group_5__0__Impl
	rule__InterfaceConstantDeclaration__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getColonEqualsSignKeyword_5_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getColonEqualsSignKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceConstantDeclaration__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceConstantDeclaration__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getInitialAssignment_5_1()); }
(rule__InterfaceConstantDeclaration__InitialAssignment_5_1)
{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getInitialAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group__0__Impl
	rule__Signature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getSignatureAction_0()); }
(

)
{ after(grammarAccess.getSignatureAccess().getSignatureAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group__1__Impl
	rule__Signature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getLeftSquareBracketKeyword_1()); }

	LeftSquareBracket 

{ after(grammarAccess.getSignatureAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group__2__Impl
	rule__Signature__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getGroup_2()); }
(rule__Signature__Group_2__0)?
{ after(grammarAccess.getSignatureAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group__3__Impl
	rule__Signature__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getGroup_3()); }
(rule__Signature__Group_3__0)?
{ after(grammarAccess.getSignatureAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getRightSquareBracketKeyword_4()); }

	RightSquareBracket 

{ after(grammarAccess.getSignatureAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Signature__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group_2__0__Impl
	rule__Signature__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getParameterAssignment_2_0()); }
(rule__Signature__ParameterAssignment_2_0)
{ after(grammarAccess.getSignatureAccess().getParameterAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getGroup_2_1()); }
(rule__Signature__Group_2_1__0)*
{ after(grammarAccess.getSignatureAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signature__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group_2_1__0__Impl
	rule__Signature__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getCommaKeyword_2_1_0()); }

	Comma 

{ after(grammarAccess.getSignatureAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getParameterAssignment_2_1_1()); }
(rule__Signature__ParameterAssignment_2_1_1)
{ after(grammarAccess.getSignatureAccess().getParameterAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Signature__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group_3__0__Impl
	rule__Signature__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getReturnKeyword_3_0()); }

	Return 

{ after(grammarAccess.getSignatureAccess().getReturnKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Signature__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getReturnAssignment_3_1()); }
(rule__Signature__ReturnAssignment_3_1)
{ after(grammarAccess.getSignatureAccess().getReturnAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimultaneousAlternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousAlternative__Group__0__Impl
	rule__SimultaneousAlternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousAlternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getWhenKeyword_0()); }

	When 

{ after(grammarAccess.getSimultaneousAlternativeAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousAlternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousAlternative__Group__1__Impl
	rule__SimultaneousAlternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousAlternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getChoiceAssignment_1()); }
(rule__SimultaneousAlternative__ChoiceAssignment_1)
{ after(grammarAccess.getSimultaneousAlternativeAccess().getChoiceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousAlternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousAlternative__Group__2__Impl
	rule__SimultaneousAlternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousAlternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2()); }

	EqualsSignGreaterThanSign 

{ after(grammarAccess.getSimultaneousAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousAlternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousAlternative__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousAlternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getStatementAssignment_3()); }
(rule__SimultaneousAlternative__StatementAssignment_3)*
{ after(grammarAccess.getSimultaneousAlternativeAccess().getStatementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimultaneousCaseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__0__Impl
	rule__SimultaneousCaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getGroup_0()); }
(rule__SimultaneousCaseStatement__Group_0__0)?
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__1__Impl
	rule__SimultaneousCaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getCaseKeyword_1()); }

	Case 

{ after(grammarAccess.getSimultaneousCaseStatementAccess().getCaseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__2__Impl
	rule__SimultaneousCaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getCaseAssignment_2()); }
(rule__SimultaneousCaseStatement__CaseAssignment_2)
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getCaseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__3__Impl
	rule__SimultaneousCaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getUseKeyword_3()); }

	Use 

{ after(grammarAccess.getSimultaneousCaseStatementAccess().getUseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__4__Impl
	rule__SimultaneousCaseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getWhenAssignment_4()); }
(rule__SimultaneousCaseStatement__WhenAssignment_4)
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getWhenAssignment_4()); }
)
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getWhenAssignment_4()); }
(rule__SimultaneousCaseStatement__WhenAssignment_4)*
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getWhenAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__5__Impl
	rule__SimultaneousCaseStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getSimultaneousCaseStatementAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__6__Impl
	rule__SimultaneousCaseStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getCaseKeyword_6()); }

	Case 

{ after(grammarAccess.getSimultaneousCaseStatementAccess().getCaseKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__7__Impl
	rule__SimultaneousCaseStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getIdentifierParserRuleCall_7()); }
(	ruleIdentifier)?
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getIdentifierParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getSimultaneousCaseStatementAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__SimultaneousCaseStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group_0__0__Impl
	rule__SimultaneousCaseStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getLabelAssignment_0_0()); }
(rule__SimultaneousCaseStatement__LabelAssignment_0_0)
{ after(grammarAccess.getSimultaneousCaseStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousCaseStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousCaseStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getSimultaneousCaseStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimultaneousIfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__0__Impl
	rule__SimultaneousIfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getGroup_0()); }
(rule__SimultaneousIfStatement__Group_0__0)?
{ after(grammarAccess.getSimultaneousIfStatementAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__1__Impl
	rule__SimultaneousIfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getIfKeyword_1()); }

	If 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__2__Impl
	rule__SimultaneousIfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getTestAssignment_2()); }
(rule__SimultaneousIfStatement__TestAssignment_2)
{ after(grammarAccess.getSimultaneousIfStatementAccess().getTestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__3__Impl
	rule__SimultaneousIfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getUseKeyword_3()); }

	Use 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getUseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__4__Impl
	rule__SimultaneousIfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getGroup_4()); }
(rule__SimultaneousIfStatement__Group_4__0)*
{ after(grammarAccess.getSimultaneousIfStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__5__Impl
	rule__SimultaneousIfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getGroup_5()); }
(rule__SimultaneousIfStatement__Group_5__0)?
{ after(grammarAccess.getSimultaneousIfStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__6__Impl
	rule__SimultaneousIfStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getEndKeyword_6()); }

	End 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__7__Impl
	rule__SimultaneousIfStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getUseKeyword_7()); }

	Use 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getUseKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__8__Impl
	rule__SimultaneousIfStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getIdentifierParserRuleCall_8()); }
(	ruleIdentifier)?
{ after(grammarAccess.getSimultaneousIfStatementAccess().getIdentifierParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getSemicolonKeyword_9()); }

	Semicolon 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getSemicolonKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__SimultaneousIfStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group_0__0__Impl
	rule__SimultaneousIfStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getLabelAssignment_0_0()); }
(rule__SimultaneousIfStatement__LabelAssignment_0_0)
{ after(grammarAccess.getSimultaneousIfStatementAccess().getLabelAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getColonKeyword_0_1()); }

	Colon 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimultaneousIfStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group_4__0__Impl
	rule__SimultaneousIfStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getElsifKeyword_4_0()); }

	Elsif 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getElsifKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getTestAssignment_4_1()); }
(rule__SimultaneousIfStatement__TestAssignment_4_1)
{ after(grammarAccess.getSimultaneousIfStatementAccess().getTestAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimultaneousIfStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group_5__0__Impl
	rule__SimultaneousIfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getElseKeyword_5_0()); }

	Else 

{ after(grammarAccess.getSimultaneousIfStatementAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getStatementAssignment_5_1()); }
(rule__SimultaneousIfStatement__StatementAssignment_5_1)*
{ after(grammarAccess.getSimultaneousIfStatementAccess().getStatementAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimultaneousIfStatementTest__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatementTest__Group__0__Impl
	rule__SimultaneousIfStatementTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatementTest__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementTestAccess().getConditionAssignment_0()); }
(rule__SimultaneousIfStatementTest__ConditionAssignment_0)
{ after(grammarAccess.getSimultaneousIfStatementTestAccess().getConditionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatementTest__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatementTest__Group__1__Impl
	rule__SimultaneousIfStatementTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatementTest__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementTestAccess().getUseKeyword_1()); }

	Use 

{ after(grammarAccess.getSimultaneousIfStatementTestAccess().getUseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousIfStatementTest__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousIfStatementTest__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatementTest__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementTestAccess().getStatementAssignment_2()); }
(rule__SimultaneousIfStatementTest__StatementAssignment_2)*
{ after(grammarAccess.getSimultaneousIfStatementTestAccess().getStatementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimultaneousProceduralStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__0__Impl
	rule__SimultaneousProceduralStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getSimultaneousProceduralStatementAction_0()); }
(

)
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getSimultaneousProceduralStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__1__Impl
	rule__SimultaneousProceduralStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getGroup_1()); }
(rule__SimultaneousProceduralStatement__Group_1__0)?
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__2__Impl
	rule__SimultaneousProceduralStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getProceduralKeyword_2()); }

	Procedural 

{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getProceduralKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__3__Impl
	rule__SimultaneousProceduralStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getIsKeyword_3()); }
(
	Is 
)?
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getIsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__4__Impl
	rule__SimultaneousProceduralStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getDeclarationAssignment_4()); }
(rule__SimultaneousProceduralStatement__DeclarationAssignment_4)*
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getDeclarationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__5__Impl
	rule__SimultaneousProceduralStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getBeginKeyword_5()); }

	Begin 

{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getBeginKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__6__Impl
	rule__SimultaneousProceduralStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getStatementAssignment_6()); }
(rule__SimultaneousProceduralStatement__StatementAssignment_6)*
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getStatementAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__7__Impl
	rule__SimultaneousProceduralStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getEndKeyword_7()); }

	End 

{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getEndKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__8__Impl
	rule__SimultaneousProceduralStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getProceduralKeyword_8()); }

	Procedural 

{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getProceduralKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__9__Impl
	rule__SimultaneousProceduralStatement__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getIdentifierParserRuleCall_9()); }
(	ruleIdentifier)?
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getIdentifierParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getSemicolonKeyword_10()); }

	Semicolon 

{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getSemicolonKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__SimultaneousProceduralStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group_1__0__Impl
	rule__SimultaneousProceduralStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getLabelAssignment_1_0()); }
(rule__SimultaneousProceduralStatement__LabelAssignment_1_0)
{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimultaneousProceduralStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimultaneousProceduralStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Spectrum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spectrum__Group__0__Impl
	rule__Spectrum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spectrum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpectrumAccess().getSpectrumKeyword_0()); }

	Spectrum 

{ after(grammarAccess.getSpectrumAccess().getSpectrumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spectrum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spectrum__Group__1__Impl
	rule__Spectrum__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Spectrum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpectrumAccess().getLeftAssignment_1()); }
(rule__Spectrum__LeftAssignment_1)
{ after(grammarAccess.getSpectrumAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spectrum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spectrum__Group__2__Impl
	rule__Spectrum__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Spectrum__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpectrumAccess().getCommaKeyword_2()); }

	Comma 

{ after(grammarAccess.getSpectrumAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spectrum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spectrum__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spectrum__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpectrumAccess().getRightAssignment_3()); }
(rule__Spectrum__RightAssignment_3)
{ after(grammarAccess.getSpectrumAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Noise__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Noise__Group__0__Impl
	rule__Noise__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Noise__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoiseAccess().getNoiseKeyword_0()); }

	Noise 

{ after(grammarAccess.getNoiseAccess().getNoiseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Noise__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Noise__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Noise__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoiseAccess().getNoiseAssignment_1()); }
(rule__Noise__NoiseAssignment_1)
{ after(grammarAccess.getNoiseAccess().getNoiseAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantityAspect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group__0__Impl
	rule__QuantityAspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getNameAssignment_0()); }
(rule__QuantityAspect__NameAssignment_0)
{ after(grammarAccess.getQuantityAspectAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantityAspect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group__1__Impl
	rule__QuantityAspect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getGroup_1()); }
(rule__QuantityAspect__Group_1__0)?
{ after(grammarAccess.getQuantityAspectAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantityAspect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getGroup_2()); }
(rule__QuantityAspect__Group_2__0)?
{ after(grammarAccess.getQuantityAspectAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QuantityAspect__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group_1__0__Impl
	rule__QuantityAspect__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getToleranceKeyword_1_0()); }

	Tolerance 

{ after(grammarAccess.getQuantityAspectAccess().getToleranceKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantityAspect__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getToleranceAssignment_1_1()); }
(rule__QuantityAspect__ToleranceAssignment_1_1)
{ after(grammarAccess.getQuantityAspectAccess().getToleranceAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuantityAspect__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group_2__0__Impl
	rule__QuantityAspect__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getColonEqualsSignKeyword_2_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getQuantityAspectAccess().getColonEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuantityAspect__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuantityAspect__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getExpressionAssignment_2_1()); }
(rule__QuantityAspect__ExpressionAssignment_2_1)
{ after(grammarAccess.getQuantityAspectAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BranchQuantityDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group__0__Impl
	rule__BranchQuantityDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getQuantityKeyword_0()); }

	Quantity 

{ after(grammarAccess.getBranchQuantityDeclarationAccess().getQuantityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group__1__Impl
	rule__BranchQuantityDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getGroup_1()); }
(rule__BranchQuantityDeclaration__Group_1__0)?
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group__2__Impl
	rule__BranchQuantityDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getGroup_2()); }
(rule__BranchQuantityDeclaration__Group_2__0)?
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group__3__Impl
	rule__BranchQuantityDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getLeftAssignment_3()); }
(rule__BranchQuantityDeclaration__LeftAssignment_3)
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getLeftAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group__4__Impl
	rule__BranchQuantityDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getGroup_4()); }
(rule__BranchQuantityDeclaration__Group_4__0)?
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getBranchQuantityDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__BranchQuantityDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group_1__0__Impl
	rule__BranchQuantityDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossAssignment_1_0()); }
(rule__BranchQuantityDeclaration__AcrossAssignment_1_0)
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossKeyword_1_1()); }

	Across 

{ after(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BranchQuantityDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group_2__0__Impl
	rule__BranchQuantityDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getThroughAssignment_2_0()); }
(rule__BranchQuantityDeclaration__ThroughAssignment_2_0)
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getThroughAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getThroughKeyword_2_1()); }

	Through 

{ after(grammarAccess.getBranchQuantityDeclarationAccess().getThroughKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BranchQuantityDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group_4__0__Impl
	rule__BranchQuantityDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getToKeyword_4_0()); }

	To 

{ after(grammarAccess.getBranchQuantityDeclarationAccess().getToKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BranchQuantityDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BranchQuantityDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getRightAssignment_4_1()); }
(rule__BranchQuantityDeclaration__RightAssignment_4_1)
{ after(grammarAccess.getBranchQuantityDeclarationAccess().getRightAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FreeQuantityDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group__0__Impl
	rule__FreeQuantityDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityKeyword_0()); }

	Quantity 

{ after(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeQuantityDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group__1__Impl
	rule__FreeQuantityDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getNameAssignment_1()); }
(rule__FreeQuantityDeclaration__NameAssignment_1)
{ after(grammarAccess.getFreeQuantityDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeQuantityDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group__2__Impl
	rule__FreeQuantityDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getFreeQuantityDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeQuantityDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group__3__Impl
	rule__FreeQuantityDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getTypeAssignment_3()); }
(rule__FreeQuantityDeclaration__TypeAssignment_3)
{ after(grammarAccess.getFreeQuantityDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeQuantityDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group__4__Impl
	rule__FreeQuantityDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getGroup_4()); }
(rule__FreeQuantityDeclaration__Group_4__0)?
{ after(grammarAccess.getFreeQuantityDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeQuantityDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getFreeQuantityDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FreeQuantityDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group_4__0__Impl
	rule__FreeQuantityDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getColonEqualsSignKeyword_4_0()); }

	ColonEqualsSign 

{ after(grammarAccess.getFreeQuantityDeclarationAccess().getColonEqualsSignKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FreeQuantityDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FreeQuantityDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityAssignment_4_1()); }
(rule__FreeQuantityDeclaration__QuantityAssignment_4_1)
{ after(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SourceQuantityDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceQuantityDeclaration__Group__0__Impl
	rule__SourceQuantityDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getQuantityKeyword_0()); }

	Quantity 

{ after(grammarAccess.getSourceQuantityDeclarationAccess().getQuantityKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceQuantityDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceQuantityDeclaration__Group__1__Impl
	rule__SourceQuantityDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getNameAssignment_1()); }
(rule__SourceQuantityDeclaration__NameAssignment_1)
{ after(grammarAccess.getSourceQuantityDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceQuantityDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceQuantityDeclaration__Group__2__Impl
	rule__SourceQuantityDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getSourceQuantityDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceQuantityDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceQuantityDeclaration__Group__3__Impl
	rule__SourceQuantityDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getTypeAssignment_3()); }
(rule__SourceQuantityDeclaration__TypeAssignment_3)
{ after(grammarAccess.getSourceQuantityDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceQuantityDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceQuantityDeclaration__Group__4__Impl
	rule__SourceQuantityDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getSourceAssignment_4()); }
(rule__SourceQuantityDeclaration__SourceAssignment_4)
{ after(grammarAccess.getSourceQuantityDeclarationAccess().getSourceAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SourceQuantityDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SourceQuantityDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getSourceQuantityDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__LimitDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__0__Impl
	rule__LimitDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getLimitKeyword_0()); }

	Limit 

{ after(grammarAccess.getLimitDeclarationAccess().getLimitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LimitDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__1__Impl
	rule__LimitDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getNameAssignment_1()); }
(rule__LimitDeclaration__NameAssignment_1)
{ after(grammarAccess.getLimitDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LimitDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__2__Impl
	rule__LimitDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getLimitDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LimitDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__3__Impl
	rule__LimitDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getTypeAssignment_3()); }
(rule__LimitDeclaration__TypeAssignment_3)
{ after(grammarAccess.getLimitDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LimitDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__4__Impl
	rule__LimitDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getWithKeyword_4()); }

	With 

{ after(grammarAccess.getLimitDeclarationAccess().getWithKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LimitDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__5__Impl
	rule__LimitDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getValueAssignment_5()); }
(rule__LimitDeclaration__ValueAssignment_5)
{ after(grammarAccess.getLimitDeclarationAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LimitDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LimitDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getLimitDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SubnatureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureDeclaration__Group__0__Impl
	rule__SubnatureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getSubnatureKeyword_0()); }

	Subnature 

{ after(grammarAccess.getSubnatureDeclarationAccess().getSubnatureKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureDeclaration__Group__1__Impl
	rule__SubnatureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getNameAssignment_1()); }
(rule__SubnatureDeclaration__NameAssignment_1)
{ after(grammarAccess.getSubnatureDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureDeclaration__Group__2__Impl
	rule__SubnatureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getIsKeyword_2()); }

	Is 

{ after(grammarAccess.getSubnatureDeclarationAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureDeclaration__Group__3__Impl
	rule__SubnatureDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getNatureAssignment_3()); }
(rule__SubnatureDeclaration__NatureAssignment_3)
{ after(grammarAccess.getSubnatureDeclarationAccess().getNatureAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getSubnatureDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ProcedureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__0__Impl
	rule__ProcedureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getProcedureDeclarationAction_0()); }
(

)
{ after(grammarAccess.getProcedureDeclarationAccess().getProcedureDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__1__Impl
	rule__ProcedureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_1()); }

	Procedure 

{ after(grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__2__Impl
	rule__ProcedureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getNameAssignment_2()); }
(rule__ProcedureDeclaration__NameAssignment_2)
{ after(grammarAccess.getProcedureDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__3__Impl
	rule__ProcedureDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getGroup_3()); }
(rule__ProcedureDeclaration__Group_3__0)?
{ after(grammarAccess.getProcedureDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__4__Impl
	rule__ProcedureDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getBodyAssignment_4()); }
(rule__ProcedureDeclaration__BodyAssignment_4)?
{ after(grammarAccess.getProcedureDeclarationAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ProcedureDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_3__0__Impl
	rule__ProcedureDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_3_0()); }

	LeftParenthesis 

{ after(grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_3__1__Impl
	rule__ProcedureDeclaration__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getParameterAssignment_3_1()); }
(rule__ProcedureDeclaration__ParameterAssignment_3_1)
{ after(grammarAccess.getProcedureDeclarationAccess().getParameterAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_3__2__Impl
	rule__ProcedureDeclaration__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getGroup_3_2()); }
(rule__ProcedureDeclaration__Group_3_2__0)*
{ after(grammarAccess.getProcedureDeclarationAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_3_3()); }

	RightParenthesis 

{ after(grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProcedureDeclaration__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_3_2__0__Impl
	rule__ProcedureDeclaration__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3_2_0()); }

	Semicolon 

{ after(grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcedureDeclaration__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcedureDeclaration__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getParameterAssignment_3_2_1()); }
(rule__ProcedureDeclaration__ParameterAssignment_3_2_1)
{ after(grammarAccess.getProcedureDeclarationAccess().getParameterAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
(

)
{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getPurityAssignment_1()); }
(rule__FunctionDeclaration__PurityAssignment_1)?
{ after(grammarAccess.getFunctionDeclarationAccess().getPurityAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_2()); }

	Function 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
(rule__FunctionDeclaration__NameAssignment_3)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
(rule__FunctionDeclaration__Group_4__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getReturnKeyword_5()); }

	Return 

{ after(grammarAccess.getFunctionDeclarationAccess().getReturnKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
	rule__FunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_6()); }
(rule__FunctionDeclaration__TypeAssignment_6)
{ after(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__7__Impl
	rule__FunctionDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_7()); }
(rule__FunctionDeclaration__BodyAssignment_7)?
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_8()); }

	Semicolon 

{ after(grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__FunctionDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__0__Impl
	rule__FunctionDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4_0()); }

	LeftParenthesis 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__1__Impl
	rule__FunctionDeclaration__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterAssignment_4_1()); }
(rule__FunctionDeclaration__ParameterAssignment_4_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParameterAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__2__Impl
	rule__FunctionDeclaration__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4_2()); }
(rule__FunctionDeclaration__Group_4_2__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4_3()); }

	RightParenthesis 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionDeclaration__Group_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_2__0__Impl
	rule__FunctionDeclaration__Group_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_4_2_0()); }

	Semicolon 

{ after(grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterAssignment_4_2_1()); }
(rule__FunctionDeclaration__ParameterAssignment_4_2_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParameterAssignment_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubprogramBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__0__Impl
	rule__SubprogramBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getSubprogramBodyAction_0()); }
(

)
{ after(grammarAccess.getSubprogramBodyAccess().getSubprogramBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__1__Impl
	rule__SubprogramBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getIsKeyword_1()); }

	Is 

{ after(grammarAccess.getSubprogramBodyAccess().getIsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__2__Impl
	rule__SubprogramBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getDeclarationAssignment_2()); }
(rule__SubprogramBody__DeclarationAssignment_2)*
{ after(grammarAccess.getSubprogramBodyAccess().getDeclarationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__3__Impl
	rule__SubprogramBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getBeginKeyword_3()); }

	Begin 

{ after(grammarAccess.getSubprogramBodyAccess().getBeginKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__4__Impl
	rule__SubprogramBody__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getStatementAssignment_4()); }
(rule__SubprogramBody__StatementAssignment_4)*
{ after(grammarAccess.getSubprogramBodyAccess().getStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__5__Impl
	rule__SubprogramBody__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getEndKeyword_5()); }

	End 

{ after(grammarAccess.getSubprogramBodyAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__6__Impl
	rule__SubprogramBody__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getAlternatives_6()); }
(rule__SubprogramBody__Alternatives_6)?
{ after(grammarAccess.getSubprogramBodyAccess().getAlternatives_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramBody__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubprogramBody__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getDesignatorParserRuleCall_7()); }
(	ruleDesignator)?
{ after(grammarAccess.getSubprogramBodyAccess().getDesignatorParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__SubtypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeDeclaration__Group__0__Impl
	rule__SubtypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getSubtypeKeyword_0()); }

	Subtype 

{ after(grammarAccess.getSubtypeDeclarationAccess().getSubtypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeDeclaration__Group__1__Impl
	rule__SubtypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getNameAssignment_1()); }
(rule__SubtypeDeclaration__NameAssignment_1)
{ after(grammarAccess.getSubtypeDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeDeclaration__Group__2__Impl
	rule__SubtypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getIsKeyword_2()); }

	Is 

{ after(grammarAccess.getSubtypeDeclarationAccess().getIsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeDeclaration__Group__3__Impl
	rule__SubtypeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getTypeAssignment_3()); }
(rule__SubtypeDeclaration__TypeAssignment_3)
{ after(grammarAccess.getSubtypeDeclarationAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getSubtypeDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AliasDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__0__Impl
	rule__AliasDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getAliasKeyword_0()); }

	Alias 

{ after(grammarAccess.getAliasDeclarationAccess().getAliasKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__1__Impl
	rule__AliasDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getNameAssignment_1()); }
(rule__AliasDeclaration__NameAssignment_1)
{ after(grammarAccess.getAliasDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__2__Impl
	rule__AliasDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getGroup_2()); }
(rule__AliasDeclaration__Group_2__0)?
{ after(grammarAccess.getAliasDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__3__Impl
	rule__AliasDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getIsKeyword_3()); }

	Is 

{ after(grammarAccess.getAliasDeclarationAccess().getIsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__4__Impl
	rule__AliasDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getIsAssignment_4()); }
(rule__AliasDeclaration__IsAssignment_4)
{ after(grammarAccess.getAliasDeclarationAccess().getIsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_5()); }

	Semicolon 

{ after(grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AliasDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group_2__0__Impl
	rule__AliasDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getColonKeyword_2_0()); }

	Colon 

{ after(grammarAccess.getAliasDeclarationAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getAliasAssignment_2_1()); }
(rule__AliasDeclaration__AliasAssignment_2_1)
{ after(grammarAccess.getAliasDeclarationAccess().getAliasAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Range__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getSimpleExpressionParserRuleCall_0()); }
	ruleSimpleExpression
{ after(grammarAccess.getRangeAccess().getSimpleExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getGroup_1()); }
(rule__Range__Group_1__0)?
{ after(grammarAccess.getRangeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Range__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group_1__0__Impl
	rule__Range__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRangeExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getRangeAccess().getRangeExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group_1__1__Impl
	rule__Range__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getDirectionAssignment_1_1()); }
(rule__Range__DirectionAssignment_1_1)
{ after(grammarAccess.getRangeAccess().getDirectionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRightAssignment_1_2()); }
(rule__Range__RightAssignment_1_2)
{ after(grammarAccess.getRangeAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Aggregate__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group__0__Impl
	rule__Aggregate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getAggregateExpressionAction_0()); }
(

)
{ after(grammarAccess.getAggregateAccess().getAggregateExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group__1__Impl
	rule__Aggregate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group__2__Impl
	rule__Aggregate__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getGroup_2()); }
(rule__Aggregate__Group_2__0)?
{ after(grammarAccess.getAggregateAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_3()); }

	RightParenthesis 

{ after(grammarAccess.getAggregateAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Aggregate__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group_2__0__Impl
	rule__Aggregate__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getExpressionAssignment_2_0()); }
(rule__Aggregate__ExpressionAssignment_2_0)
{ after(grammarAccess.getAggregateAccess().getExpressionAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getGroup_2_1()); }
(rule__Aggregate__Group_2_1__0)*
{ after(grammarAccess.getAggregateAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Aggregate__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group_2_1__0__Impl
	rule__Aggregate__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getCommaKeyword_2_1_0()); }

	Comma 

{ after(grammarAccess.getAggregateAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Aggregate__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Aggregate__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getExpressionAssignment_2_1_1()); }
(rule__Aggregate__ExpressionAssignment_2_1_1)
{ after(grammarAccess.getAggregateAccess().getExpressionAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SliceName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceName__Group__0__Impl
	rule__SliceName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceNameAccess().getLeftParenthesisKeyword_0()); }

	LeftParenthesis 

{ after(grammarAccess.getSliceNameAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceName__Group__1__Impl
	rule__SliceName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceNameAccess().getRangeSpecificationParserRuleCall_1()); }
	ruleRangeSpecification
{ after(grammarAccess.getSliceNameAccess().getRangeSpecificationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SliceName__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SliceName__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SliceName__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSliceNameAccess().getRightParenthesisKeyword_2()); }

	RightParenthesis 

{ after(grammarAccess.getSliceNameAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RangeSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeSpecification__Group__0__Impl
	rule__RangeSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getRangeExpressionAction_0()); }
(

)
{ after(grammarAccess.getRangeSpecificationAccess().getRangeExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeSpecification__Group__1__Impl
	rule__RangeSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getGroup_1()); }
(rule__RangeSpecification__Group_1__0)
{ after(grammarAccess.getRangeSpecificationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeSpecification__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getRightAssignment_2()); }
(rule__RangeSpecification__RightAssignment_2)
{ after(grammarAccess.getRangeSpecificationAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RangeSpecification__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeSpecification__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getGroup_1_0()); }
(rule__RangeSpecification__Group_1_0__0)
{ after(grammarAccess.getRangeSpecificationAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RangeSpecification__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeSpecification__Group_1_0__0__Impl
	rule__RangeSpecification__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getLeftAssignment_1_0_0()); }
(rule__RangeSpecification__LeftAssignment_1_0_0)
{ after(grammarAccess.getRangeSpecificationAccess().getLeftAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeSpecification__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeSpecification__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getDirectionAssignment_1_0_1()); }
(rule__RangeSpecification__DirectionAssignment_1_0_1)
{ after(grammarAccess.getRangeSpecificationAccess().getDirectionAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtypeIndication__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0__0__Impl
	rule__SubtypeIndication__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0__1__Impl
	rule__SubtypeIndication__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getNameAssignment_0_1()); }
(rule__SubtypeIndication__NameAssignment_0_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0__2__Impl
	rule__SubtypeIndication__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getMarkAssignment_0_2()); }
(rule__SubtypeIndication__MarkAssignment_0_2)
{ after(grammarAccess.getSubtypeIndicationAccess().getMarkAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0__3__Impl
	rule__SubtypeIndication__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getConstraintAssignment_0_3()); }
(rule__SubtypeIndication__ConstraintAssignment_0_3)?
{ after(grammarAccess.getSubtypeIndicationAccess().getConstraintAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_0_4()); }
(rule__SubtypeIndication__Group_0_4__0)?
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SubtypeIndication__Group_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0_4__0__Impl
	rule__SubtypeIndication__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_0_4_0()); }

	Tolerance 

{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0_4__1__Impl
	rule__SubtypeIndication__Group_0_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceAssignment_0_4_1()); }
(rule__SubtypeIndication__ToleranceAssignment_0_4_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceAssignment_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_0_4_2()); }
(rule__SubtypeIndication__Group_0_4_2__0)?
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_0_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndication__Group_0_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0_4_2__0__Impl
	rule__SubtypeIndication__Group_0_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_0_4_2_0()); }

	Across 

{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_0_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0_4_2__1__Impl
	rule__SubtypeIndication__Group_0_4_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossAssignment_0_4_2_1()); }
(rule__SubtypeIndication__AcrossAssignment_0_4_2_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossAssignment_0_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_0_4_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_0_4_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_0_4_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_0_4_2_2()); }

	Through 

{ after(grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_0_4_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1__0__Impl
	rule__SubtypeIndication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1__1__Impl
	rule__SubtypeIndication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_1_1()); }
(rule__SubtypeIndication__Group_1_1__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_1_2()); }
(rule__SubtypeIndication__Group_1_2__0)?
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndication__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_1_1_0()); }
(rule__SubtypeIndication__Group_1_1_0__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SubtypeIndication__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_1_0__0__Impl
	rule__SubtypeIndication__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getMarkAssignment_1_1_0_0()); }
(rule__SubtypeIndication__MarkAssignment_1_1_0_0)
{ after(grammarAccess.getSubtypeIndicationAccess().getMarkAssignment_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getConstraintAssignment_1_1_0_1()); }
(rule__SubtypeIndication__ConstraintAssignment_1_1_0_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getConstraintAssignment_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtypeIndication__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_2__0__Impl
	rule__SubtypeIndication__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_1_2_0()); }

	Tolerance 

{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_2__1__Impl
	rule__SubtypeIndication__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceAssignment_1_2_1()); }
(rule__SubtypeIndication__ToleranceAssignment_1_2_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_1_2_2()); }
(rule__SubtypeIndication__Group_1_2_2__0)?
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndication__Group_1_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_2_2__0__Impl
	rule__SubtypeIndication__Group_1_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_1_2_2_0()); }

	Across 

{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_2_2__1__Impl
	rule__SubtypeIndication__Group_1_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossAssignment_1_2_2_1()); }
(rule__SubtypeIndication__AcrossAssignment_1_2_2_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossAssignment_1_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_1_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_1_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_1_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_1_2_2_2()); }

	Through 

{ after(grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_1_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndication__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2__0__Impl
	rule__SubtypeIndication__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2__1__Impl
	rule__SubtypeIndication__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_2_1()); }
(rule__SubtypeIndication__Group_2_1__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2__2__Impl
	rule__SubtypeIndication__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceAssignment_2_2()); }
(rule__SubtypeIndication__ToleranceAssignment_2_2)
{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_2_3()); }
(rule__SubtypeIndication__Group_2_3__0)?
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SubtypeIndication__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getGroup_2_1_0()); }
(rule__SubtypeIndication__Group_2_1_0__0)
{ after(grammarAccess.getSubtypeIndicationAccess().getGroup_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SubtypeIndication__Group_2_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2_1_0__0__Impl
	rule__SubtypeIndication__Group_2_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getMarkAssignment_2_1_0_0()); }
(rule__SubtypeIndication__MarkAssignment_2_1_0_0)
{ after(grammarAccess.getSubtypeIndicationAccess().getMarkAssignment_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_2_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_2_1_0_1()); }

	Tolerance 

{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtypeIndication__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2_3__0__Impl
	rule__SubtypeIndication__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_2_3_0()); }

	Across 

{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2_3__1__Impl
	rule__SubtypeIndication__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossAssignment_2_3_1()); }
(rule__SubtypeIndication__AcrossAssignment_2_3_1)
{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossAssignment_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndication__Group_2_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndication__Group_2_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__Group_2_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_2_3_2()); }

	Through 

{ after(grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_2_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndicationExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0__0__Impl
	rule__SubtypeIndicationExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0__1__Impl
	rule__SubtypeIndicationExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getNameAssignment_0_1()); }
(rule__SubtypeIndicationExpression__NameAssignment_0_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0__2__Impl
	rule__SubtypeIndicationExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkAssignment_0_2()); }
(rule__SubtypeIndicationExpression__MarkAssignment_0_2)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0__3__Impl
	rule__SubtypeIndicationExpression__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintAssignment_0_3()); }
(rule__SubtypeIndicationExpression__ConstraintAssignment_0_3)?
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_0_4()); }
(rule__SubtypeIndicationExpression__Group_0_4__0)?
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SubtypeIndicationExpression__Group_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0_4__0__Impl
	rule__SubtypeIndicationExpression__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_0_4_0()); }

	Tolerance 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0_4__1__Impl
	rule__SubtypeIndicationExpression__Group_0_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceAssignment_0_4_1()); }
(rule__SubtypeIndicationExpression__ToleranceAssignment_0_4_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceAssignment_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_0_4_2()); }
(rule__SubtypeIndicationExpression__Group_0_4_2__0)?
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_0_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndicationExpression__Group_0_4_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0_4_2__0__Impl
	rule__SubtypeIndicationExpression__Group_0_4_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0_4_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_0_4_2_0()); }

	Across 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_0_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0_4_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0_4_2__1__Impl
	rule__SubtypeIndicationExpression__Group_0_4_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0_4_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossAssignment_0_4_2_1()); }
(rule__SubtypeIndicationExpression__AcrossAssignment_0_4_2_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossAssignment_0_4_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_0_4_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_0_4_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_0_4_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_0_4_2_2()); }

	Through 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_0_4_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndicationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1__0__Impl
	rule__SubtypeIndicationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1__1__Impl
	rule__SubtypeIndicationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_1()); }
(rule__SubtypeIndicationExpression__Group_1_1__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_2()); }
(rule__SubtypeIndicationExpression__Group_1_2__0)?
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndicationExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_1_0()); }
(rule__SubtypeIndicationExpression__Group_1_1_0__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SubtypeIndicationExpression__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_1_0__0__Impl
	rule__SubtypeIndicationExpression__Group_1_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkAssignment_1_1_0_0()); }
(rule__SubtypeIndicationExpression__MarkAssignment_1_1_0_0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkAssignment_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintAssignment_1_1_0_1()); }
(rule__SubtypeIndicationExpression__ConstraintAssignment_1_1_0_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintAssignment_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtypeIndicationExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_2__0__Impl
	rule__SubtypeIndicationExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_1_2_0()); }

	Tolerance 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_2__1__Impl
	rule__SubtypeIndicationExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceAssignment_1_2_1()); }
(rule__SubtypeIndicationExpression__ToleranceAssignment_1_2_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_2_2()); }
(rule__SubtypeIndicationExpression__Group_1_2_2__0)?
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndicationExpression__Group_1_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_2_2__0__Impl
	rule__SubtypeIndicationExpression__Group_1_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_1_2_2_0()); }

	Across 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_2_2__1__Impl
	rule__SubtypeIndicationExpression__Group_1_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossAssignment_1_2_2_1()); }
(rule__SubtypeIndicationExpression__AcrossAssignment_1_2_2_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossAssignment_1_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_1_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_1_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_1_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_1_2_2_2()); }

	Through 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_1_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubtypeIndicationExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2__0__Impl
	rule__SubtypeIndicationExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2__1__Impl
	rule__SubtypeIndicationExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2_1()); }
(rule__SubtypeIndicationExpression__Group_2_1__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2__2__Impl
	rule__SubtypeIndicationExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceAssignment_2_2()); }
(rule__SubtypeIndicationExpression__ToleranceAssignment_2_2)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2_3()); }
(rule__SubtypeIndicationExpression__Group_2_3__0)?
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SubtypeIndicationExpression__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2_1_0()); }
(rule__SubtypeIndicationExpression__Group_2_1_0__0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getGroup_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SubtypeIndicationExpression__Group_2_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2_1_0__0__Impl
	rule__SubtypeIndicationExpression__Group_2_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkAssignment_2_1_0_0()); }
(rule__SubtypeIndicationExpression__MarkAssignment_2_1_0_0)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkAssignment_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_2_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_2_1_0_1()); }

	Tolerance 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_2_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubtypeIndicationExpression__Group_2_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2_3__0__Impl
	rule__SubtypeIndicationExpression__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_2_3_0()); }

	Across 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_2_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2_3__1__Impl
	rule__SubtypeIndicationExpression__Group_2_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossAssignment_2_3_1()); }
(rule__SubtypeIndicationExpression__AcrossAssignment_2_3_1)
{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossAssignment_2_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubtypeIndicationExpression__Group_2_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubtypeIndicationExpression__Group_2_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__Group_2_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_2_3_2()); }

	Through 

{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_2_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubnatureIndication__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0__0__Impl
	rule__SubnatureIndication__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getSubnatureIndicationExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getSubnatureIndicationAccess().getSubnatureIndicationExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0__1__Impl
	rule__SubnatureIndication__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_0_1()); }
(rule__SubnatureIndication__Group_0_1__0)
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_0_2()); }
(rule__SubnatureIndication__Group_0_2__0)?
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubnatureIndication__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_0_1_0()); }
(rule__SubnatureIndication__Group_0_1_0__0)
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SubnatureIndication__Group_0_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_1_0__0__Impl
	rule__SubnatureIndication__Group_0_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getMarkAssignment_0_1_0_0()); }
(rule__SubnatureIndication__MarkAssignment_0_1_0_0)
{ after(grammarAccess.getSubnatureIndicationAccess().getMarkAssignment_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getConstraintAssignment_0_1_0_1()); }
(rule__SubnatureIndication__ConstraintAssignment_0_1_0_1)
{ after(grammarAccess.getSubnatureIndicationAccess().getConstraintAssignment_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubnatureIndication__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_2__0__Impl
	rule__SubnatureIndication__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getToleranceKeyword_0_2_0()); }

	Tolerance 

{ after(grammarAccess.getSubnatureIndicationAccess().getToleranceKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_2__1__Impl
	rule__SubnatureIndication__Group_0_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getToleranceAssignment_0_2_1()); }
(rule__SubnatureIndication__ToleranceAssignment_0_2_1)
{ after(grammarAccess.getSubnatureIndicationAccess().getToleranceAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_0_2_2()); }
(rule__SubnatureIndication__Group_0_2_2__0)?
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_0_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubnatureIndication__Group_0_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_2_2__0__Impl
	rule__SubnatureIndication__Group_0_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAcrossKeyword_0_2_2_0()); }

	Across 

{ after(grammarAccess.getSubnatureIndicationAccess().getAcrossKeyword_0_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_2_2__1__Impl
	rule__SubnatureIndication__Group_0_2_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAcrossAssignment_0_2_2_1()); }
(rule__SubnatureIndication__AcrossAssignment_0_2_2_1)
{ after(grammarAccess.getSubnatureIndicationAccess().getAcrossAssignment_0_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_0_2_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_0_2_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_0_2_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getThroughKeyword_0_2_2_2()); }

	Through 

{ after(grammarAccess.getSubnatureIndicationAccess().getThroughKeyword_0_2_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SubnatureIndication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1__0__Impl
	rule__SubnatureIndication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getSubnatureIndicationExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getSubnatureIndicationAccess().getSubnatureIndicationExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1__1__Impl
	rule__SubnatureIndication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getMarkAssignment_1_1()); }
(rule__SubnatureIndication__MarkAssignment_1_1)
{ after(grammarAccess.getSubnatureIndicationAccess().getMarkAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1__2__Impl
	rule__SubnatureIndication__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getToleranceKeyword_1_2()); }

	Tolerance 

{ after(grammarAccess.getSubnatureIndicationAccess().getToleranceKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1__3__Impl
	rule__SubnatureIndication__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getToleranceAssignment_1_3()); }
(rule__SubnatureIndication__ToleranceAssignment_1_3)
{ after(grammarAccess.getSubnatureIndicationAccess().getToleranceAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getGroup_1_4()); }
(rule__SubnatureIndication__Group_1_4__0)?
{ after(grammarAccess.getSubnatureIndicationAccess().getGroup_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SubnatureIndication__Group_1_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1_4__0__Impl
	rule__SubnatureIndication__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAcrossKeyword_1_4_0()); }

	Across 

{ after(grammarAccess.getSubnatureIndicationAccess().getAcrossKeyword_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_1_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1_4__1__Impl
	rule__SubnatureIndication__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAcrossAssignment_1_4_1()); }
(rule__SubnatureIndication__AcrossAssignment_1_4_1)
{ after(grammarAccess.getSubnatureIndicationAccess().getAcrossAssignment_1_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubnatureIndication__Group_1_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubnatureIndication__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__Group_1_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getThroughKeyword_1_4_2()); }

	Through 

{ after(grammarAccess.getSubnatureIndicationAccess().getThroughKeyword_1_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TerminalDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalDeclaration__Group__0__Impl
	rule__TerminalDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getTerminalKeyword_0()); }

	Terminal 

{ after(grammarAccess.getTerminalDeclarationAccess().getTerminalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalDeclaration__Group__1__Impl
	rule__TerminalDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getNameAssignment_1()); }
(rule__TerminalDeclaration__NameAssignment_1)
{ after(grammarAccess.getTerminalDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalDeclaration__Group__2__Impl
	rule__TerminalDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getColonKeyword_2()); }

	Colon 

{ after(grammarAccess.getTerminalDeclarationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalDeclaration__Group__3__Impl
	rule__TerminalDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getNatureAssignment_3()); }
(rule__TerminalDeclaration__NatureAssignment_3)
{ after(grammarAccess.getTerminalDeclarationAccess().getNatureAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getTerminalDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TypeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__0__Impl
	rule__TypeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0()); }

	Type 

{ after(grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__1__Impl
	rule__TypeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1()); }
(rule__TypeDeclaration__NameAssignment_1)
{ after(grammarAccess.getTypeDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__2__Impl
	rule__TypeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getGroup_2()); }
(rule__TypeDeclaration__Group_2__0)?
{ after(grammarAccess.getTypeDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypeDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_2__0__Impl
	rule__TypeDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getIsKeyword_2_0()); }

	Is 

{ after(grammarAccess.getTypeDeclarationAccess().getIsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getIsAssignment_2_1()); }
(rule__TypeDeclaration__IsAssignment_2_1)
{ after(grammarAccess.getTypeDeclarationAccess().getIsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeTypeDefinition__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_0__0__Impl
	rule__RangeTypeDefinition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getRangeTypeDefinitionAction_0_0()); }
(

)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getRangeTypeDefinitionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeTypeDefinition__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_0__1__Impl
	rule__RangeTypeDefinition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getRangeKeyword_0_1()); }

	Range 

{ after(grammarAccess.getRangeTypeDefinitionAccess().getRangeKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeTypeDefinition__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_0__2__Impl
	rule__RangeTypeDefinition__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getLeftAssignment_0_2()); }
(rule__RangeTypeDefinition__LeftAssignment_0_2)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getLeftAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeTypeDefinition__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_0__3__Impl
	rule__RangeTypeDefinition__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getDirectionAssignment_0_3()); }
(rule__RangeTypeDefinition__DirectionAssignment_0_3)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getDirectionAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeTypeDefinition__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getRightAssignment_0_4()); }
(rule__RangeTypeDefinition__RightAssignment_0_4)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getRightAssignment_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RangeTypeDefinition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_1__0__Impl
	rule__RangeTypeDefinition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getRangeTypeDefinitionAction_1_0()); }
(

)
{ after(grammarAccess.getRangeTypeDefinitionAccess().getRangeTypeDefinitionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeTypeDefinition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_1__1__Impl
	rule__RangeTypeDefinition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getRangeKeyword_1_1()); }

	Range 

{ after(grammarAccess.getRangeTypeDefinitionAccess().getRangeKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeTypeDefinition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeTypeDefinition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_1_2()); }

	LessThanSignGreaterThanSign 

{ after(grammarAccess.getRangeTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PhysicalTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__0__Impl
	rule__PhysicalTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getGroup_0()); }
(rule__PhysicalTypeDefinition__Group_0__0)
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__1__Impl
	rule__PhysicalTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getPrimaryAssignment_1()); }
(rule__PhysicalTypeDefinition__PrimaryAssignment_1)
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getPrimaryAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__2__Impl
	rule__PhysicalTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getSemicolonKeyword_2()); }

	Semicolon 

{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__3__Impl
	rule__PhysicalTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getSecondaryAssignment_3()); }
(rule__PhysicalTypeDefinition__SecondaryAssignment_3)*
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getSecondaryAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__4__Impl
	rule__PhysicalTypeDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getEndKeyword_4()); }

	End 

{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__5__Impl
	rule__PhysicalTypeDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getUnitsKeyword_5()); }

	Units 

{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getUnitsKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getIdentifierParserRuleCall_6()); }
(	ruleIdentifier)?
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getIdentifierParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__PhysicalTypeDefinition__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getGroup_0_0()); }
(rule__PhysicalTypeDefinition__Group_0_0__0)
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getGroup_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PhysicalTypeDefinition__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group_0_0__0__Impl
	rule__PhysicalTypeDefinition__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeKeyword_0_0_0()); }

	Range 

{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group_0_0__1__Impl
	rule__PhysicalTypeDefinition__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeAssignment_0_0_1()); }
(rule__PhysicalTypeDefinition__RangeAssignment_0_0_1)
{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinition__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinition__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getUnitsKeyword_0_0_2()); }

	Units 

{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getUnitsKeyword_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PhysicalTypeDefinitionSecondary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinitionSecondary__Group__0__Impl
	rule__PhysicalTypeDefinitionSecondary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNameAssignment_0()); }
(rule__PhysicalTypeDefinitionSecondary__NameAssignment_0)
{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinitionSecondary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinitionSecondary__Group__1__Impl
	rule__PhysicalTypeDefinitionSecondary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getEqualsSignKeyword_1()); }

	EqualsSign 

{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinitionSecondary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinitionSecondary__Group__2__Impl
	rule__PhysicalTypeDefinitionSecondary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNumberAssignment_2()); }
(rule__PhysicalTypeDefinitionSecondary__NumberAssignment_2)?
{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNumberAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinitionSecondary__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinitionSecondary__Group__3__Impl
	rule__PhysicalTypeDefinitionSecondary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getOfAssignment_3()); }
(rule__PhysicalTypeDefinitionSecondary__OfAssignment_3)
{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getOfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PhysicalTypeDefinitionSecondary__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PhysicalTypeDefinitionSecondary__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getSemicolonKeyword_4()); }

	Semicolon 

{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__UnconstrainedArrayTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__0__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getArrayKeyword_0()); }

	Array 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__1__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__2__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexAssignment_2()); }
(rule__UnconstrainedArrayTypeDefinition__IndexAssignment_2)
{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__3__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRangeKeyword_3()); }

	Range 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRangeKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__4__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4()); }

	LessThanSignGreaterThanSign 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__5__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getGroup_5()); }
(rule__UnconstrainedArrayTypeDefinition__Group_5__0)*
{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__6__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRightParenthesisKeyword_6()); }

	RightParenthesis 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__7__Impl
	rule__UnconstrainedArrayTypeDefinition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getOfKeyword_7()); }

	Of 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getOfKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getTypeAssignment_8()); }
(rule__UnconstrainedArrayTypeDefinition__TypeAssignment_8)
{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getTypeAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__UnconstrainedArrayTypeDefinition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group_5__0__Impl
	rule__UnconstrainedArrayTypeDefinition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getCommaKeyword_5_0()); }

	Comma 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group_5__1__Impl
	rule__UnconstrainedArrayTypeDefinition__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexAssignment_5_1()); }
(rule__UnconstrainedArrayTypeDefinition__IndexAssignment_5_1)
{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group_5__2__Impl
	rule__UnconstrainedArrayTypeDefinition__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRangeKeyword_5_2()); }

	Range 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRangeKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayTypeDefinition__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayTypeDefinition__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_5_3()); }

	LessThanSignGreaterThanSign 

{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstrainedArrayTypeDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayTypeDefinition__Group__0__Impl
	rule__ConstrainedArrayTypeDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayTypeDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getArrayKeyword_0()); }

	Array 

{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainedArrayTypeDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayTypeDefinition__Group__1__Impl
	rule__ConstrainedArrayTypeDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayTypeDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getConstraintAssignment_1()); }
(rule__ConstrainedArrayTypeDefinition__ConstraintAssignment_1)
{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainedArrayTypeDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayTypeDefinition__Group__2__Impl
	rule__ConstrainedArrayTypeDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayTypeDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getOfKeyword_2()); }

	Of 

{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainedArrayTypeDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayTypeDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayTypeDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getTypeAssignment_3()); }
(rule__ConstrainedArrayTypeDefinition__TypeAssignment_3)
{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnconstrainedArrayNatureDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__0__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getArrayKeyword_0()); }

	Array 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__1__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLeftParenthesisKeyword_1()); }

	LeftParenthesis 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__2__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexAssignment_2()); }
(rule__UnconstrainedArrayNatureDefinition__IndexAssignment_2)
{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__3__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRangeKeyword_3()); }

	Range 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRangeKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__4__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4()); }

	LessThanSignGreaterThanSign 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__5__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getGroup_5()); }
(rule__UnconstrainedArrayNatureDefinition__Group_5__0)*
{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__6__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRightParenthesisKeyword_6()); }

	RightParenthesis 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__7__Impl
	rule__UnconstrainedArrayNatureDefinition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getOfKeyword_7()); }

	Of 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getOfKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getNatureAssignment_8()); }
(rule__UnconstrainedArrayNatureDefinition__NatureAssignment_8)
{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getNatureAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__UnconstrainedArrayNatureDefinition__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group_5__0__Impl
	rule__UnconstrainedArrayNatureDefinition__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getCommaKeyword_5_0()); }

	Comma 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group_5__1__Impl
	rule__UnconstrainedArrayNatureDefinition__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexAssignment_5_1()); }
(rule__UnconstrainedArrayNatureDefinition__IndexAssignment_5_1)
{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group_5__2__Impl
	rule__UnconstrainedArrayNatureDefinition__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRangeKeyword_5_2()); }

	Range 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRangeKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnconstrainedArrayNatureDefinition__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnconstrainedArrayNatureDefinition__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLessThanSignGreaterThanSignKeyword_5_3()); }

	LessThanSignGreaterThanSign 

{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLessThanSignGreaterThanSignKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstrainedArrayNatureDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayNatureDefinition__Group__0__Impl
	rule__ConstrainedArrayNatureDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayNatureDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getArrayKeyword_0()); }

	Array 

{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getArrayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainedArrayNatureDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayNatureDefinition__Group__1__Impl
	rule__ConstrainedArrayNatureDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayNatureDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getConstraintAssignment_1()); }
(rule__ConstrainedArrayNatureDefinition__ConstraintAssignment_1)
{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getConstraintAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainedArrayNatureDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayNatureDefinition__Group__2__Impl
	rule__ConstrainedArrayNatureDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayNatureDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getOfKeyword_2()); }

	Of 

{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getOfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstrainedArrayNatureDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstrainedArrayNatureDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayNatureDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getNatureAssignment_3()); }
(rule__ConstrainedArrayNatureDefinition__NatureAssignment_3)
{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getNatureAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__WaitStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__0__Impl
	rule__WaitStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getWaitStatementAction_0()); }
(

)
{ after(grammarAccess.getWaitStatementAccess().getWaitStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__1__Impl
	rule__WaitStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getGroup_1()); }
(rule__WaitStatement__Group_1__0)?
{ after(grammarAccess.getWaitStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__2__Impl
	rule__WaitStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getWaitKeyword_2()); }

	Wait 

{ after(grammarAccess.getWaitStatementAccess().getWaitKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__3__Impl
	rule__WaitStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getGroup_3()); }
(rule__WaitStatement__Group_3__0)?
{ after(grammarAccess.getWaitStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__4__Impl
	rule__WaitStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getGroup_4()); }
(rule__WaitStatement__Group_4__0)?
{ after(grammarAccess.getWaitStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__5__Impl
	rule__WaitStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getGroup_5()); }
(rule__WaitStatement__Group_5__0)?
{ after(grammarAccess.getWaitStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getSemicolonKeyword_6()); }

	Semicolon 

{ after(grammarAccess.getWaitStatementAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__WaitStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_1__0__Impl
	rule__WaitStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getLabelAssignment_1_0()); }
(rule__WaitStatement__LabelAssignment_1_0)
{ after(grammarAccess.getWaitStatementAccess().getLabelAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getColonKeyword_1_1()); }

	Colon 

{ after(grammarAccess.getWaitStatementAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WaitStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_3__0__Impl
	rule__WaitStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getOnKeyword_3_0()); }

	On 

{ after(grammarAccess.getWaitStatementAccess().getOnKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getSensitivityAssignment_3_1()); }
(rule__WaitStatement__SensitivityAssignment_3_1)
{ after(grammarAccess.getWaitStatementAccess().getSensitivityAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WaitStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_4__0__Impl
	rule__WaitStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getUntilKeyword_4_0()); }

	Until 

{ after(grammarAccess.getWaitStatementAccess().getUntilKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getUntilAssignment_4_1()); }
(rule__WaitStatement__UntilAssignment_4_1)
{ after(grammarAccess.getWaitStatementAccess().getUntilAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WaitStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_5__0__Impl
	rule__WaitStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getForKeyword_5_0()); }

	For 

{ after(grammarAccess.getWaitStatementAccess().getForKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WaitStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WaitStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getTimeAssignment_5_1()); }
(rule__WaitStatement__TimeAssignment_5_1)
{ after(grammarAccess.getWaitStatementAccess().getTimeAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Waveform__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveform__Group__0__Impl
	rule__Waveform__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveform__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getWaveformAccess().getExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waveform__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveform__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveform__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformAccess().getGroup_1()); }
(rule__Waveform__Group_1__0)?
{ after(grammarAccess.getWaveformAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Waveform__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveform__Group_1__0__Impl
	rule__Waveform__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveform__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformAccess().getWaveformExpressionExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getWaveformAccess().getWaveformExpressionExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waveform__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveform__Group_1__1__Impl
	rule__Waveform__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveform__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformAccess().getAfterKeyword_1_1()); }

	After 

{ after(grammarAccess.getWaveformAccess().getAfterKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Waveform__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Waveform__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Waveform__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformAccess().getAfterAssignment_1_2()); }
(rule__Waveform__AfterAssignment_1_2)
{ after(grammarAccess.getWaveformAccess().getAfterAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NullExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullExpression__Group__0__Impl
	rule__NullExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0()); }
(

)
{ after(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NullExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NullExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullExpressionAccess().getNullKeyword_1()); }

	Null 

{ after(grammarAccess.getNullExpressionAccess().getNullKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BitStringName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitStringName__Group__0__Impl
	rule__BitStringName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BitStringName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitStringNameAccess().getBitStringExpressionAction_0()); }
(

)
{ after(grammarAccess.getBitStringNameAccess().getBitStringExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BitStringName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BitStringName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BitStringName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitStringNameAccess().getValueAssignment_1()); }
(rule__BitStringName__ValueAssignment_1)
{ after(grammarAccess.getBitStringNameAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ValueExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_0__0__Impl
	rule__ValueExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getUnitValueExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getValueExpressionAccess().getUnitValueExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_0__1__Impl
	rule__ValueExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getValueAssignment_0_1()); }
(rule__ValueExpression__ValueAssignment_0_1)
{ after(grammarAccess.getValueExpressionAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getUnitAssignment_0_2()); }
(rule__ValueExpression__UnitAssignment_0_2)
{ after(grammarAccess.getValueExpressionAccess().getUnitAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ValueExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_1__0__Impl
	rule__ValueExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getValueExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getValueExpressionAccess().getValueExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getValueAssignment_1_1()); }
(rule__ValueExpression__ValueAssignment_1_1)
{ after(grammarAccess.getValueExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__DesignAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDesignDesignUnitParserRuleCall_0()); }
	ruleDesignUnit{ after(grammarAccess.getModelAccess().getDesignDesignUnitParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__LibraryAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getLibraryIdentifierParserRuleCall_0_0_1_0()); }
	ruleIdentifier{ after(grammarAccess.getDesignUnitAccess().getLibraryIdentifierParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__LibraryAssignment_0_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getLibraryIdentifierParserRuleCall_0_0_2_1_0()); }
	ruleIdentifier{ after(grammarAccess.getDesignUnitAccess().getLibraryIdentifierParserRuleCall_0_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__UseAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getUseNameParserRuleCall_0_1_1_0()); }
	ruleName{ after(grammarAccess.getDesignUnitAccess().getUseNameParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__UseAssignment_0_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getUseNameParserRuleCall_0_1_2_1_0()); }
	ruleName{ after(grammarAccess.getDesignUnitAccess().getUseNameParserRuleCall_0_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DesignUnit__ModuleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDesignUnitAccess().getModuleModuleParserRuleCall_1_0()); }
	ruleModule{ after(grammarAccess.getDesignUnitAccess().getModuleModuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getArchitectureAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__OfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getOfNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getArchitectureAccess().getOfNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__DeclarationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getDeclarationBlockDeclarativeItemParserRuleCall_5_0()); }
	ruleBlockDeclarativeItem{ after(grammarAccess.getArchitectureAccess().getDeclarationBlockDeclarativeItemParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Architecture__StatementAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArchitectureAccess().getStatementArchitectureStatementParserRuleCall_7_0()); }
	ruleArchitectureStatement{ after(grammarAccess.getArchitectureAccess().getStatementArchitectureStatementParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getNameIdentifierNameParserRuleCall_2_0()); }
	ruleIdentifierName{ after(grammarAccess.getPackageBodyAccess().getNameIdentifierNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageBody__DeclarationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageBodyAccess().getDeclarationPackageBodyDeclarativeItemParserRuleCall_4_0()); }
	rulePackageBodyDeclarativeItem{ after(grammarAccess.getPackageBodyAccess().getDeclarationPackageBodyDeclarativeItemParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getPackageAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__DeclarationAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getDeclarationPackageDeclarativeItemParserRuleCall_3_0()); }
	rulePackageDeclarativeItem{ after(grammarAccess.getPackageAccess().getDeclarationPackageDeclarativeItemParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getEntityAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__GenericAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getGenericGenericsParserRuleCall_3_0()); }
	ruleGenerics{ after(grammarAccess.getEntityAccess().getGenericGenericsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__PortAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getPortPortsParserRuleCall_4_0()); }
	rulePorts{ after(grammarAccess.getEntityAccess().getPortPortsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__DeclarationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getDeclarationEntityDeclarativeItemParserRuleCall_5_0()); }
	ruleEntityDeclarativeItem{ after(grammarAccess.getEntityAccess().getDeclarationEntityDeclarativeItemParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__StatementAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getStatementEntityStatementParserRuleCall_6_1_0()); }
	ruleEntityStatement{ after(grammarAccess.getEntityAccess().getStatementEntityStatementParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getConfigurationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__OfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getOfNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getConfigurationAccess().getOfNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__DeclarationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getDeclarationConfigurationDeclarativeItemParserRuleCall_5_0()); }
	ruleConfigurationDeclarativeItem{ after(grammarAccess.getConfigurationAccess().getDeclarationConfigurationDeclarativeItemParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__BlockAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getBlockBlockConfigurationParserRuleCall_6_0()); }
	ruleBlockConfiguration{ after(grammarAccess.getConfigurationAccess().getBlockBlockConfigurationParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseClauseDeclaration__UseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseClauseDeclarationAccess().getUseMultiNameParserRuleCall_1_0()); }
	ruleMultiName{ after(grammarAccess.getUseClauseDeclarationAccess().getUseMultiNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessTypeDefinition__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_1_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getAccessTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getAssertionStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssertionStatementAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__ReportAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getReportExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getAssertionStatementAccess().getReportExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssertionStatement__SeverityAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssertionStatementAccess().getSeverityExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getAssertionStatementAccess().getSeverityExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getConcurrentAssertionStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__PostponedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getPostponedPostponedKeyword_1_0()); }
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getPostponedPostponedKeyword_1_0()); }

	Postponed 

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

{ after(grammarAccess.getConcurrentAssertionStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getConditionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getConcurrentAssertionStatementAccess().getConditionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__ReportAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getReportExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getConcurrentAssertionStatementAccess().getReportExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentAssertionStatement__SeverityAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ChoiceAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getChoiceChoicesParserRuleCall_0_1_0()); }
	ruleChoices{ after(grammarAccess.getParameterAccess().getChoiceChoicesParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ExpressionAssignment_0_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_0_3_0_0()); }
	ruleExpression{ after(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_0_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Choices__ExpressionAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoicesAccess().getExpressionChoiceParserRuleCall_1_1_1_0()); }
	ruleChoice{ after(grammarAccess.getChoicesAccess().getExpressionChoiceParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getAttributeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDeclarationAccess().getTypeIdentifierNameParserRuleCall_3_0()); }
	ruleIdentifierName{ after(grammarAccess.getAttributeDeclarationAccess().getTypeIdentifierNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getNameAttributeDesignatorParserRuleCall_1_0()); }
	ruleAttributeDesignator{ after(grammarAccess.getAttributeSpecificationAccess().getNameAttributeDesignatorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__EntityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getEntityAttributeEntityParserRuleCall_3_0()); }
	ruleAttributeEntity{ after(grammarAccess.getAttributeSpecificationAccess().getEntityAttributeEntityParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__ClassAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getClassEntityClassEnumRuleCall_5_0()); }
	ruleEntityClass{ after(grammarAccess.getAttributeSpecificationAccess().getClassEntityClassEnumRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeSpecification__IsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeSpecificationAccess().getIsExpressionParserRuleCall_7_0()); }
	ruleExpression{ after(grammarAccess.getAttributeSpecificationAccess().getIsExpressionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueRangeKeyword_1_1_0()); }
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueRangeKeyword_1_1_0()); }

	Range 

{ after(grammarAccess.getAttributeDesignatorAccess().getValueRangeKeyword_1_1_0()); }
)

{ after(grammarAccess.getAttributeDesignatorAccess().getValueRangeKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAcrossKeyword_2_1_0()); }
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueAcrossKeyword_2_1_0()); }

	Across 

{ after(grammarAccess.getAttributeDesignatorAccess().getValueAcrossKeyword_2_1_0()); }
)

{ after(grammarAccess.getAttributeDesignatorAccess().getValueAcrossKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueThroughKeyword_3_1_0()); }
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueThroughKeyword_3_1_0()); }

	Through 

{ after(grammarAccess.getAttributeDesignatorAccess().getValueThroughKeyword_3_1_0()); }
)

{ after(grammarAccess.getAttributeDesignatorAccess().getValueThroughKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__ValueAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueReferenceKeyword_4_1_0()); }
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueReferenceKeyword_4_1_0()); }

	Reference 

{ after(grammarAccess.getAttributeDesignatorAccess().getValueReferenceKeyword_4_1_0()); }
)

{ after(grammarAccess.getAttributeDesignatorAccess().getValueReferenceKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeDesignator__ValueAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueToleranceKeyword_5_1_0()); }
(
{ before(grammarAccess.getAttributeDesignatorAccess().getValueToleranceKeyword_5_1_0()); }

	Tolerance 

{ after(grammarAccess.getAttributeDesignatorAccess().getValueToleranceKeyword_5_1_0()); }
)

{ after(grammarAccess.getAttributeDesignatorAccess().getValueToleranceKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntity__NameAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityAccess().getNameAttributeEntityDesignatorParserRuleCall_1_1_1_0()); }
	ruleAttributeEntityDesignator{ after(grammarAccess.getAttributeEntityAccess().getNameAttributeEntityDesignatorParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__SignatureAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_0_1_1_0()); }
	ruleSignature{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__SignatureAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_1_1_1_0()); }
	ruleSignature{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeEntityDesignator__SignatureAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_2_1_1_0()); }
	ruleSignature{ after(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameSignature__SignatureAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameSignatureAccess().getSignatureSignatureParserRuleCall_1_1_0()); }
	ruleSignature{ after(grammarAccess.getNameSignatureAccess().getSignatureSignatureParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getNameNameParserRuleCall_1_0()); }
	ruleName{ after(grammarAccess.getBlockConfigurationAccess().getNameNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__UseAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getUseNameParserRuleCall_2_1_0()); }
	ruleName{ after(grammarAccess.getBlockConfigurationAccess().getUseNameParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__UseAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getUseNameParserRuleCall_2_2_1_0()); }
	ruleName{ after(grammarAccess.getBlockConfigurationAccess().getUseNameParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockConfiguration__ItemAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockConfigurationAccess().getItemConfigurationItemParserRuleCall_3_0()); }
	ruleConfigurationItem{ after(grammarAccess.getBlockConfigurationAccess().getItemConfigurationItemParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__LabelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLabelLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getBlockStatementAccess().getLabelLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__GuardAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGuardExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getBlockStatementAccess().getGuardExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__GenericAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGenericGenericsParserRuleCall_5_0_0()); }
	ruleGenerics{ after(grammarAccess.getBlockStatementAccess().getGenericGenericsParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__GenericMapAssignment_5_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getGenericMapGenericMapsParserRuleCall_5_1_0_0()); }
	ruleGenericMaps{ after(grammarAccess.getBlockStatementAccess().getGenericMapGenericMapsParserRuleCall_5_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__PortAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getPortPortsParserRuleCall_6_0_0()); }
	rulePorts{ after(grammarAccess.getBlockStatementAccess().getPortPortsParserRuleCall_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__PortMapAssignment_6_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getPortMapPortMapsParserRuleCall_6_1_0_0()); }
	rulePortMaps{ after(grammarAccess.getBlockStatementAccess().getPortMapPortMapsParserRuleCall_6_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__DeclarationAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getDeclarationBlockDeclarativeItemParserRuleCall_7_0()); }
	ruleBlockDeclarativeItem{ after(grammarAccess.getBlockStatementAccess().getDeclarationBlockDeclarativeItemParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__StatementAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getStatementArchitectureStatementParserRuleCall_9_0()); }
	ruleArchitectureStatement{ after(grammarAccess.getBlockStatementAccess().getStatementArchitectureStatementParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getBreakStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__BreakAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_0_0()); }
	ruleBreakStatementItem{ after(grammarAccess.getBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__BreakAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_1_1_0()); }
	ruleBreakStatementItem{ after(grammarAccess.getBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__WhenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getBreakStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getConcurrentBreakStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__BreakAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_0_0()); }
	ruleBreakStatementItem{ after(grammarAccess.getConcurrentBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__BreakAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_1_1_0()); }
	ruleBreakStatementItem{ after(grammarAccess.getConcurrentBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__SensitivityAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getSensitivityMultiNameParserRuleCall_4_1_0()); }
	ruleMultiName{ after(grammarAccess.getConcurrentBreakStatementAccess().getSensitivityMultiNameParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentBreakStatement__WhenAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentBreakStatementAccess().getWhenExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getConcurrentBreakStatementAccess().getWhenExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getNameNameParserRuleCall_0_1_0()); }
	ruleName{ after(grammarAccess.getBreakStatementItemAccess().getNameNameParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__UseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getUseNameParserRuleCall_1_0()); }
	ruleName{ after(grammarAccess.getBreakStatementItemAccess().getUseNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatementItem__ArrowAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementItemAccess().getArrowExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getBreakStatementItemAccess().getArrowExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getCaseStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__CaseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getCaseExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getCaseStatementAccess().getCaseExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseStatement__WhenAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseStatementAccess().getWhenCaseAlternativeParserRuleCall_4_0()); }
	ruleCaseAlternative{ after(grammarAccess.getCaseStatementAccess().getWhenCaseAlternativeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternative__ChoiceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAlternativeAccess().getChoiceChoicesParserRuleCall_1_0()); }
	ruleChoices{ after(grammarAccess.getCaseAlternativeAccess().getChoiceChoicesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseAlternative__StatementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAlternativeAccess().getStatementSequentialStatementParserRuleCall_3_0()); }
	ruleSequentialStatement{ after(grammarAccess.getCaseAlternativeAccess().getStatementSequentialStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__ListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getListInstantiationListParserRuleCall_1_0()); }
	ruleInstantiationList{ after(grammarAccess.getComponentConfigurationAccess().getListInstantiationListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__ComponentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getComponentNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getComponentConfigurationAccess().getComponentNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__EntityAssignment_4_0_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getEntityNameParserRuleCall_4_0_1_0_1_0()); }
	ruleName{ after(grammarAccess.getComponentConfigurationAccess().getEntityNameParserRuleCall_4_0_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__ConfigurationAssignment_4_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getConfigurationNameParserRuleCall_4_0_1_1_1_0()); }
	ruleName{ after(grammarAccess.getComponentConfigurationAccess().getConfigurationNameParserRuleCall_4_0_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__GenericMapAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getGenericMapGenericMapsParserRuleCall_4_1_0()); }
	ruleGenericMaps{ after(grammarAccess.getComponentConfigurationAccess().getGenericMapGenericMapsParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__PortMapAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getPortMapPortMapsParserRuleCall_4_2_0()); }
	rulePortMaps{ after(grammarAccess.getComponentConfigurationAccess().getPortMapPortMapsParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentConfiguration__BlockAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentConfigurationAccess().getBlockBlockConfigurationParserRuleCall_5_0()); }
	ruleBlockConfiguration{ after(grammarAccess.getComponentConfigurationAccess().getBlockBlockConfigurationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getComponentAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__GenericAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getGenericGenericsParserRuleCall_3_0()); }
	ruleGenerics{ after(grammarAccess.getComponentAccess().getGenericGenericsParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Component__PortAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getPortPortsParserRuleCall_4_0()); }
	rulePorts{ after(grammarAccess.getComponentAccess().getPortPortsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__LabelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getComponentInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getComponentInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__GenericMapAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); }
	ruleGenericMaps{ after(grammarAccess.getComponentInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationStatement__PortMapAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); }
	rulePortMaps{ after(grammarAccess.getComponentInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__LabelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getEntityInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getEntityInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__GenericMapAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); }
	ruleGenericMaps{ after(grammarAccess.getEntityInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityInstantiationStatement__PortMapAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); }
	rulePortMaps{ after(grammarAccess.getEntityInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__LabelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__GenericMapAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); }
	ruleGenericMaps{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationInstantiationStatement__PortMapAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); }
	rulePortMaps{ after(grammarAccess.getConfigurationInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__PostponedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }

	Postponed 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__SelectedAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectedExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectedExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__TargetAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_5_0()); }
	ruleTarget{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__GuardedAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedGuardedKeyword_7_0()); }
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedGuardedKeyword_7_0()); }

	Guarded 

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedGuardedKeyword_7_0()); }
)

{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedGuardedKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__DelayAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_8_0()); }
	ruleDelayMechanism{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__WaveformAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_9_0()); }
	ruleConditionalWaveform{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedSignalAssignmentStatement__WaveformAssignment_10_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_10_1_0()); }
	ruleConditionalWaveform{ after(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_10_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__PostponedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }

	Postponed 

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__TargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_2_0()); }
	ruleTarget{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__GuardedAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }

	Guarded 

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }
)

{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__DelayAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_5_0()); }
	ruleDelayMechanism{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__WaveformAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_6_0()); }
	ruleConditionalWaveform{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalSignalAssignmentStatement__WaveformAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_7_1_0()); }
	ruleConditionalWaveform{ after(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__PostponedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }

	Postponed 

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__TargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_2_0()); }
	ruleTarget{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__GuardedAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }

	Guarded 

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }
)

{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__DelayAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_5_0()); }
	ruleDelayMechanism{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequentialSignalAssignmentStatement__WaveformAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequentialSignalAssignmentStatementAccess().getWaveformWaveformsParserRuleCall_6_0()); }
	ruleWaveforms{ after(grammarAccess.getSequentialSignalAssignmentStatementAccess().getWaveformWaveformsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__LabelAssignment_0_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0_0_0()); }
	ruleLabel{ after(grammarAccess.getVariableAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__TargetAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getTargetTargetParserRuleCall_0_0_1_0()); }
	ruleTarget{ after(grammarAccess.getVariableAssignmentStatementAccess().getTargetTargetParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableAssignmentStatement__InitialAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAssignmentStatementAccess().getInitialExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableAssignmentStatementAccess().getInitialExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__LabelAssignment_0_0_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getLabelLabelParserRuleCall_0_0_0_0_0()); }
	ruleLabel{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getLabelLabelParserRuleCall_0_0_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__LeftAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getLeftSimpleExpressionParserRuleCall_0_0_1_0()); }
	ruleSimpleExpression{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getLeftSimpleExpressionParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__RightAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getRightSimpleExpressionParserRuleCall_1_0()); }
	ruleSimpleExpression{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getRightSimpleExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleSimultaneousStatement__ToleranceAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalWaveform__ChoiceAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalWaveformAccess().getChoiceChoicesParserRuleCall_1_2_0()); }
	ruleChoices{ after(grammarAccess.getConditionalWaveformAccess().getChoiceChoicesParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waveforms__ExpressionAssignment_1_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformsAccess().getExpressionWaveformParserRuleCall_1_1_1_1_0()); }
	ruleWaveform{ after(grammarAccess.getWaveformsAccess().getExpressionWaveformParserRuleCall_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__ListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getListInstantiationListParserRuleCall_1_0()); }
	ruleInstantiationList{ after(grammarAccess.getConfigurationSpecificationAccess().getListInstantiationListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__ComponentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getComponentNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getConfigurationSpecificationAccess().getComponentNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__EntityAssignment_4_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getEntityNameParserRuleCall_4_1_0_1_0()); }
	ruleName{ after(grammarAccess.getConfigurationSpecificationAccess().getEntityNameParserRuleCall_4_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__ConfigurationAssignment_4_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getConfigurationNameParserRuleCall_4_1_1_1_0()); }
	ruleName{ after(grammarAccess.getConfigurationSpecificationAccess().getConfigurationNameParserRuleCall_4_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__GenericMapAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getGenericMapGenericMapsParserRuleCall_5_0()); }
	ruleGenericMaps{ after(grammarAccess.getConfigurationSpecificationAccess().getGenericMapGenericMapsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigurationSpecification__PortMapAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationSpecificationAccess().getPortMapPortMapsParserRuleCall_6_0()); }
	rulePortMaps{ after(grammarAccess.getConfigurationSpecificationAccess().getPortMapPortMapsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RejectMechanism__RejectAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRejectMechanismAccess().getRejectExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getRejectMechanismAccess().getRejectExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__DisconnectAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectMultiNameParserRuleCall_1_0()); }
	ruleMultiName{ after(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectMultiNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getTypeNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getDisconnectionSpecificationAccess().getTypeNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DisconnectionSpecification__AfterAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDisconnectionSpecificationAccess().getAfterExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getDisconnectionSpecificationAccess().getAfterExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiName__NameAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiNameAccess().getNameNameParserRuleCall_1_1_1_0()); }
	ruleName{ after(grammarAccess.getMultiNameAccess().getNameNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiIdentifierName__NameAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiIdentifierNameAccess().getNameIdentifierNameParserRuleCall_1_1_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getMultiIdentifierNameAccess().getNameIdentifierNameParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__LiteralAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralEnumerationLiteralParserRuleCall_1_0()); }
	ruleEnumerationLiteral{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralEnumerationLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationTypeDefinition__LiteralAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralEnumerationLiteralParserRuleCall_2_1_0()); }
	ruleEnumerationLiteral{ after(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralEnumerationLiteralParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getExitStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__ExitAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getExitIdentifierParserRuleCall_3_0()); }
	ruleIdentifier{ after(grammarAccess.getExitStatementAccess().getExitIdentifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExitStatement__WhenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getExitStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperatorLogicalOperatorEnumRuleCall_1_1_0()); }
	ruleLogicalOperator{ after(grammarAccess.getExpressionAccess().getOperatorLogicalOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightRelationParserRuleCall_1_2_0()); }
	ruleRelation{ after(grammarAccess.getExpressionAccess().getRightRelationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
	ruleRelationalOperator{ after(grammarAccess.getRelationAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRightShiftExpressionParserRuleCall_1_2_0()); }
	ruleShiftExpression{ after(grammarAccess.getRelationAccess().getRightShiftExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); }
	ruleShiftOperator{ after(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShiftExpressionAccess().getRightSimpleExpressionParserRuleCall_1_2_0()); }
	ruleSimpleExpression{ after(grammarAccess.getShiftExpressionAccess().getRightSimpleExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__OperatorAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOperatorAddingOperatorEnumRuleCall_0_1_1_0()); }
	ruleAddingOperator{ after(grammarAccess.getSimpleExpressionAccess().getOperatorAddingOperatorEnumRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__RightAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightTermExpressionParserRuleCall_0_1_2_0()); }
	ruleTermExpression{ after(grammarAccess.getSimpleExpressionAccess().getRightTermExpressionParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__OperatorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOperatorAddingOperatorEnumRuleCall_1_1_1_0()); }
	ruleAddingOperator{ after(grammarAccess.getSimpleExpressionAccess().getOperatorAddingOperatorEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__RightAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightTermExpressionParserRuleCall_1_1_2_0()); }
	ruleTermExpression{ after(grammarAccess.getSimpleExpressionAccess().getRightTermExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getOperatorMultiplyingOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplyingOperator{ after(grammarAccess.getSignTermExpressionAccess().getOperatorMultiplyingOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignTermExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignTermExpressionAccess().getRightFactorParserRuleCall_1_2_0()); }
	ruleFactor{ after(grammarAccess.getSignTermExpressionAccess().getRightFactorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getOperatorMultiplyingOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplyingOperator{ after(grammarAccess.getTermExpressionAccess().getOperatorMultiplyingOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TermExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermExpressionAccess().getRightFactorParserRuleCall_1_2_0()); }
	ruleFactor{ after(grammarAccess.getTermExpressionAccess().getRightFactorParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_0_1_2_0()); }
	rulePrimary{ after(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_2_0()); }
	rulePrimary{ after(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignFactor__RightAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignFactorAccess().getRightPrimaryParserRuleCall_0_1_2_0()); }
	rulePrimary{ after(grammarAccess.getSignFactorAccess().getRightPrimaryParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignUnaryExpression__SignAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignUnaryExpressionAccess().getSignSignEnumRuleCall_1_0()); }
	ruleSign{ after(grammarAccess.getSignUnaryExpressionAccess().getSignSignEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignUnaryExpression__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getSignUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignPrimary__SignAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignPrimaryAccess().getSignSignEnumRuleCall_1_0()); }
	ruleSign{ after(grammarAccess.getSignPrimaryAccess().getSignSignEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignPrimary__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignPrimaryAccess().getExpressionPrimaryParserRuleCall_2_0()); }
	rulePrimary{ after(grammarAccess.getSignPrimaryAccess().getExpressionPrimaryParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getFileDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getFileDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__OpenAssignment_4_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getOpenExpressionParserRuleCall_4_0_1_0()); }
	ruleExpression{ after(grammarAccess.getFileDeclarationAccess().getOpenExpressionParserRuleCall_4_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileDeclaration__IsAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileDeclarationAccess().getIsExpressionParserRuleCall_4_2_0()); }
	ruleExpression{ after(grammarAccess.getFileDeclarationAccess().getIsExpressionParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFileDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getInterfaceFileDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceFileDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFileDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getInterfaceFileDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FileTypeDefinition__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileTypeDefinitionAccess().getTypeNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getFileTypeDefinitionAccess().getTypeNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__LabelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getLabelLabelParserRuleCall_0_0()); }
	ruleLabel{ after(grammarAccess.getGenerateStatementAccess().getLabelLabelParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__SchemeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getSchemeGenerationSchemeParserRuleCall_2_0()); }
	ruleGenerationScheme{ after(grammarAccess.getGenerateStatementAccess().getSchemeGenerationSchemeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__DeclarationAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getDeclarationBlockDeclarativeItemParserRuleCall_4_0_0()); }
	ruleBlockDeclarativeItem{ after(grammarAccess.getGenerateStatementAccess().getDeclarationBlockDeclarativeItemParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenerateStatement__StatementAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerateStatementAccess().getStatementArchitectureStatementParserRuleCall_5_0()); }
	ruleArchitectureStatement{ after(grammarAccess.getGenerateStatementAccess().getStatementArchitectureStatementParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForGenerationScheme__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForGenerationSchemeAccess().getVariableIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getForGenerationSchemeAccess().getVariableIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForGenerationScheme__InAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForGenerationSchemeAccess().getInDiscreteRangeParserRuleCall_3_0()); }
	ruleDiscreteRange{ after(grammarAccess.getForGenerationSchemeAccess().getInDiscreteRangeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfGenerationScheme__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfGenerationSchemeAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getIfGenerationSchemeAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__DeclarationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getDeclarationGenericDeclarationParserRuleCall_2_0()); }
	ruleGenericDeclaration{ after(grammarAccess.getGenericsAccess().getDeclarationGenericDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generics__DeclarationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericsAccess().getDeclarationGenericDeclarationParserRuleCall_3_1_0()); }
	ruleGenericDeclaration{ after(grammarAccess.getGenericsAccess().getDeclarationGenericDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__GenericAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getGenericParameterParserRuleCall_3_0()); }
	ruleParameter{ after(grammarAccess.getGenericMapsAccess().getGenericParameterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GenericMaps__GenericAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenericMapsAccess().getGenericParameterParserRuleCall_4_1_0()); }
	ruleParameter{ after(grammarAccess.getGenericMapsAccess().getGenericParameterParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getGroupDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__IsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getIsNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getGroupDeclarationAccess().getIsNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupDeclaration__MemberAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupDeclarationAccess().getMemberGroupConstituentsParserRuleCall_5_0()); }
	ruleGroupConstituents{ after(grammarAccess.getGroupDeclarationAccess().getMemberGroupConstituentsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupConstituents__NameAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupConstituentsAccess().getNameGroupConstituentParserRuleCall_1_1_1_0()); }
	ruleGroupConstituent{ after(grammarAccess.getGroupConstituentsAccess().getNameGroupConstituentParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getGroupTemplateDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__EntryAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getEntryEntityClassEnumRuleCall_4_0()); }
	ruleEntityClass{ after(grammarAccess.getGroupTemplateDeclarationAccess().getEntryEntityClassEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupTemplateDeclaration__EntryAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupTemplateDeclarationAccess().getEntryEntityClassEnumRuleCall_6_1_0()); }
	ruleEntityClass{ after(grammarAccess.getGroupTemplateDeclarationAccess().getEntryEntityClassEnumRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getIfStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__TestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTestIfStatementTestParserRuleCall_2_0()); }
	ruleIfStatementTest{ after(grammarAccess.getIfStatementAccess().getTestIfStatementTestParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__TestAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getTestIfStatementTestParserRuleCall_3_1_0()); }
	ruleIfStatementTest{ after(grammarAccess.getIfStatementAccess().getTestIfStatementTestParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__StatementAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getStatementSequentialStatementParserRuleCall_4_1_0()); }
	ruleSequentialStatement{ after(grammarAccess.getIfStatementAccess().getStatementSequentialStatementParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementTest__ConditionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementTestAccess().getConditionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementTestAccess().getConditionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatementTest__StatementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementTestAccess().getStatementSequentialStatementParserRuleCall_2_0()); }
	ruleSequentialStatement{ after(grammarAccess.getIfStatementTestAccess().getStatementSequentialStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndexConstraint__ExpressionAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexConstraintAccess().getExpressionDiscreteRangeParserRuleCall_2_1_1_0()); }
	ruleDiscreteRange{ after(grammarAccess.getIndexConstraintAccess().getExpressionDiscreteRangeParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getLoopStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__IterationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getIterationIterationSchemeParserRuleCall_2_0()); }
	ruleIterationScheme{ after(grammarAccess.getLoopStatementAccess().getIterationIterationSchemeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__StatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getStatementSequentialStatementParserRuleCall_4_0()); }
	ruleSequentialStatement{ after(grammarAccess.getLoopStatementAccess().getStatementSequentialStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileIterationScheme__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileIterationSchemeAccess().getConditionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getWhileIterationSchemeAccess().getConditionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForIterationScheme__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForIterationSchemeAccess().getVariableIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getForIterationSchemeAccess().getVariableIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForIterationScheme__InAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForIterationSchemeAccess().getInDiscreteRangeParserRuleCall_3_0()); }
	ruleDiscreteRange{ after(grammarAccess.getForIterationSchemeAccess().getInDiscreteRangeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Name__ElementAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameAccess().getElementNameSuffixParserRuleCall_1_1_0()); }
	ruleNameSuffix{ after(grammarAccess.getNameAccess().getElementNameSuffixParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameExpression__ElementAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameExpressionAccess().getElementNamePrefixParserRuleCall_0_1_0()); }
	ruleNamePrefix{ after(grammarAccess.getNameExpressionAccess().getElementNamePrefixParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameExpression__ElementAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameExpressionAccess().getElementNameSuffixParserRuleCall_0_2_0()); }
	ruleNameSuffix{ after(grammarAccess.getNameExpressionAccess().getElementNameSuffixParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringName__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringNameAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringNameAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharacterName__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharacterNameAccess().getValueCHARTerminalRuleCall_1_0()); }
	RULE_CHAR{ after(grammarAccess.getCharacterNameAccess().getValueCHARTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierName__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierNameAccess().getValueIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getIdentifierNameAccess().getValueIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__SignatureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getSignatureSignatureParserRuleCall_1_0()); }
	ruleSignature{ after(grammarAccess.getAttributeNameAccess().getSignatureSignatureParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeName__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeNameAccess().getValueATTRIBUTETerminalRuleCall_2_0()); }
	RULE_ATTRIBUTE{ after(grammarAccess.getAttributeNameAccess().getValueATTRIBUTETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getNatureDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NatureDeclaration__IsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNatureDeclarationAccess().getIsNatureDefinitionParserRuleCall_3_0()); }
	ruleNatureDefinition{ after(grammarAccess.getNatureDeclarationAccess().getIsNatureDefinitionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getNameNameParserRuleCall_0_0()); }
	ruleName{ after(grammarAccess.getScalarNatureDefinitionAccess().getNameNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__AcrossAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getAcrossNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getScalarNatureDefinitionAccess().getAcrossNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScalarNatureDefinition__ThroughAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScalarNatureDefinitionAccess().getThroughNameParserRuleCall_4_0()); }
	ruleName{ after(grammarAccess.getScalarNatureDefinitionAccess().getThroughNameParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getNextStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__NextAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getNextIdentifierParserRuleCall_3_0()); }
	ruleIdentifier{ after(grammarAccess.getNextStatementAccess().getNextIdentifierParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NextStatement__WhenAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNextStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getNextStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__DeclarationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getDeclarationPortDeclarationParserRuleCall_2_0()); }
	rulePortDeclaration{ after(grammarAccess.getPortsAccess().getDeclarationPortDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ports__DeclarationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortsAccess().getDeclarationPortDeclarationParserRuleCall_3_1_0()); }
	rulePortDeclaration{ after(grammarAccess.getPortsAccess().getDeclarationPortDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__PortAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getPortParameterParserRuleCall_3_0()); }
	ruleParameter{ after(grammarAccess.getPortMapsAccess().getPortParameterParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PortMaps__PortAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPortMapsAccess().getPortParameterParserRuleCall_4_1_0()); }
	ruleParameter{ after(grammarAccess.getPortMapsAccess().getPortParameterParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getProcedureCallStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureCallStatement__ProcedureAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureCallStatementAccess().getProcedureNameParserRuleCall_1_0()); }
	ruleName{ after(grammarAccess.getProcedureCallStatementAccess().getProcedureNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__PostponedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedPostponedKeyword_1_0()); }
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedPostponedKeyword_1_0()); }

	Postponed 

{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedPostponedKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcurrentProcedureCallStatement__ProcedureAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcurrentProcedureCallStatementAccess().getProcedureNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getConcurrentProcedureCallStatementAccess().getProcedureNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getProcessStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__PostponedAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getPostponedPostponedKeyword_2_0()); }
(
{ before(grammarAccess.getProcessStatementAccess().getPostponedPostponedKeyword_2_0()); }

	Postponed 

{ after(grammarAccess.getProcessStatementAccess().getPostponedPostponedKeyword_2_0()); }
)

{ after(grammarAccess.getProcessStatementAccess().getPostponedPostponedKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__SensitivityAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getSensitivityMultiIdentifierNameParserRuleCall_4_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getProcessStatementAccess().getSensitivityMultiIdentifierNameParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__DeclarationAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getDeclarationProcessDeclarativeItemParserRuleCall_6_0()); }
	ruleProcessDeclarativeItem{ after(grammarAccess.getProcessStatementAccess().getDeclarationProcessDeclarativeItemParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessStatement__StatementAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessStatementAccess().getStatementSequentialStatementParserRuleCall_8_0()); }
	ruleSequentialStatement{ after(grammarAccess.getProcessStatementAccess().getStatementSequentialStatementParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AllocatorExpression__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocatorExpressionAccess().getTypeSubtypeIndicationParserRuleCall_1_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getAllocatorExpressionAccess().getTypeSubtypeIndicationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureDefinition__RecordAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureDefinitionAccess().getRecordRecordNatureElementParserRuleCall_1_0()); }
	ruleRecordNatureElement{ after(grammarAccess.getRecordNatureDefinitionAccess().getRecordRecordNatureElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureElement__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureElementAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getRecordNatureElementAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordNatureElement__NatureAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordNatureElementAccess().getNatureSubnatureIndicationParserRuleCall_2_0()); }
	ruleSubnatureIndication{ after(grammarAccess.getRecordNatureElementAccess().getNatureSubnatureIndicationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeDefinition__DeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationRecordTypeElementParserRuleCall_1_0()); }
	ruleRecordTypeElement{ after(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationRecordTypeElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeElement__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeElementAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getRecordTypeElementAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RecordTypeElement__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecordTypeElementAccess().getTypeSubtypeIndicationParserRuleCall_2_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getRecordTypeElementAccess().getTypeSubtypeIndicationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getReportStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__ReportAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getReportExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getReportStatementAccess().getReportExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportStatement__SeverityAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportStatementAccess().getSeverityExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getReportStatementAccess().getSeverityExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getReturnStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getNullStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullStatementAccess().getExpressionNullExpressionParserRuleCall_2_0()); }
	ruleNullExpression{ after(grammarAccess.getNullStatementAccess().getExpressionNullExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getSignalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getSignalDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__KindAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getKindSignalKindEnumRuleCall_4_0()); }
	ruleSignalKind{ after(grammarAccess.getSignalDeclarationAccess().getKindSignalKindEnumRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignalDeclaration__InitialAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignalDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getSignalDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__SharedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSharedSharedKeyword_0_0()); }
(
{ before(grammarAccess.getVariableDeclarationAccess().getSharedSharedKeyword_0_0()); }

	Shared 

{ after(grammarAccess.getVariableDeclarationAccess().getSharedSharedKeyword_0_0()); }
)

{ after(grammarAccess.getVariableDeclarationAccess().getSharedSharedKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_2_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getVariableDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getVariableDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitialAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getConstantDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getConstantDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDeclaration__InitialAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclarationAccess().getInitialExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getConstantDeclarationAccess().getInitialExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__ModeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getModeModeEnumRuleCall_3_0()); }
	ruleMode{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getModeModeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__KindAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getKindSignalKindEnumRuleCall_5_0()); }
	ruleSignalKind{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getKindSignalKindEnumRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceSignalDeclaration__InitialAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceSignalDeclarationAccess().getInitialExpressionParserRuleCall_6_1_0()); }
	ruleExpression{ after(grammarAccess.getInterfaceSignalDeclarationAccess().getInitialExpressionParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__ModeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getModeModeEnumRuleCall_3_0()); }
	ruleMode{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getModeModeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceVariableDeclaration__InitialAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceVariableDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getInterfaceVariableDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__TypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceConstantDeclaration__InitialAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceConstantDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getInterfaceConstantDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__ParameterAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getParameterNameParserRuleCall_2_0_0()); }
	ruleName{ after(grammarAccess.getSignatureAccess().getParameterNameParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__ParameterAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getParameterNameParserRuleCall_2_1_1_0()); }
	ruleName{ after(grammarAccess.getSignatureAccess().getParameterNameParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__ReturnAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignatureAccess().getReturnNameParserRuleCall_3_1_0()); }
	ruleName{ after(grammarAccess.getSignatureAccess().getReturnNameParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousAlternative__ChoiceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getChoiceChoicesParserRuleCall_1_0()); }
	ruleChoices{ after(grammarAccess.getSimultaneousAlternativeAccess().getChoiceChoicesParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousAlternative__StatementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousAlternativeAccess().getStatementSimultaneousStatementParserRuleCall_3_0()); }
	ruleSimultaneousStatement{ after(grammarAccess.getSimultaneousAlternativeAccess().getStatementSimultaneousStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getSimultaneousCaseStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__CaseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getCaseExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSimultaneousCaseStatementAccess().getCaseExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousCaseStatement__WhenAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousCaseStatementAccess().getWhenSimultaneousAlternativeParserRuleCall_4_0()); }
	ruleSimultaneousAlternative{ after(grammarAccess.getSimultaneousCaseStatementAccess().getWhenSimultaneousAlternativeParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__LabelAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
	ruleLabel{ after(grammarAccess.getSimultaneousIfStatementAccess().getLabelLabelParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__TestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getTestSimultaneousIfStatementTestParserRuleCall_2_0()); }
	ruleSimultaneousIfStatementTest{ after(grammarAccess.getSimultaneousIfStatementAccess().getTestSimultaneousIfStatementTestParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__TestAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getTestSimultaneousIfStatementTestParserRuleCall_4_1_0()); }
	ruleSimultaneousIfStatementTest{ after(grammarAccess.getSimultaneousIfStatementAccess().getTestSimultaneousIfStatementTestParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatement__StatementAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementAccess().getStatementSimultaneousStatementParserRuleCall_5_1_0()); }
	ruleSimultaneousStatement{ after(grammarAccess.getSimultaneousIfStatementAccess().getStatementSimultaneousStatementParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatementTest__ConditionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementTestAccess().getConditionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getSimultaneousIfStatementTestAccess().getConditionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousIfStatementTest__StatementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousIfStatementTestAccess().getStatementSimultaneousStatementParserRuleCall_2_0()); }
	ruleSimultaneousStatement{ after(grammarAccess.getSimultaneousIfStatementTestAccess().getStatementSimultaneousStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__DeclarationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getDeclarationProceduralDeclarativeItemParserRuleCall_4_0()); }
	ruleProceduralDeclarativeItem{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getDeclarationProceduralDeclarativeItemParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimultaneousProceduralStatement__StatementAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimultaneousProceduralStatementAccess().getStatementSequentialStatementParserRuleCall_6_0()); }
	ruleSequentialStatement{ after(grammarAccess.getSimultaneousProceduralStatementAccess().getStatementSequentialStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spectrum__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpectrumAccess().getLeftSimpleExpressionParserRuleCall_1_0()); }
	ruleSimpleExpression{ after(grammarAccess.getSpectrumAccess().getLeftSimpleExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spectrum__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpectrumAccess().getRightSimpleExpressionParserRuleCall_3_0()); }
	ruleSimpleExpression{ after(grammarAccess.getSpectrumAccess().getRightSimpleExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Noise__NoiseAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoiseAccess().getNoiseSimpleExpressionParserRuleCall_1_0()); }
	ruleSimpleExpression{ after(grammarAccess.getNoiseAccess().getNoiseSimpleExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getQuantityAspectAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__ToleranceAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getToleranceExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getQuantityAspectAccess().getToleranceExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuantityAspect__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuantityAspectAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getQuantityAspectAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__AcrossAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossQuantityAspectParserRuleCall_1_0_0()); }
	ruleQuantityAspect{ after(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossQuantityAspectParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__ThroughAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getThroughQuantityAspectParserRuleCall_2_0_0()); }
	ruleQuantityAspect{ after(grammarAccess.getBranchQuantityDeclarationAccess().getThroughQuantityAspectParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__LeftAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getLeftNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getBranchQuantityDeclarationAccess().getLeftNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BranchQuantityDeclaration__RightAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchQuantityDeclarationAccess().getRightNameParserRuleCall_4_1_0()); }
	ruleName{ after(grammarAccess.getBranchQuantityDeclarationAccess().getRightNameParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getFreeQuantityDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getFreeQuantityDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FreeQuantityDeclaration__QuantityAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getSourceQuantityDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getSourceQuantityDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SourceQuantityDeclaration__SourceAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSourceQuantityDeclarationAccess().getSourceSourceAspectParserRuleCall_4_0()); }
	ruleSourceAspect{ after(grammarAccess.getSourceQuantityDeclarationAccess().getSourceSourceAspectParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getNameMultiNameParserRuleCall_1_0()); }
	ruleMultiName{ after(grammarAccess.getLimitDeclarationAccess().getNameMultiNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getTypeNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getLimitDeclarationAccess().getTypeNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LimitDeclaration__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitDeclarationAccess().getValueExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getLimitDeclarationAccess().getValueExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getSubnatureDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureDeclaration__NatureAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureDeclarationAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); }
	ruleSubnatureIndication{ after(grammarAccess.getSubnatureDeclarationAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getNameDesignatorNameParserRuleCall_2_0()); }
	ruleDesignatorName{ after(grammarAccess.getProcedureDeclarationAccess().getNameDesignatorNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__ParameterAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getParameterProcedureParameterDeclarationParserRuleCall_3_1_0()); }
	ruleProcedureParameterDeclaration{ after(grammarAccess.getProcedureDeclarationAccess().getParameterProcedureParameterDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__ParameterAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getParameterProcedureParameterDeclarationParserRuleCall_3_2_1_0()); }
	ruleProcedureParameterDeclaration{ after(grammarAccess.getProcedureDeclarationAccess().getParameterProcedureParameterDeclarationParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureDeclaration__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcedureDeclarationAccess().getBodySubprogramBodyParserRuleCall_4_0()); }
	ruleSubprogramBody{ after(grammarAccess.getProcedureDeclarationAccess().getBodySubprogramBodyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__PurityAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getPurityPurityEnumRuleCall_1_0()); }
	rulePurity{ after(grammarAccess.getFunctionDeclarationAccess().getPurityPurityEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameDesignatorNameParserRuleCall_3_0()); }
	ruleDesignatorName{ after(grammarAccess.getFunctionDeclarationAccess().getNameDesignatorNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParameterAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterFunctionParameterDeclarationParserRuleCall_4_1_0()); }
	ruleFunctionParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getParameterFunctionParameterDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParameterAssignment_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParameterFunctionParameterDeclarationParserRuleCall_4_2_1_0()); }
	ruleFunctionParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getParameterFunctionParameterDeclarationParserRuleCall_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__TypeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeNameParserRuleCall_6_0()); }
	ruleName{ after(grammarAccess.getFunctionDeclarationAccess().getTypeNameParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodySubprogramBodyParserRuleCall_7_0()); }
	ruleSubprogramBody{ after(grammarAccess.getFunctionDeclarationAccess().getBodySubprogramBodyParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__DeclarationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getDeclarationSubprogramDeclarativeItemParserRuleCall_2_0()); }
	ruleSubprogramDeclarativeItem{ after(grammarAccess.getSubprogramBodyAccess().getDeclarationSubprogramDeclarativeItemParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramBody__StatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubprogramBodyAccess().getStatementSequentialStatementParserRuleCall_4_0()); }
	ruleSequentialStatement{ after(grammarAccess.getSubprogramBodyAccess().getStatementSequentialStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getSubtypeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeDeclaration__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getSubtypeDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getNameDesignatorNameParserRuleCall_1_0()); }
	ruleDesignatorName{ after(grammarAccess.getAliasDeclarationAccess().getNameDesignatorNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__AliasAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getAliasSubtypeIndicationParserRuleCall_2_1_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getAliasDeclarationAccess().getAliasSubtypeIndicationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__IsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getIsNameSignatureParserRuleCall_4_0()); }
	ruleNameSignature{ after(grammarAccess.getAliasDeclarationAccess().getIsNameSignatureParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__DirectionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getDirectionRangeDirectionEnumRuleCall_1_1_0()); }
	ruleRangeDirection{ after(grammarAccess.getRangeAccess().getDirectionRangeDirectionEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getRightSimpleExpressionParserRuleCall_1_2_0()); }
	ruleSimpleExpression{ after(grammarAccess.getRangeAccess().getRightSimpleExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__ExpressionAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getExpressionParameterParserRuleCall_2_0_0()); }
	ruleParameter{ after(grammarAccess.getAggregateAccess().getExpressionParameterParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Aggregate__ExpressionAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAggregateAccess().getExpressionParameterParserRuleCall_2_1_1_0()); }
	ruleParameter{ after(grammarAccess.getAggregateAccess().getExpressionParameterParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__LeftAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getLeftSimpleExpressionParserRuleCall_1_0_0_0()); }
	ruleSimpleExpression{ after(grammarAccess.getRangeSpecificationAccess().getLeftSimpleExpressionParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__DirectionAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getDirectionRangeDirectionEnumRuleCall_1_0_1_0()); }
	ruleRangeDirection{ after(grammarAccess.getRangeSpecificationAccess().getDirectionRangeDirectionEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeSpecification__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeSpecificationAccess().getRightSimpleExpressionParserRuleCall_2_0()); }
	ruleSimpleExpression{ after(grammarAccess.getRangeSpecificationAccess().getRightSimpleExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getNameNameParserRuleCall_0_1_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationAccess().getNameNameParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__MarkAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_0_2_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__ConstraintAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getConstraintConstraintParserRuleCall_0_3_0()); }
	ruleConstraint{ after(grammarAccess.getSubtypeIndicationAccess().getConstraintConstraintParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__ToleranceAssignment_0_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_0_4_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_0_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__AcrossAssignment_0_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_0_4_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_0_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__MarkAssignment_1_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_1_1_0_0_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_1_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__ConstraintAssignment_1_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getConstraintConstraintParserRuleCall_1_1_0_1_0()); }
	ruleConstraint{ after(grammarAccess.getSubtypeIndicationAccess().getConstraintConstraintParserRuleCall_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__ToleranceAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__AcrossAssignment_1_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_1_2_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_1_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__MarkAssignment_2_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_2_1_0_0_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_2_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__ToleranceAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_2_2_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndication__AcrossAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_2_3_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getNameNameParserRuleCall_0_1_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getNameNameParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__MarkAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_0_2_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__ConstraintAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintConstraintParserRuleCall_0_3_0()); }
	ruleConstraint{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintConstraintParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__ToleranceAssignment_0_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_0_4_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_0_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__AcrossAssignment_0_4_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_0_4_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_0_4_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__MarkAssignment_1_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_1_1_0_0_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_1_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__ConstraintAssignment_1_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintConstraintParserRuleCall_1_1_0_1_0()); }
	ruleConstraint{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintConstraintParserRuleCall_1_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__ToleranceAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_1_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__AcrossAssignment_1_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_1_2_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_1_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__MarkAssignment_2_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_2_1_0_0_0()); }
	ruleName{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_2_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__ToleranceAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_2_2_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubtypeIndicationExpression__AcrossAssignment_2_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_2_3_1_0()); }
	ruleExpression{ after(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_2_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__MarkAssignment_0_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getMarkNameParserRuleCall_0_1_0_0_0()); }
	ruleName{ after(grammarAccess.getSubnatureIndicationAccess().getMarkNameParserRuleCall_0_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__ConstraintAssignment_0_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getConstraintIndexConstraintParserRuleCall_0_1_0_1_0()); }
	ruleIndexConstraint{ after(grammarAccess.getSubnatureIndicationAccess().getConstraintIndexConstraintParserRuleCall_0_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__ToleranceAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getToleranceExpressionParserRuleCall_0_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubnatureIndicationAccess().getToleranceExpressionParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__AcrossAssignment_0_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAcrossExpressionParserRuleCall_0_2_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSubnatureIndicationAccess().getAcrossExpressionParserRuleCall_0_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__MarkAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getMarkNameParserRuleCall_1_1_0()); }
	ruleName{ after(grammarAccess.getSubnatureIndicationAccess().getMarkNameParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__ToleranceAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getToleranceExpressionParserRuleCall_1_3_0()); }
	ruleExpression{ after(grammarAccess.getSubnatureIndicationAccess().getToleranceExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubnatureIndication__AcrossAssignment_1_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubnatureIndicationAccess().getAcrossExpressionParserRuleCall_1_4_1_0()); }
	ruleExpression{ after(grammarAccess.getSubnatureIndicationAccess().getAcrossExpressionParserRuleCall_1_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
	ruleMultiIdentifierName{ after(grammarAccess.getTerminalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalDeclaration__NatureAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalDeclarationAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); }
	ruleSubnatureIndication{ after(grammarAccess.getTerminalDeclarationAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
	ruleIdentifierName{ after(grammarAccess.getTypeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclaration__IsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclarationAccess().getIsTypeDefinitionParserRuleCall_2_1_0()); }
	ruleTypeDefinition{ after(grammarAccess.getTypeDeclarationAccess().getIsTypeDefinitionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__LeftAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getLeftSimpleExpressionParserRuleCall_0_2_0()); }
	ruleSimpleExpression{ after(grammarAccess.getRangeTypeDefinitionAccess().getLeftSimpleExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__DirectionAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getDirectionRangeDirectionEnumRuleCall_0_3_0()); }
	ruleRangeDirection{ after(grammarAccess.getRangeTypeDefinitionAccess().getDirectionRangeDirectionEnumRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeTypeDefinition__RightAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeTypeDefinitionAccess().getRightSimpleExpressionParserRuleCall_0_4_0()); }
	ruleSimpleExpression{ after(grammarAccess.getRangeTypeDefinitionAccess().getRightSimpleExpressionParserRuleCall_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__RangeAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeRangeParserRuleCall_0_0_1_0()); }
	ruleRange{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeRangeParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__PrimaryAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getPrimaryIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getPrimaryIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinition__SecondaryAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionAccess().getSecondaryPhysicalTypeDefinitionSecondaryParserRuleCall_3_0()); }
	rulePhysicalTypeDefinitionSecondary{ after(grammarAccess.getPhysicalTypeDefinitionAccess().getSecondaryPhysicalTypeDefinitionSecondaryParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__NumberAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNumberABSTRACT_LITERALTerminalRuleCall_2_0()); }
	RULE_ABSTRACT_LITERAL{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNumberABSTRACT_LITERALTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PhysicalTypeDefinitionSecondary__OfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getOfNameParserRuleCall_3_0()); }
	ruleName{ after(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getOfNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__IndexAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__IndexAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexNameParserRuleCall_5_1_0()); }
	ruleName{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexNameParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayTypeDefinition__TypeAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_8_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayTypeDefinition__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getConstraintIndexConstraintParserRuleCall_1_0()); }
	ruleIndexConstraint{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getConstraintIndexConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayTypeDefinition__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
	ruleSubtypeIndication{ after(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__IndexAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexNameParserRuleCall_2_0()); }
	ruleName{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__IndexAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexNameParserRuleCall_5_1_0()); }
	ruleName{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexNameParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnconstrainedArrayNatureDefinition__NatureAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getNatureSubnatureIndicationParserRuleCall_8_0()); }
	ruleSubnatureIndication{ after(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getNatureSubnatureIndicationParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayNatureDefinition__ConstraintAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getConstraintIndexConstraintParserRuleCall_1_0()); }
	ruleIndexConstraint{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getConstraintIndexConstraintParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstrainedArrayNatureDefinition__NatureAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); }
	ruleSubnatureIndication{ after(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__LabelAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
	ruleLabel{ after(grammarAccess.getWaitStatementAccess().getLabelLabelParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__SensitivityAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getSensitivityMultiNameParserRuleCall_3_1_0()); }
	ruleMultiName{ after(grammarAccess.getWaitStatementAccess().getSensitivityMultiNameParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__UntilAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getUntilExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getWaitStatementAccess().getUntilExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WaitStatement__TimeAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaitStatementAccess().getTimeExpressionParserRuleCall_5_1_0()); }
	ruleExpression{ after(grammarAccess.getWaitStatementAccess().getTimeExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Waveform__AfterAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWaveformAccess().getAfterExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getWaveformAccess().getAfterExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BitStringName__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBitStringNameAccess().getValueBIT_STRING_LITERALTerminalRuleCall_1_0()); }
	RULE_BIT_STRING_LITERAL{ after(grammarAccess.getBitStringNameAccess().getValueBIT_STRING_LITERALTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getValueABSTRACT_LITERALTerminalRuleCall_0_1_0()); }
	RULE_ABSTRACT_LITERAL{ after(grammarAccess.getValueExpressionAccess().getValueABSTRACT_LITERALTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__UnitAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getUnitNameParserRuleCall_0_2_0()); }
	ruleName{ after(grammarAccess.getValueExpressionAccess().getUnitNameParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getValueABSTRACT_LITERALTerminalRuleCall_1_1_0()); }
	RULE_ABSTRACT_LITERAL{ after(grammarAccess.getValueExpressionAccess().getValueABSTRACT_LITERALTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


