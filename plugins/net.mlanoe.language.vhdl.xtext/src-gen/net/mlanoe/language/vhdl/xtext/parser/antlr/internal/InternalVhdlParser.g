/*
* generated by Xtext
*/
parser grammar InternalVhdlParser;

options {
	tokenVocab=InternalVhdlLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package net.mlanoe.language.vhdl.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.mlanoe.language.vhdl.xtext.services.VhdlGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private VhdlGrammarAccess grammarAccess;
	 	
	public InternalVhdlParser(TokenStream input, VhdlGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Model";	
	} 
	   	   	
	@Override
	protected VhdlGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDesignDesignUnitParserRuleCall_0()); 
	    }
		lv_design_0_0=ruleDesignUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"design",
        		lv_design_0_0, 
        		"DesignUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleDesignUnit
entryRuleDesignUnit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDesignUnitRule()); }
	 iv_ruleDesignUnit=ruleDesignUnit 
	 { $current=$iv_ruleDesignUnit.current; } 
	 EOF 
;

// Rule DesignUnit
ruleDesignUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	otherlv_0=Library
    {
    	newLeafNode(otherlv_0, grammarAccess.getDesignUnitAccess().getLibraryKeyword_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDesignUnitAccess().getLibraryIdentifierParserRuleCall_0_0_1_0()); 
	    }
		lv_library_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDesignUnitRule());
	        }
       		add(
       			$current, 
       			"library",
        		lv_library_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getDesignUnitAccess().getCommaKeyword_0_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDesignUnitAccess().getLibraryIdentifierParserRuleCall_0_0_2_1_0()); 
	    }
		lv_library_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDesignUnitRule());
	        }
       		add(
       			$current, 
       			"library",
        		lv_library_3_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getDesignUnitAccess().getSemicolonKeyword_0_0_3());
    }
)
    |(
	otherlv_5=Use
    {
    	newLeafNode(otherlv_5, grammarAccess.getDesignUnitAccess().getUseKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDesignUnitAccess().getUseNameParserRuleCall_0_1_1_0()); 
	    }
		lv_use_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDesignUnitRule());
	        }
       		add(
       			$current, 
       			"use",
        		lv_use_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_7=Comma
    {
    	newLeafNode(otherlv_7, grammarAccess.getDesignUnitAccess().getCommaKeyword_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDesignUnitAccess().getUseNameParserRuleCall_0_1_2_1_0()); 
	    }
		lv_use_8_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDesignUnitRule());
	        }
       		add(
       			$current, 
       			"use",
        		lv_use_8_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getDesignUnitAccess().getSemicolonKeyword_0_1_3());
    }
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getDesignUnitAccess().getModuleModuleParserRuleCall_1_0()); 
	    }
		lv_module_10_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDesignUnitRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_10_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getArchitectureParserRuleCall_0()); 
    }
    this_Architecture_0=ruleArchitecture
    {
        $current = $this_Architecture_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getPackageBodyParserRuleCall_1()); 
    }
    this_PackageBody_1=rulePackageBody
    {
        $current = $this_PackageBody_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getEntityParserRuleCall_2()); 
    }
    this_Entity_2=ruleEntity
    {
        $current = $this_Entity_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getConfigurationParserRuleCall_3()); 
    }
    this_Configuration_3=ruleConfiguration
    {
        $current = $this_Configuration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getPackageParserRuleCall_4()); 
    }
    this_Package_4=rulePackage
    {
        $current = $this_Package_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArchitecture
entryRuleArchitecture returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArchitectureRule()); }
	 iv_ruleArchitecture=ruleArchitecture 
	 { $current=$iv_ruleArchitecture.current; } 
	 EOF 
;

// Rule Architecture
ruleArchitecture returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Architecture
    {
    	newLeafNode(otherlv_0, grammarAccess.getArchitectureAccess().getArchitectureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getArchitectureAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureAccess().getOfNameParserRuleCall_3_0()); 
	    }
		lv_of_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Is
    {
    	newLeafNode(otherlv_4, grammarAccess.getArchitectureAccess().getIsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureAccess().getDeclarationBlockDeclarativeItemParserRuleCall_5_0()); 
	    }
		lv_declaration_5_0=ruleBlockDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_5_0, 
        		"BlockDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_6=Begin
    {
    	newLeafNode(otherlv_6, grammarAccess.getArchitectureAccess().getBeginKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArchitectureAccess().getStatementArchitectureStatementParserRuleCall_7_0()); 
	    }
		lv_statement_7_0=ruleArchitectureStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArchitectureRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_7_0, 
        		"ArchitectureStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_8=End
    {
    	newLeafNode(otherlv_8, grammarAccess.getArchitectureAccess().getEndKeyword_8());
    }
(
	otherlv_9=Architecture
    {
    	newLeafNode(otherlv_9, grammarAccess.getArchitectureAccess().getArchitectureKeyword_9());
    }
)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureAccess().getIdentifierParserRuleCall_10()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getArchitectureAccess().getSemicolonKeyword_11());
    }
)
;





// Entry rule entryRulePackageBody
entryRulePackageBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPackageBodyRule()); }
	 iv_rulePackageBody=rulePackageBody 
	 { $current=$iv_rulePackageBody.current; } 
	 EOF 
;

// Rule PackageBody
rulePackageBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Package
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageBodyAccess().getPackageKeyword_0());
    }

	otherlv_1=Body
    {
    	newLeafNode(otherlv_1, grammarAccess.getPackageBodyAccess().getBodyKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageBodyAccess().getNameIdentifierNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageBodyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Is
    {
    	newLeafNode(otherlv_3, grammarAccess.getPackageBodyAccess().getIsKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageBodyAccess().getDeclarationPackageBodyDeclarativeItemParserRuleCall_4_0()); 
	    }
		lv_declaration_4_0=rulePackageBodyDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageBodyRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_4_0, 
        		"PackageBodyDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=End
    {
    	newLeafNode(otherlv_5, grammarAccess.getPackageBodyAccess().getEndKeyword_5());
    }
(
	otherlv_6=Package
    {
    	newLeafNode(otherlv_6, grammarAccess.getPackageBodyAccess().getPackageKeyword_6_0());
    }

	otherlv_7=Body
    {
    	newLeafNode(otherlv_7, grammarAccess.getPackageBodyAccess().getBodyKeyword_6_1());
    }
)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getPackageBodyAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Package
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getDeclarationPackageDeclarativeItemParserRuleCall_3_0()); 
	    }
		lv_declaration_3_0=rulePackageDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_3_0, 
        		"PackageDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_4=End
    {
    	newLeafNode(otherlv_4, grammarAccess.getPackageAccess().getEndKeyword_4());
    }
(
	otherlv_5=Package
    {
    	newLeafNode(otherlv_5, grammarAccess.getPackageAccess().getPackageKeyword_5());
    }
)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageAccess().getIdentifierParserRuleCall_6()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getPackageAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Entity
    {
    	newLeafNode(otherlv_0, grammarAccess.getEntityAccess().getEntityKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntityAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getGenericGenericsParserRuleCall_3_0()); 
	    }
		lv_generic_3_0=ruleGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		set(
       			$current, 
       			"generic",
        		lv_generic_3_0, 
        		"Generics");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getPortPortsParserRuleCall_4_0()); 
	    }
		lv_port_4_0=rulePorts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_4_0, 
        		"Ports");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getDeclarationEntityDeclarativeItemParserRuleCall_5_0()); 
	    }
		lv_declaration_5_0=ruleEntityDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_5_0, 
        		"EntityDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
	otherlv_6=Begin
    {
    	newLeafNode(otherlv_6, grammarAccess.getEntityAccess().getBeginKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getStatementEntityStatementParserRuleCall_6_1_0()); 
	    }
		lv_statement_7_0=ruleEntityStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_7_0, 
        		"EntityStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?
	otherlv_8=End
    {
    	newLeafNode(otherlv_8, grammarAccess.getEntityAccess().getEndKeyword_7());
    }
(
	otherlv_9=Entity
    {
    	newLeafNode(otherlv_9, grammarAccess.getEntityAccess().getEntityKeyword_8());
    }
)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getIdentifierParserRuleCall_9()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getEntityAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	 iv_ruleConfiguration=ruleConfiguration 
	 { $current=$iv_ruleConfiguration.current; } 
	 EOF 
;

// Rule Configuration
ruleConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Configuration
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getConfigurationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigurationAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getOfNameParserRuleCall_3_0()); 
	    }
		lv_of_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Is
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigurationAccess().getIsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getDeclarationConfigurationDeclarativeItemParserRuleCall_5_0()); 
	    }
		lv_declaration_5_0=ruleConfigurationDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_5_0, 
        		"ConfigurationDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationAccess().getBlockBlockConfigurationParserRuleCall_6_0()); 
	    }
		lv_block_6_0=ruleBlockConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_6_0, 
        		"BlockConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=End
    {
    	newLeafNode(otherlv_7, grammarAccess.getConfigurationAccess().getEndKeyword_7());
    }
(
	otherlv_8=Configuration
    {
    	newLeafNode(otherlv_8, grammarAccess.getConfigurationAccess().getConfigurationKeyword_8());
    }
)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationAccess().getIdentifierParserRuleCall_9()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_10=Semicolon
    {
    	newLeafNode(otherlv_10, grammarAccess.getConfigurationAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleUseClauseDeclaration
entryRuleUseClauseDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUseClauseDeclarationRule()); }
	 iv_ruleUseClauseDeclaration=ruleUseClauseDeclaration 
	 { $current=$iv_ruleUseClauseDeclaration.current; } 
	 EOF 
;

// Rule UseClauseDeclaration
ruleUseClauseDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Use
    {
    	newLeafNode(otherlv_0, grammarAccess.getUseClauseDeclarationAccess().getUseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseClauseDeclarationAccess().getUseMultiNameParserRuleCall_1_0()); 
	    }
		lv_use_1_0=ruleMultiName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseClauseDeclarationRule());
	        }
       		set(
       			$current, 
       			"use",
        		lv_use_1_0, 
        		"MultiName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getUseClauseDeclarationAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleBlockDeclarativeItem
entryRuleBlockDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBlockDeclarativeItemRule()); }
	 iv_ruleBlockDeclarativeItem=ruleBlockDeclarativeItem 
	 { $current=$iv_ruleBlockDeclarativeItem.current; } 
	 EOF 
;

// Rule BlockDeclarativeItem
ruleBlockDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); 
    }
    this_SignalDeclaration_4=ruleSignalDeclaration
    {
        $current = $this_SignalDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); 
    }
    this_VariableDeclaration_5=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); 
    }
    this_FileDeclaration_6=ruleFileDeclaration
    {
        $current = $this_FileDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); 
    }
    this_AliasDeclaration_7=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getComponentParserRuleCall_8()); 
    }
    this_Component_8=ruleComponent
    {
        $current = $this_Component_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_9()); 
    }
    this_AttributeDeclaration_9=ruleAttributeDeclaration
    {
        $current = $this_AttributeDeclaration_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_10()); 
    }
    this_AttributeSpecification_10=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getConfigurationSpecificationParserRuleCall_11()); 
    }
    this_ConfigurationSpecification_11=ruleConfigurationSpecification
    {
        $current = $this_ConfigurationSpecification_11.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_12()); 
    }
    this_DisconnectionSpecification_12=ruleDisconnectionSpecification
    {
        $current = $this_DisconnectionSpecification_12.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getLimitDeclarationParserRuleCall_13()); 
    }
    this_LimitDeclaration_13=ruleLimitDeclaration
    {
        $current = $this_LimitDeclaration_13.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_14()); 
    }
    this_UseClauseDeclaration_14=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_14.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_15()); 
    }
    this_GroupTemplateDeclaration_15=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_15.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getGroupDeclarationParserRuleCall_16()); 
    }
    this_GroupDeclaration_16=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_16.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getNatureDeclarationParserRuleCall_17()); 
    }
    this_NatureDeclaration_17=ruleNatureDeclaration
    {
        $current = $this_NatureDeclaration_17.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_18()); 
    }
    this_SubnatureDeclaration_18=ruleSubnatureDeclaration
    {
        $current = $this_SubnatureDeclaration_18.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getQuantityDeclarationParserRuleCall_19()); 
    }
    this_QuantityDeclaration_19=ruleQuantityDeclaration
    {
        $current = $this_QuantityDeclaration_19.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_20()); 
    }
    this_TerminalDeclaration_20=ruleTerminalDeclaration
    {
        $current = $this_TerminalDeclaration_20.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConfigurationDeclarativeItem
entryRuleConfigurationDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConfigurationDeclarativeItemRule()); }
	 iv_ruleConfigurationDeclarativeItem=ruleConfigurationDeclarativeItem 
	 { $current=$iv_ruleConfigurationDeclarativeItem.current; } 
	 EOF 
;

// Rule ConfigurationDeclarativeItem
ruleConfigurationDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_0()); 
    }
    this_UseClauseDeclaration_0=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_1()); 
    }
    this_AttributeSpecification_1=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationDeclarativeItemAccess().getGroupDeclarationParserRuleCall_2()); 
    }
    this_GroupDeclaration_2=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntityDeclarativeItem
entryRuleEntityDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEntityDeclarativeItemRule()); }
	 iv_ruleEntityDeclarativeItem=ruleEntityDeclarativeItem 
	 { $current=$iv_ruleEntityDeclarativeItem.current; } 
	 EOF 
;

// Rule EntityDeclarativeItem
ruleEntityDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); 
    }
    this_SignalDeclaration_4=ruleSignalDeclaration
    {
        $current = $this_SignalDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); 
    }
    this_VariableDeclaration_5=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); 
    }
    this_FileDeclaration_6=ruleFileDeclaration
    {
        $current = $this_FileDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); 
    }
    this_AliasDeclaration_7=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_8()); 
    }
    this_AttributeDeclaration_8=ruleAttributeDeclaration
    {
        $current = $this_AttributeDeclaration_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_9()); 
    }
    this_AttributeSpecification_9=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_10()); 
    }
    this_DisconnectionSpecification_10=ruleDisconnectionSpecification
    {
        $current = $this_DisconnectionSpecification_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getLimitDeclarationParserRuleCall_11()); 
    }
    this_LimitDeclaration_11=ruleLimitDeclaration
    {
        $current = $this_LimitDeclaration_11.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_12()); 
    }
    this_UseClauseDeclaration_12=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_12.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_13()); 
    }
    this_GroupTemplateDeclaration_13=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_13.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getGroupDeclarationParserRuleCall_14()); 
    }
    this_GroupDeclaration_14=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_14.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getNatureDeclarationParserRuleCall_15()); 
    }
    this_NatureDeclaration_15=ruleNatureDeclaration
    {
        $current = $this_NatureDeclaration_15.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_16()); 
    }
    this_SubnatureDeclaration_16=ruleSubnatureDeclaration
    {
        $current = $this_SubnatureDeclaration_16.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getQuantityDeclarationParserRuleCall_17()); 
    }
    this_QuantityDeclaration_17=ruleQuantityDeclaration
    {
        $current = $this_QuantityDeclaration_17.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_18()); 
    }
    this_TerminalDeclaration_18=ruleTerminalDeclaration
    {
        $current = $this_TerminalDeclaration_18.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePackageBodyDeclarativeItem
entryRulePackageBodyDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemRule()); }
	 iv_rulePackageBodyDeclarativeItem=rulePackageBodyDeclarativeItem 
	 { $current=$iv_rulePackageBodyDeclarativeItem.current; } 
	 EOF 
;

// Rule PackageBodyDeclarativeItem
rulePackageBodyDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); 
    }
    this_VariableDeclaration_4=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); 
    }
    this_FileDeclaration_5=ruleFileDeclaration
    {
        $current = $this_FileDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); 
    }
    this_AliasDeclaration_6=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_7()); 
    }
    this_UseClauseDeclaration_7=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_8()); 
    }
    this_GroupTemplateDeclaration_8=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageBodyDeclarativeItemAccess().getGroupDeclarationParserRuleCall_9()); 
    }
    this_GroupDeclaration_9=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_9.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePackageDeclarativeItem
entryRulePackageDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarativeItemRule()); }
	 iv_rulePackageDeclarativeItem=rulePackageDeclarativeItem 
	 { $current=$iv_rulePackageDeclarativeItem.current; } 
	 EOF 
;

// Rule PackageDeclarativeItem
rulePackageDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getSignalDeclarationParserRuleCall_4()); 
    }
    this_SignalDeclaration_4=ruleSignalDeclaration
    {
        $current = $this_SignalDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getVariableDeclarationParserRuleCall_5()); 
    }
    this_VariableDeclaration_5=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getFileDeclarationParserRuleCall_6()); 
    }
    this_FileDeclaration_6=ruleFileDeclaration
    {
        $current = $this_FileDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getAliasDeclarationParserRuleCall_7()); 
    }
    this_AliasDeclaration_7=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getComponentParserRuleCall_8()); 
    }
    this_Component_8=ruleComponent
    {
        $current = $this_Component_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_9()); 
    }
    this_AttributeDeclaration_9=ruleAttributeDeclaration
    {
        $current = $this_AttributeDeclaration_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_10()); 
    }
    this_AttributeSpecification_10=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getDisconnectionSpecificationParserRuleCall_11()); 
    }
    this_DisconnectionSpecification_11=ruleDisconnectionSpecification
    {
        $current = $this_DisconnectionSpecification_11.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_12()); 
    }
    this_UseClauseDeclaration_12=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_12.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_13()); 
    }
    this_GroupTemplateDeclaration_13=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_13.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getGroupDeclarationParserRuleCall_14()); 
    }
    this_GroupDeclaration_14=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_14.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getNatureDeclarationParserRuleCall_15()); 
    }
    this_NatureDeclaration_15=ruleNatureDeclaration
    {
        $current = $this_NatureDeclaration_15.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getSubnatureDeclarationParserRuleCall_16()); 
    }
    this_SubnatureDeclaration_16=ruleSubnatureDeclaration
    {
        $current = $this_SubnatureDeclaration_16.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPackageDeclarativeItemAccess().getTerminalDeclarationParserRuleCall_17()); 
    }
    this_TerminalDeclaration_17=ruleTerminalDeclaration
    {
        $current = $this_TerminalDeclaration_17.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProceduralDeclarativeItem
entryRuleProceduralDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProceduralDeclarativeItemRule()); }
	 iv_ruleProceduralDeclarativeItem=ruleProceduralDeclarativeItem 
	 { $current=$iv_ruleProceduralDeclarativeItem.current; } 
	 EOF 
;

// Rule ProceduralDeclarativeItem
ruleProceduralDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); 
    }
    this_VariableDeclaration_4=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getAliasDeclarationParserRuleCall_5()); 
    }
    this_AliasDeclaration_5=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_6()); 
    }
    this_AttributeDeclaration_6=ruleAttributeDeclaration
    {
        $current = $this_AttributeDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_7()); 
    }
    this_AttributeSpecification_7=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_8()); 
    }
    this_UseClauseDeclaration_8=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_9()); 
    }
    this_GroupTemplateDeclaration_9=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProceduralDeclarativeItemAccess().getGroupDeclarationParserRuleCall_10()); 
    }
    this_GroupDeclaration_10=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProcessDeclarativeItem
entryRuleProcessDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProcessDeclarativeItemRule()); }
	 iv_ruleProcessDeclarativeItem=ruleProcessDeclarativeItem 
	 { $current=$iv_ruleProcessDeclarativeItem.current; } 
	 EOF 
;

// Rule ProcessDeclarativeItem
ruleProcessDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); 
    }
    this_VariableDeclaration_4=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); 
    }
    this_FileDeclaration_5=ruleFileDeclaration
    {
        $current = $this_FileDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); 
    }
    this_AliasDeclaration_6=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_7()); 
    }
    this_AttributeDeclaration_7=ruleAttributeDeclaration
    {
        $current = $this_AttributeDeclaration_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_8()); 
    }
    this_AttributeSpecification_8=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_9()); 
    }
    this_UseClauseDeclaration_9=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_10()); 
    }
    this_GroupTemplateDeclaration_10=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessDeclarativeItemAccess().getGroupDeclarationParserRuleCall_11()); 
    }
    this_GroupDeclaration_11=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_11.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSubprogramDeclarativeItem
entryRuleSubprogramDeclarativeItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubprogramDeclarativeItemRule()); }
	 iv_ruleSubprogramDeclarativeItem=ruleSubprogramDeclarativeItem 
	 { $current=$iv_ruleSubprogramDeclarativeItem.current; } 
	 EOF 
;

// Rule SubprogramDeclarativeItem
ruleSubprogramDeclarativeItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getSubprogramDeclarationParserRuleCall_0()); 
    }
    this_SubprogramDeclaration_0=ruleSubprogramDeclaration
    {
        $current = $this_SubprogramDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getTypeDeclarationParserRuleCall_1()); 
    }
    this_TypeDeclaration_1=ruleTypeDeclaration
    {
        $current = $this_TypeDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getSubtypeDeclarationParserRuleCall_2()); 
    }
    this_SubtypeDeclaration_2=ruleSubtypeDeclaration
    {
        $current = $this_SubtypeDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getConstantDeclarationParserRuleCall_3()); 
    }
    this_ConstantDeclaration_3=ruleConstantDeclaration
    {
        $current = $this_ConstantDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getVariableDeclarationParserRuleCall_4()); 
    }
    this_VariableDeclaration_4=ruleVariableDeclaration
    {
        $current = $this_VariableDeclaration_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getFileDeclarationParserRuleCall_5()); 
    }
    this_FileDeclaration_5=ruleFileDeclaration
    {
        $current = $this_FileDeclaration_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getAliasDeclarationParserRuleCall_6()); 
    }
    this_AliasDeclaration_6=ruleAliasDeclaration
    {
        $current = $this_AliasDeclaration_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getAttributeDeclarationParserRuleCall_7()); 
    }
    this_AttributeDeclaration_7=ruleAttributeDeclaration
    {
        $current = $this_AttributeDeclaration_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getAttributeSpecificationParserRuleCall_8()); 
    }
    this_AttributeSpecification_8=ruleAttributeSpecification
    {
        $current = $this_AttributeSpecification_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getUseClauseDeclarationParserRuleCall_9()); 
    }
    this_UseClauseDeclaration_9=ruleUseClauseDeclaration
    {
        $current = $this_UseClauseDeclaration_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getGroupTemplateDeclarationParserRuleCall_10()); 
    }
    this_GroupTemplateDeclaration_10=ruleGroupTemplateDeclaration
    {
        $current = $this_GroupTemplateDeclaration_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarativeItemAccess().getGroupDeclarationParserRuleCall_11()); 
    }
    this_GroupDeclaration_11=ruleGroupDeclaration
    {
        $current = $this_GroupDeclaration_11.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArchitectureStatement
entryRuleArchitectureStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArchitectureStatementRule()); }
	 iv_ruleArchitectureStatement=ruleArchitectureStatement 
	 { $current=$iv_ruleArchitectureStatement.current; } 
	 EOF 
;

// Rule ArchitectureStatement
ruleArchitectureStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getConfigurationInstantiationStatementParserRuleCall_0()); 
    }
    this_ConfigurationInstantiationStatement_0=ruleConfigurationInstantiationStatement
    {
        $current = $this_ConfigurationInstantiationStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getBlockStatementParserRuleCall_1()); 
    }
    this_BlockStatement_1=ruleBlockStatement
    {
        $current = $this_BlockStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getProcessStatementParserRuleCall_2()); 
    }
    this_ProcessStatement_2=ruleProcessStatement
    {
        $current = $this_ProcessStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getConcurrentAssertionStatementParserRuleCall_3()); 
    }
    this_ConcurrentAssertionStatement_3=ruleConcurrentAssertionStatement
    {
        $current = $this_ConcurrentAssertionStatement_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getSimultaneousProceduralStatementParserRuleCall_4()); 
    }
    this_SimultaneousProceduralStatement_4=ruleSimultaneousProceduralStatement
    {
        $current = $this_SimultaneousProceduralStatement_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getSimultaneousCaseStatementParserRuleCall_5()); 
    }
    this_SimultaneousCaseStatement_5=ruleSimultaneousCaseStatement
    {
        $current = $this_SimultaneousCaseStatement_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getSimultaneousIfStatementParserRuleCall_6()); 
    }
    this_SimultaneousIfStatement_6=ruleSimultaneousIfStatement
    {
        $current = $this_SimultaneousIfStatement_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getConcurrentBreakStatementParserRuleCall_7()); 
    }
    this_ConcurrentBreakStatement_7=ruleConcurrentBreakStatement
    {
        $current = $this_ConcurrentBreakStatement_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getEntityInstantiationStatementParserRuleCall_8()); 
    }
    this_EntityInstantiationStatement_8=ruleEntityInstantiationStatement
    {
        $current = $this_EntityInstantiationStatement_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getConcurrentProcedureCallStatementParserRuleCall_9()); 
    }
    this_ConcurrentProcedureCallStatement_9=ruleConcurrentProcedureCallStatement
    {
        $current = $this_ConcurrentProcedureCallStatement_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getSequentialSignalAssignmentStatementParserRuleCall_10()); 
    }
    this_SequentialSignalAssignmentStatement_10=ruleSequentialSignalAssignmentStatement
    {
        $current = $this_SequentialSignalAssignmentStatement_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getConditionalSignalAssignmentStatementParserRuleCall_11()); 
    }
    this_ConditionalSignalAssignmentStatement_11=ruleConditionalSignalAssignmentStatement
    {
        $current = $this_ConditionalSignalAssignmentStatement_11.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getSelectedSignalAssignmentStatementParserRuleCall_12()); 
    }
    this_SelectedSignalAssignmentStatement_12=ruleSelectedSignalAssignmentStatement
    {
        $current = $this_SelectedSignalAssignmentStatement_12.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getComponentInstantiationStatementParserRuleCall_13()); 
    }
    this_ComponentInstantiationStatement_13=ruleComponentInstantiationStatement
    {
        $current = $this_ComponentInstantiationStatement_13.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getGenerateStatementParserRuleCall_14()); 
    }
    this_GenerateStatement_14=ruleGenerateStatement
    {
        $current = $this_GenerateStatement_14.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArchitectureStatementAccess().getSimpleSimultaneousStatementParserRuleCall_15()); 
    }
    this_SimpleSimultaneousStatement_15=ruleSimpleSimultaneousStatement
    {
        $current = $this_SimpleSimultaneousStatement_15.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAccessTypeDefinition
entryRuleAccessTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAccessTypeDefinitionRule()); }
	 iv_ruleAccessTypeDefinition=ruleAccessTypeDefinition 
	 { $current=$iv_ruleAccessTypeDefinition.current; } 
	 EOF 
;

// Rule AccessTypeDefinition
ruleAccessTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Access
    {
    	newLeafNode(otherlv_0, grammarAccess.getAccessTypeDefinitionAccess().getAccessKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArrayNatureDefinition
entryRuleArrayNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayNatureDefinitionRule()); }
	 iv_ruleArrayNatureDefinition=ruleArrayNatureDefinition 
	 { $current=$iv_ruleArrayNatureDefinition.current; } 
	 EOF 
;

// Rule ArrayNatureDefinition
ruleArrayNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArrayNatureDefinitionAccess().getUnconstrainedArrayNatureDefinitionParserRuleCall_0()); 
    }
    this_UnconstrainedArrayNatureDefinition_0=ruleUnconstrainedArrayNatureDefinition
    {
        $current = $this_UnconstrainedArrayNatureDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArrayNatureDefinitionAccess().getConstrainedArrayNatureDefinitionParserRuleCall_1()); 
    }
    this_ConstrainedArrayNatureDefinition_1=ruleConstrainedArrayNatureDefinition
    {
        $current = $this_ConstrainedArrayNatureDefinition_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayTypeDefinition
entryRuleArrayTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayTypeDefinitionRule()); }
	 iv_ruleArrayTypeDefinition=ruleArrayTypeDefinition 
	 { $current=$iv_ruleArrayTypeDefinition.current; } 
	 EOF 
;

// Rule ArrayTypeDefinition
ruleArrayTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArrayTypeDefinitionAccess().getUnconstrainedArrayTypeDefinitionParserRuleCall_0()); 
    }
    this_UnconstrainedArrayTypeDefinition_0=ruleUnconstrainedArrayTypeDefinition
    {
        $current = $this_UnconstrainedArrayTypeDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArrayTypeDefinitionAccess().getConstrainedArrayTypeDefinitionParserRuleCall_1()); 
    }
    this_ConstrainedArrayTypeDefinition_1=ruleConstrainedArrayTypeDefinition
    {
        $current = $this_ConstrainedArrayTypeDefinition_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLabelRule()); } 
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current.getText(); }  
	 EOF 
;

// Rule Label
ruleLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

    { 
        newCompositeNode(grammarAccess.getLabelAccess().getIdentifierParserRuleCall()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleAssertionStatement
entryRuleAssertionStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAssertionStatementRule()); }
	 iv_ruleAssertionStatement=ruleAssertionStatement 
	 { $current=$iv_ruleAssertionStatement.current; } 
	 EOF 
;

// Rule AssertionStatement
ruleAssertionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssertionStatementAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=Assert
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssertionStatementAccess().getAssertKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionStatementAccess().getConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Report
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssertionStatementAccess().getReportKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionStatementAccess().getReportExpressionParserRuleCall_3_1_0()); 
	    }
		lv_report_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"report",
        		lv_report_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_6=Severity
    {
    	newLeafNode(otherlv_6, grammarAccess.getAssertionStatementAccess().getSeverityKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertionStatementAccess().getSeverityExpressionParserRuleCall_4_1_0()); 
	    }
		lv_severity_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"severity",
        		lv_severity_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getAssertionStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleConcurrentAssertionStatement
entryRuleConcurrentAssertionStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConcurrentAssertionStatementRule()); }
	 iv_ruleConcurrentAssertionStatement=ruleConcurrentAssertionStatement 
	 { $current=$iv_ruleConcurrentAssertionStatement.current; } 
	 EOF 
;

// Rule ConcurrentAssertionStatement
ruleConcurrentAssertionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentAssertionStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getConcurrentAssertionStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		lv_postponed_2_0=
	Postponed
    {
        newLeafNode(lv_postponed_2_0, grammarAccess.getConcurrentAssertionStatementAccess().getPostponedPostponedKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConcurrentAssertionStatementRule());
	        }
       		setWithLastConsumed($current, "postponed", true, "postponed");
	    }

)
)?
	otherlv_3=Assert
    {
    	newLeafNode(otherlv_3, grammarAccess.getConcurrentAssertionStatementAccess().getAssertKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentAssertionStatementAccess().getConditionExpressionParserRuleCall_3_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Report
    {
    	newLeafNode(otherlv_5, grammarAccess.getConcurrentAssertionStatementAccess().getReportKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentAssertionStatementAccess().getReportExpressionParserRuleCall_4_1_0()); 
	    }
		lv_report_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"report",
        		lv_report_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_7=Severity
    {
    	newLeafNode(otherlv_7, grammarAccess.getConcurrentAssertionStatementAccess().getSeverityKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentAssertionStatementAccess().getSeverityExpressionParserRuleCall_5_1_0()); 
	    }
		lv_severity_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentAssertionStatementRule());
	        }
       		set(
       			$current, 
       			"severity",
        		lv_severity_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getConcurrentAssertionStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleAggregate
entryRuleAggregate returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAggregateRule()); }
	 iv_ruleAggregate=ruleAggregate 
	 { $current=$iv_ruleAggregate.current; } 
	 EOF 
;

// Rule Aggregate
ruleAggregate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAggregateAccess().getAggregateExpressionAction_0(),
            $current);
    }
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getAggregateAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getExpressionParameterParserRuleCall_2_0_0()); 
	    }
		lv_expression_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getAggregateAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAggregateAccess().getExpressionParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_expression_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAggregateRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getAggregateAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getAssociationExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getChoiceChoicesParserRuleCall_0_1_0()); 
	    }
		lv_choice_1_0=ruleChoices		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"choice",
        		lv_choice_1_0, 
        		"Choices");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getEqualsSignGreaterThanSignKeyword_0_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_0_3_0_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
	otherlv_4=Open
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getOpenKeyword_0_3_1());
    }
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_5=ruleExpression
    {
        $current = $this_Expression_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getOpenParserRuleCall_2()); 
    }
    this_Open_6=ruleOpen
    {
        $current = $this_Open_6.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChoices
entryRuleChoices returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getChoicesRule()); }
	 iv_ruleChoices=ruleChoices 
	 { $current=$iv_ruleChoices.current; } 
	 EOF 
;

// Rule Choices
ruleChoices returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChoicesAccess().getChoiceParserRuleCall_0()); 
    }
    this_Choice_0=ruleChoice
    {
        $current = $this_Choice_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getChoicesAccess().getMultiExpressionExpressionAction_1_0(),
            $current);
    }
)(
	otherlv_2=VerticalLine
    {
    	newLeafNode(otherlv_2, grammarAccess.getChoicesAccess().getVerticalLineKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoicesAccess().getExpressionChoiceParserRuleCall_1_1_1_0()); 
	    }
		lv_expression_3_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoicesRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChoiceAccess().getRangeSpecificationParserRuleCall_0()); 
    }
    this_RangeSpecification_0=ruleRangeSpecification
    {
        $current = $this_RangeSpecification_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChoiceAccess().getSubtypeIndicationExpressionParserRuleCall_1()); 
    }
    this_SubtypeIndicationExpression_1=ruleSubtypeIndicationExpression
    {
        $current = $this_SubtypeIndicationExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChoiceAccess().getSimpleExpressionParserRuleCall_2()); 
    }
    this_SimpleExpression_2=ruleSimpleExpression
    {
        $current = $this_SimpleExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChoiceAccess().getOthersParserRuleCall_3()); 
    }
    this_Others_3=ruleOthers
    {
        $current = $this_Others_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenAccess().getOpenExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Open
    {
    	newLeafNode(otherlv_1, grammarAccess.getOpenAccess().getOpenKeyword_1());
    }
)
;





// Entry rule entryRuleAttributeDeclaration
entryRuleAttributeDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeDeclarationRule()); }
	 iv_ruleAttributeDeclaration=ruleAttributeDeclaration 
	 { $current=$iv_ruleAttributeDeclaration.current; } 
	 EOF 
;

// Rule AttributeDeclaration
ruleAttributeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Attribute
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeDeclarationAccess().getAttributeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeDeclarationAccess().getTypeIdentifierNameParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAttributeSpecification
entryRuleAttributeSpecification returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeSpecificationRule()); }
	 iv_ruleAttributeSpecification=ruleAttributeSpecification 
	 { $current=$iv_ruleAttributeSpecification.current; } 
	 EOF 
;

// Rule AttributeSpecification
ruleAttributeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Attribute
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeSpecificationAccess().getAttributeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeSpecificationAccess().getNameAttributeDesignatorParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAttributeDesignator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeSpecificationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"AttributeDesignator");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeSpecificationAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeSpecificationAccess().getEntityAttributeEntityParserRuleCall_3_0()); 
	    }
		lv_entity_3_0=ruleAttributeEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeSpecificationRule());
	        }
       		set(
       			$current, 
       			"entity",
        		lv_entity_3_0, 
        		"AttributeEntity");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeSpecificationAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeSpecificationAccess().getClassEntityClassEnumRuleCall_5_0()); 
	    }
		lv_class_5_0=ruleEntityClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeSpecificationRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_5_0, 
        		"EntityClass");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=Is
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttributeSpecificationAccess().getIsKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeSpecificationAccess().getIsExpressionParserRuleCall_7_0()); 
	    }
		lv_is_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeSpecificationRule());
	        }
       		set(
       			$current, 
       			"is",
        		lv_is_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getAttributeSpecificationAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleAttributeDesignator
entryRuleAttributeDesignator returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeDesignatorRule()); }
	 iv_ruleAttributeDesignator=ruleAttributeDesignator 
	 { $current=$iv_ruleAttributeDesignator.current; } 
	 EOF 
;

// Rule AttributeDesignator
ruleAttributeDesignator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeDesignatorAccess().getIdentifierNameParserRuleCall_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_1_0(),
            $current);
    }
)(
(
		lv_value_2_0=
	Range
    {
        newLeafNode(lv_value_2_0, grammarAccess.getAttributeDesignatorAccess().getValueRangeKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeDesignatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_2_0, "range");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_2_0(),
            $current);
    }
)(
(
		lv_value_4_0=
	Across
    {
        newLeafNode(lv_value_4_0, grammarAccess.getAttributeDesignatorAccess().getValueAcrossKeyword_2_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeDesignatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_4_0, "across");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_3_0(),
            $current);
    }
)(
(
		lv_value_6_0=
	Through
    {
        newLeafNode(lv_value_6_0, grammarAccess.getAttributeDesignatorAccess().getValueThroughKeyword_3_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeDesignatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_6_0, "through");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_4_0(),
            $current);
    }
)(
(
		lv_value_8_0=
	Reference
    {
        newLeafNode(lv_value_8_0, grammarAccess.getAttributeDesignatorAccess().getValueReferenceKeyword_4_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeDesignatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_8_0, "reference");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeDesignatorAccess().getIdentifierExpressionAction_5_0(),
            $current);
    }
)(
(
		lv_value_10_0=
	Tolerance
    {
        newLeafNode(lv_value_10_0, grammarAccess.getAttributeDesignatorAccess().getValueToleranceKeyword_5_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeDesignatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_10_0, "tolerance");
	    }

)
)))
;





// Entry rule entryRuleAttributeEntity
entryRuleAttributeEntity returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeEntityRule()); }
	 iv_ruleAttributeEntity=ruleAttributeEntity 
	 { $current=$iv_ruleAttributeEntity.current; } 
	 EOF 
;

// Rule AttributeEntity
ruleAttributeEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeEntityAccess().getAttributeEntityDesignatorParserRuleCall_0()); 
    }
    this_AttributeEntityDesignator_0=ruleAttributeEntityDesignator
    {
        $current = $this_AttributeEntityDesignator_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAttributeEntityAccess().getNameListNameAction_1_0(),
            $current);
    }
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeEntityAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeEntityAccess().getNameAttributeEntityDesignatorParserRuleCall_1_1_1_0()); 
	    }
		lv_name_3_0=ruleAttributeEntityDesignator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeEntityRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"AttributeEntityDesignator");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleAttributeEntityDesignator
entryRuleAttributeEntityDesignator returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeEntityDesignatorRule()); }
	 iv_ruleAttributeEntityDesignator=ruleAttributeEntityDesignator 
	 { $current=$iv_ruleAttributeEntityDesignator.current; } 
	 EOF 
;

// Rule AttributeEntityDesignator
ruleAttributeEntityDesignator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getIdentifierNameParserRuleCall_0_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_0_1_1_0()); 
	    }
		lv_signature_2_0=ruleSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeEntityDesignatorRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_2_0, 
        		"Signature");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getCharacterNameParserRuleCall_1_0()); 
    }
    this_CharacterName_3=ruleCharacterName
    {
        $current = $this_CharacterName_3.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_1_1_1_0()); 
	    }
		lv_signature_5_0=ruleSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeEntityDesignatorRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_5_0, 
        		"Signature");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getStringNameParserRuleCall_2_0()); 
    }
    this_StringName_6=ruleStringName
    {
        $current = $this_StringName_6.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAttributeEntityDesignatorAccess().getSignatureExpressionNameAction_2_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getSignatureSignatureParserRuleCall_2_1_1_0()); 
	    }
		lv_signature_8_0=ruleSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeEntityDesignatorRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_8_0, 
        		"Signature");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getOthersParserRuleCall_3()); 
    }
    this_Others_9=ruleOthers
    {
        $current = $this_Others_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeEntityDesignatorAccess().getAllParserRuleCall_4()); 
    }
    this_All_10=ruleAll
    {
        $current = $this_All_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNameSignature
entryRuleNameSignature returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNameSignatureRule()); }
	 iv_ruleNameSignature=ruleNameSignature 
	 { $current=$iv_ruleNameSignature.current; } 
	 EOF 
;

// Rule NameSignature
ruleNameSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameSignatureAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName
    {
        $current = $this_Name_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNameSignatureAccess().getSignatureExpressionNameAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameSignatureAccess().getSignatureSignatureParserRuleCall_1_1_0()); 
	    }
		lv_signature_2_0=ruleSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameSignatureRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_2_0, 
        		"Signature");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBlockConfiguration
entryRuleBlockConfiguration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBlockConfigurationRule()); }
	 iv_ruleBlockConfiguration=ruleBlockConfiguration 
	 { $current=$iv_ruleBlockConfiguration.current; } 
	 EOF 
;

// Rule BlockConfiguration
ruleBlockConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockConfigurationAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockConfigurationAccess().getNameNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockConfigurationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Use
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockConfigurationAccess().getUseKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockConfigurationAccess().getUseNameParserRuleCall_2_1_0()); 
	    }
		lv_use_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockConfigurationRule());
	        }
       		add(
       			$current, 
       			"use",
        		lv_use_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockConfigurationAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockConfigurationAccess().getUseNameParserRuleCall_2_2_1_0()); 
	    }
		lv_use_5_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockConfigurationRule());
	        }
       		add(
       			$current, 
       			"use",
        		lv_use_5_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getBlockConfigurationAccess().getSemicolonKeyword_2_3());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockConfigurationAccess().getItemConfigurationItemParserRuleCall_3_0()); 
	    }
		lv_item_7_0=ruleConfigurationItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockConfigurationRule());
	        }
       		add(
       			$current, 
       			"item",
        		lv_item_7_0, 
        		"ConfigurationItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_8=End
    {
    	newLeafNode(otherlv_8, grammarAccess.getBlockConfigurationAccess().getEndKeyword_4());
    }

	otherlv_9=For
    {
    	newLeafNode(otherlv_9, grammarAccess.getBlockConfigurationAccess().getForKeyword_5());
    }

	otherlv_10=Semicolon
    {
    	newLeafNode(otherlv_10, grammarAccess.getBlockConfigurationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getLabelLabelParserRuleCall_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockStatementAccess().getColonKeyword_1());
    }

	otherlv_2=Block
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockStatementAccess().getBlockKeyword_2());
    }
(
	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockStatementAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getGuardExpressionParserRuleCall_3_1_0()); 
	    }
		lv_guard_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getBlockStatementAccess().getRightParenthesisKeyword_3_2());
    }
)?(
	otherlv_6=Is
    {
    	newLeafNode(otherlv_6, grammarAccess.getBlockStatementAccess().getIsKeyword_4());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getGenericGenericsParserRuleCall_5_0_0()); 
	    }
		lv_generic_7_0=ruleGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"generic",
        		lv_generic_7_0, 
        		"Generics");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getGenericMapGenericMapsParserRuleCall_5_1_0_0()); 
	    }
		lv_genericMap_8_0=ruleGenericMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"genericMap",
        		lv_genericMap_8_0, 
        		"GenericMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getBlockStatementAccess().getSemicolonKeyword_5_1_1());
    }
)?)?((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getPortPortsParserRuleCall_6_0_0()); 
	    }
		lv_port_10_0=rulePorts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_10_0, 
        		"Ports");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getPortMapPortMapsParserRuleCall_6_1_0_0()); 
	    }
		lv_portMap_11_0=rulePortMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		set(
       			$current, 
       			"portMap",
        		lv_portMap_11_0, 
        		"PortMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getBlockStatementAccess().getSemicolonKeyword_6_1_1());
    }
)?)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getDeclarationBlockDeclarativeItemParserRuleCall_7_0()); 
	    }
		lv_declaration_13_0=ruleBlockDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_13_0, 
        		"BlockDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_14=Begin
    {
    	newLeafNode(otherlv_14, grammarAccess.getBlockStatementAccess().getBeginKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getStatementArchitectureStatementParserRuleCall_9_0()); 
	    }
		lv_statement_15_0=ruleArchitectureStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_15_0, 
        		"ArchitectureStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_16=End
    {
    	newLeafNode(otherlv_16, grammarAccess.getBlockStatementAccess().getEndKeyword_10());
    }

	otherlv_17=Block
    {
    	newLeafNode(otherlv_17, grammarAccess.getBlockStatementAccess().getBlockKeyword_11());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBlockStatementAccess().getIdentifierParserRuleCall_12()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_19=Semicolon
    {
    	newLeafNode(otherlv_19, grammarAccess.getBlockStatementAccess().getSemicolonKeyword_13());
    }
)
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Break
    {
    	newLeafNode(otherlv_3, grammarAccess.getBreakStatementAccess().getBreakKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_0_0()); 
	    }
		lv_break_4_0=ruleBreakStatementItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementRule());
	        }
       		add(
       			$current, 
       			"break",
        		lv_break_4_0, 
        		"BreakStatementItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getBreakStatementAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_1_1_0()); 
	    }
		lv_break_6_0=ruleBreakStatementItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementRule());
	        }
       		add(
       			$current, 
       			"break",
        		lv_break_6_0, 
        		"BreakStatementItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_7=When
    {
    	newLeafNode(otherlv_7, grammarAccess.getBreakStatementAccess().getWhenKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); 
	    }
		lv_when_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementRule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleConcurrentBreakStatement
entryRuleConcurrentBreakStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConcurrentBreakStatementRule()); }
	 iv_ruleConcurrentBreakStatement=ruleConcurrentBreakStatement 
	 { $current=$iv_ruleConcurrentBreakStatement.current; } 
	 EOF 
;

// Rule ConcurrentBreakStatement
ruleConcurrentBreakStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConcurrentBreakStatementAccess().getBreakStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentBreakStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentBreakStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getConcurrentBreakStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Break
    {
    	newLeafNode(otherlv_3, grammarAccess.getConcurrentBreakStatementAccess().getBreakKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_0_0()); 
	    }
		lv_break_4_0=ruleBreakStatementItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentBreakStatementRule());
	        }
       		add(
       			$current, 
       			"break",
        		lv_break_4_0, 
        		"BreakStatementItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getConcurrentBreakStatementAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentBreakStatementAccess().getBreakBreakStatementItemParserRuleCall_3_1_1_0()); 
	    }
		lv_break_6_0=ruleBreakStatementItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentBreakStatementRule());
	        }
       		add(
       			$current, 
       			"break",
        		lv_break_6_0, 
        		"BreakStatementItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_7=On
    {
    	newLeafNode(otherlv_7, grammarAccess.getConcurrentBreakStatementAccess().getOnKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentBreakStatementAccess().getSensitivityMultiNameParserRuleCall_4_1_0()); 
	    }
		lv_sensitivity_8_0=ruleMultiName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentBreakStatementRule());
	        }
       		set(
       			$current, 
       			"sensitivity",
        		lv_sensitivity_8_0, 
        		"MultiName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_9=When
    {
    	newLeafNode(otherlv_9, grammarAccess.getConcurrentBreakStatementAccess().getWhenKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentBreakStatementAccess().getWhenExpressionParserRuleCall_5_1_0()); 
	    }
		lv_when_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentBreakStatementRule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getConcurrentBreakStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleBreakStatementItem
entryRuleBreakStatementItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBreakStatementItemRule()); }
	 iv_ruleBreakStatementItem=ruleBreakStatementItem 
	 { $current=$iv_ruleBreakStatementItem.current; } 
	 EOF 
;

// Rule BreakStatementItem
ruleBreakStatementItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getBreakStatementItemAccess().getForKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementItemAccess().getNameNameParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementItemRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Use
    {
    	newLeafNode(otherlv_2, grammarAccess.getBreakStatementItemAccess().getUseKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementItemAccess().getUseNameParserRuleCall_1_0()); 
	    }
		lv_use_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementItemRule());
	        }
       		set(
       			$current, 
       			"use",
        		lv_use_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getBreakStatementItemAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBreakStatementItemAccess().getArrowExpressionParserRuleCall_3_0()); 
	    }
		lv_arrow_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBreakStatementItemRule());
	        }
       		set(
       			$current, 
       			"arrow",
        		lv_arrow_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	 iv_ruleCaseStatement=ruleCaseStatement 
	 { $current=$iv_ruleCaseStatement.current; } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseStatementAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=Case
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getCaseKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getCaseExpressionParserRuleCall_2_0()); 
	    }
		lv_case_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Is
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseStatementAccess().getIsKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getWhenCaseAlternativeParserRuleCall_4_0()); 
	    }
		lv_when_5_0=ruleCaseAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		add(
       			$current, 
       			"when",
        		lv_when_5_0, 
        		"CaseAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_6=End
    {
    	newLeafNode(otherlv_6, grammarAccess.getCaseStatementAccess().getEndKeyword_5());
    }

	otherlv_7=Case
    {
    	newLeafNode(otherlv_7, grammarAccess.getCaseStatementAccess().getCaseKeyword_6());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCaseStatementAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getCaseStatementAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleCaseAlternative
entryRuleCaseAlternative returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCaseAlternativeRule()); }
	 iv_ruleCaseAlternative=ruleCaseAlternative 
	 { $current=$iv_ruleCaseAlternative.current; } 
	 EOF 
;

// Rule CaseAlternative
ruleCaseAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=When
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseAlternativeAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAlternativeAccess().getChoiceChoicesParserRuleCall_1_0()); 
	    }
		lv_choice_1_0=ruleChoices		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
	        }
       		set(
       			$current, 
       			"choice",
        		lv_choice_1_0, 
        		"Choices");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAlternativeAccess().getStatementSequentialStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAll
entryRuleAll returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAllRule()); }
	 iv_ruleAll=ruleAll 
	 { $current=$iv_ruleAll.current; } 
	 EOF 
;

// Rule All
ruleAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAllAccess().getAllExpressionAction_0(),
            $current);
    }
)
	otherlv_1=All
    {
    	newLeafNode(otherlv_1, grammarAccess.getAllAccess().getAllKeyword_1());
    }
)
;





// Entry rule entryRuleOthers
entryRuleOthers returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOthersRule()); }
	 iv_ruleOthers=ruleOthers 
	 { $current=$iv_ruleOthers.current; } 
	 EOF 
;

// Rule Others
ruleOthers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOthersAccess().getOthersExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Others
    {
    	newLeafNode(otherlv_1, grammarAccess.getOthersAccess().getOthersKeyword_1());
    }
)
;





// Entry rule entryRuleComponentConfiguration
entryRuleComponentConfiguration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentConfigurationRule()); }
	 iv_ruleComponentConfiguration=ruleComponentConfiguration 
	 { $current=$iv_ruleComponentConfiguration.current; } 
	 EOF 
;

// Rule ComponentConfiguration
ruleComponentConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentConfigurationAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getListInstantiationListParserRuleCall_1_0()); 
	    }
		lv_list_1_0=ruleInstantiationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_1_0, 
        		"InstantiationList");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentConfigurationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getComponentNameParserRuleCall_3_0()); 
	    }
		lv_component_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_4=Use
    {
    	newLeafNode(otherlv_4, grammarAccess.getComponentConfigurationAccess().getUseKeyword_4_0_0());
    }
((
	otherlv_5=Entity
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentConfigurationAccess().getEntityKeyword_4_0_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getEntityNameParserRuleCall_4_0_1_0_1_0()); 
	    }
		lv_entity_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"entity",
        		lv_entity_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_7=Configuration
    {
    	newLeafNode(otherlv_7, grammarAccess.getComponentConfigurationAccess().getConfigurationKeyword_4_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getConfigurationNameParserRuleCall_4_0_1_1_1_0()); 
	    }
		lv_configuration_8_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"configuration",
        		lv_configuration_8_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	otherlv_9=Open
    {
    	newLeafNode(otherlv_9, grammarAccess.getComponentConfigurationAccess().getOpenKeyword_4_0_1_2());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getGenericMapGenericMapsParserRuleCall_4_1_0()); 
	    }
		lv_genericMap_10_0=ruleGenericMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"genericMap",
        		lv_genericMap_10_0, 
        		"GenericMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getPortMapPortMapsParserRuleCall_4_2_0()); 
	    }
		lv_portMap_11_0=rulePortMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"portMap",
        		lv_portMap_11_0, 
        		"PortMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getComponentConfigurationAccess().getSemicolonKeyword_4_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentConfigurationAccess().getBlockBlockConfigurationParserRuleCall_5_0()); 
	    }
		lv_block_13_0=ruleBlockConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentConfigurationRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_13_0, 
        		"BlockConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_14=End
    {
    	newLeafNode(otherlv_14, grammarAccess.getComponentConfigurationAccess().getEndKeyword_6());
    }

	otherlv_15=For
    {
    	newLeafNode(otherlv_15, grammarAccess.getComponentConfigurationAccess().getForKeyword_7());
    }

	otherlv_16=Semicolon
    {
    	newLeafNode(otherlv_16, grammarAccess.getComponentConfigurationAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Component
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentAccess().getIsKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getGenericGenericsParserRuleCall_3_0()); 
	    }
		lv_generic_3_0=ruleGenerics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"generic",
        		lv_generic_3_0, 
        		"Generics");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentAccess().getPortPortsParserRuleCall_4_0()); 
	    }
		lv_port_4_0=rulePorts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentRule());
	        }
       		set(
       			$current, 
       			"port",
        		lv_port_4_0, 
        		"Ports");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_5=End
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentAccess().getEndKeyword_5());
    }

	otherlv_6=Component
    {
    	newLeafNode(otherlv_6, grammarAccess.getComponentAccess().getComponentKeyword_6());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComponentAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getComponentAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleComponentInstantiationStatement
entryRuleComponentInstantiationStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentInstantiationStatementRule()); }
	 iv_ruleComponentInstantiationStatement=ruleComponentInstantiationStatement 
	 { $current=$iv_ruleComponentInstantiationStatement.current; } 
	 EOF 
;

// Rule ComponentInstantiationStatement
ruleComponentInstantiationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentInstantiationStatementAccess().getColonKeyword_1());
    }
(
	otherlv_2=Component
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentInstantiationStatementAccess().getComponentKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); 
	    }
		lv_genericMap_4_0=ruleGenericMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"genericMap",
        		lv_genericMap_4_0, 
        		"GenericMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); 
	    }
		lv_portMap_5_0=rulePortMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"portMap",
        		lv_portMap_5_0, 
        		"PortMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getComponentInstantiationStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleEntityInstantiationStatement
entryRuleEntityInstantiationStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEntityInstantiationStatementRule()); }
	 iv_ruleEntityInstantiationStatement=ruleEntityInstantiationStatement 
	 { $current=$iv_ruleEntityInstantiationStatement.current; } 
	 EOF 
;

// Rule EntityInstantiationStatement
ruleEntityInstantiationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEntityInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getEntityInstantiationStatementAccess().getColonKeyword_1());
    }

	otherlv_2=Entity
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntityInstantiationStatementAccess().getEntityKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); 
	    }
		lv_genericMap_4_0=ruleGenericMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"genericMap",
        		lv_genericMap_4_0, 
        		"GenericMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); 
	    }
		lv_portMap_5_0=rulePortMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"portMap",
        		lv_portMap_5_0, 
        		"PortMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getEntityInstantiationStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleConfigurationInstantiationStatement
entryRuleConfigurationInstantiationStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConfigurationInstantiationStatementRule()); }
	 iv_ruleConfigurationInstantiationStatement=ruleConfigurationInstantiationStatement 
	 { $current=$iv_ruleConfigurationInstantiationStatement.current; } 
	 EOF 
;

// Rule ConfigurationInstantiationStatement
ruleConfigurationInstantiationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationInstantiationStatementAccess().getLabelLabelParserRuleCall_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigurationInstantiationStatementAccess().getColonKeyword_1());
    }

	otherlv_2=Configuration
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigurationInstantiationStatementAccess().getConfigurationKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationInstantiationStatementAccess().getNameNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationInstantiationStatementAccess().getGenericMapGenericMapsParserRuleCall_4_0()); 
	    }
		lv_genericMap_4_0=ruleGenericMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"genericMap",
        		lv_genericMap_4_0, 
        		"GenericMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationInstantiationStatementAccess().getPortMapPortMapsParserRuleCall_5_0()); 
	    }
		lv_portMap_5_0=rulePortMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationInstantiationStatementRule());
	        }
       		set(
       			$current, 
       			"portMap",
        		lv_portMap_5_0, 
        		"PortMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getConfigurationInstantiationStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleCompositeNatureDefinition
entryRuleCompositeNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCompositeNatureDefinitionRule()); }
	 iv_ruleCompositeNatureDefinition=ruleCompositeNatureDefinition 
	 { $current=$iv_ruleCompositeNatureDefinition.current; } 
	 EOF 
;

// Rule CompositeNatureDefinition
ruleCompositeNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompositeNatureDefinitionAccess().getArrayNatureDefinitionParserRuleCall_0()); 
    }
    this_ArrayNatureDefinition_0=ruleArrayNatureDefinition
    {
        $current = $this_ArrayNatureDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompositeNatureDefinitionAccess().getRecordNatureDefinitionParserRuleCall_1()); 
    }
    this_RecordNatureDefinition_1=ruleRecordNatureDefinition
    {
        $current = $this_RecordNatureDefinition_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCompositeTypeDefinition
entryRuleCompositeTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCompositeTypeDefinitionRule()); }
	 iv_ruleCompositeTypeDefinition=ruleCompositeTypeDefinition 
	 { $current=$iv_ruleCompositeTypeDefinition.current; } 
	 EOF 
;

// Rule CompositeTypeDefinition
ruleCompositeTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompositeTypeDefinitionAccess().getArrayTypeDefinitionParserRuleCall_0()); 
    }
    this_ArrayTypeDefinition_0=ruleArrayTypeDefinition
    {
        $current = $this_ArrayTypeDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompositeTypeDefinitionAccess().getRecordTypeDefinitionParserRuleCall_1()); 
    }
    this_RecordTypeDefinition_1=ruleRecordTypeDefinition
    {
        $current = $this_RecordTypeDefinition_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSequentialSignalAssignmentStatement
entryRuleSequentialSignalAssignmentStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSequentialSignalAssignmentStatementRule()); }
	 iv_ruleSequentialSignalAssignmentStatement=ruleSequentialSignalAssignmentStatement 
	 { $current=$iv_ruleSequentialSignalAssignmentStatement.current; } 
	 EOF 
;

// Rule SequentialSignalAssignmentStatement
ruleSequentialSignalAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequentialSignalAssignmentStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		lv_postponed_2_0=
	Postponed
    {
        newLeafNode(lv_postponed_2_0, grammarAccess.getSequentialSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "postponed", true, "postponed");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_2_0()); 
	    }
		lv_target_3_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_3_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=LessThanSignEqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequentialSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_3());
    }
(
(
		lv_guarded_5_0=
	Guarded
    {
        newLeafNode(lv_guarded_5_0, grammarAccess.getSequentialSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "guarded", true, "guarded");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_5_0()); 
	    }
		lv_delay_6_0=ruleDelayMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_6_0, 
        		"DelayMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_7=Unaffected
    {
    	newLeafNode(otherlv_7, grammarAccess.getSequentialSignalAssignmentStatementAccess().getUnaffectedKeyword_6_0());
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialSignalAssignmentStatementAccess().getWaveformWaveformParserRuleCall_6_1_0_0()); 
	    }
		lv_waveform_8_0=ruleWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_8_0, 
        		"Waveform");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_9=Comma
    {
    	newLeafNode(otherlv_9, grammarAccess.getSequentialSignalAssignmentStatementAccess().getCommaKeyword_6_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequentialSignalAssignmentStatementAccess().getWaveformWaveformParserRuleCall_6_1_1_1_0()); 
	    }
		lv_waveform_10_0=ruleWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequentialSignalAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_10_0, 
        		"Waveform");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getSequentialSignalAssignmentStatementAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleConditionalSignalAssignmentStatement
entryRuleConditionalSignalAssignmentStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConditionalSignalAssignmentStatementRule()); }
	 iv_ruleConditionalSignalAssignmentStatement=ruleConditionalSignalAssignmentStatement 
	 { $current=$iv_ruleConditionalSignalAssignmentStatement.current; } 
	 EOF 
;

// Rule ConditionalSignalAssignmentStatement
ruleConditionalSignalAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalSignalAssignmentStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		lv_postponed_2_0=
	Postponed
    {
        newLeafNode(lv_postponed_2_0, grammarAccess.getConditionalSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "postponed", true, "postponed");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_2_0()); 
	    }
		lv_target_3_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_3_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=LessThanSignEqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_3());
    }
(
(
		lv_guarded_5_0=
	Guarded
    {
        newLeafNode(lv_guarded_5_0, grammarAccess.getConditionalSignalAssignmentStatementAccess().getGuardedGuardedKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "guarded", true, "guarded");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_5_0()); 
	    }
		lv_delay_6_0=ruleDelayMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_6_0, 
        		"DelayMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_6_0()); 
	    }
		lv_waveform_7_0=ruleConditionalWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_7_0, 
        		"ConditionalWaveform");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_8=Else
    {
    	newLeafNode(otherlv_8, grammarAccess.getConditionalSignalAssignmentStatementAccess().getElseKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_7_1_0()); 
	    }
		lv_waveform_9_0=ruleConditionalWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalSignalAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_9_0, 
        		"ConditionalWaveform");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_10=Semicolon
    {
    	newLeafNode(otherlv_10, grammarAccess.getConditionalSignalAssignmentStatementAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleSelectedSignalAssignmentStatement
entryRuleSelectedSignalAssignmentStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementRule()); }
	 iv_ruleSelectedSignalAssignmentStatement=ruleSelectedSignalAssignmentStatement 
	 { $current=$iv_ruleSelectedSignalAssignmentStatement.current; } 
	 EOF 
;

// Rule SelectedSignalAssignmentStatement
ruleSelectedSignalAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectedSignalAssignmentStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		lv_postponed_2_0=
	Postponed
    {
        newLeafNode(lv_postponed_2_0, grammarAccess.getSelectedSignalAssignmentStatementAccess().getPostponedPostponedKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "postponed", true, "postponed");
	    }

)
)?
	otherlv_3=With
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectedSignalAssignmentStatementAccess().getWithKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectedExpressionParserRuleCall_3_0()); 
	    }
		lv_selected_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"selected",
        		lv_selected_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Select
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectedSignalAssignmentStatementAccess().getSelectKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementAccess().getTargetTargetParserRuleCall_5_0()); 
	    }
		lv_target_6_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_6_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=LessThanSignEqualsSign
    {
    	newLeafNode(otherlv_7, grammarAccess.getSelectedSignalAssignmentStatementAccess().getLessThanSignEqualsSignKeyword_6());
    }
(
(
		lv_guarded_8_0=
	Guarded
    {
        newLeafNode(lv_guarded_8_0, grammarAccess.getSelectedSignalAssignmentStatementAccess().getGuardedGuardedKeyword_7_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "guarded", true, "guarded");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementAccess().getDelayDelayMechanismParserRuleCall_8_0()); 
	    }
		lv_delay_9_0=ruleDelayMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_9_0, 
        		"DelayMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_9_0()); 
	    }
		lv_waveform_10_0=ruleConditionalWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_10_0, 
        		"ConditionalWaveform");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_11=Comma
    {
    	newLeafNode(otherlv_11, grammarAccess.getSelectedSignalAssignmentStatementAccess().getCommaKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectedSignalAssignmentStatementAccess().getWaveformConditionalWaveformParserRuleCall_10_1_0()); 
	    }
		lv_waveform_12_0=ruleConditionalWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectedSignalAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_12_0, 
        		"ConditionalWaveform");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_13=Semicolon
    {
    	newLeafNode(otherlv_13, grammarAccess.getSelectedSignalAssignmentStatementAccess().getSemicolonKeyword_11());
    }
)
;





// Entry rule entryRuleSimpleSimultaneousStatement
entryRuleSimpleSimultaneousStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimpleSimultaneousStatementRule()); }
	 iv_ruleSimpleSimultaneousStatement=ruleSimpleSimultaneousStatement 
	 { $current=$iv_ruleSimpleSimultaneousStatement.current; } 
	 EOF 
;

// Rule SimpleSimultaneousStatement
ruleSimpleSimultaneousStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSimultaneousStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSimultaneousStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleSimultaneousStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSimultaneousStatementAccess().getLeftSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_left_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSimultaneousStatementRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=EqualsSignEqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleSimultaneousStatementAccess().getEqualsSignEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSimultaneousStatementAccess().getRightSimpleExpressionParserRuleCall_3_0()); 
	    }
		lv_right_4_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSimultaneousStatementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Tolerance
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSimultaneousStatementAccess().getToleranceExpressionParserRuleCall_4_1_0()); 
	    }
		lv_tolerance_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSimultaneousStatementRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getSimpleSimultaneousStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleConditionalWaveform
entryRuleConditionalWaveform returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConditionalWaveformRule()); }
	 iv_ruleConditionalWaveform=ruleConditionalWaveform 
	 { $current=$iv_ruleConditionalWaveform.current; } 
	 EOF 
;

// Rule ConditionalWaveform
ruleConditionalWaveform returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Unaffected
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionalWaveformAccess().getUnaffectedKeyword_0_0());
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalWaveformAccess().getWaveformWaveformParserRuleCall_0_1_0_0()); 
	    }
		lv_waveform_1_0=ruleWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalWaveformRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_1_0, 
        		"Waveform");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalWaveformAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalWaveformAccess().getWaveformWaveformParserRuleCall_0_1_1_1_0()); 
	    }
		lv_waveform_3_0=ruleWaveform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalWaveformRule());
	        }
       		add(
       			$current, 
       			"waveform",
        		lv_waveform_3_0, 
        		"Waveform");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
	otherlv_4=When
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalWaveformAccess().getWhenKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalWaveformAccess().getChoiceChoicesParserRuleCall_2_0()); 
	    }
		lv_choice_5_0=ruleChoices		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalWaveformRule());
	        }
       		set(
       			$current, 
       			"choice",
        		lv_choice_5_0, 
        		"Choices");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConfigurationItem
entryRuleConfigurationItem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConfigurationItemRule()); }
	 iv_ruleConfigurationItem=ruleConfigurationItem 
	 { $current=$iv_ruleConfigurationItem.current; } 
	 EOF 
;

// Rule ConfigurationItem
ruleConfigurationItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationItemAccess().getBlockConfigurationParserRuleCall_0()); 
    }
    this_BlockConfiguration_0=ruleBlockConfiguration
    {
        $current = $this_BlockConfiguration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConfigurationItemAccess().getComponentConfigurationParserRuleCall_1()); 
    }
    this_ComponentConfiguration_1=ruleComponentConfiguration
    {
        $current = $this_ComponentConfiguration_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConfigurationSpecification
entryRuleConfigurationSpecification returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConfigurationSpecificationRule()); }
	 iv_ruleConfigurationSpecification=ruleConfigurationSpecification 
	 { $current=$iv_ruleConfigurationSpecification.current; } 
	 EOF 
;

// Rule ConfigurationSpecification
ruleConfigurationSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationSpecificationAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationSpecificationAccess().getListInstantiationListParserRuleCall_1_0()); 
	    }
		lv_list_1_0=ruleInstantiationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationSpecificationRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_1_0, 
        		"InstantiationList");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getConfigurationSpecificationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationSpecificationAccess().getComponentNameParserRuleCall_3_0()); 
	    }
		lv_component_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationSpecificationRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Use
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigurationSpecificationAccess().getUseKeyword_4_0());
    }
((
	otherlv_5=Entity
    {
    	newLeafNode(otherlv_5, grammarAccess.getConfigurationSpecificationAccess().getEntityKeyword_4_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationSpecificationAccess().getEntityNameParserRuleCall_4_1_0_1_0()); 
	    }
		lv_entity_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationSpecificationRule());
	        }
       		set(
       			$current, 
       			"entity",
        		lv_entity_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_7=Configuration
    {
    	newLeafNode(otherlv_7, grammarAccess.getConfigurationSpecificationAccess().getConfigurationKeyword_4_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationSpecificationAccess().getConfigurationNameParserRuleCall_4_1_1_1_0()); 
	    }
		lv_configuration_8_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationSpecificationRule());
	        }
       		set(
       			$current, 
       			"configuration",
        		lv_configuration_8_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	otherlv_9=Open
    {
    	newLeafNode(otherlv_9, grammarAccess.getConfigurationSpecificationAccess().getOpenKeyword_4_1_2());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationSpecificationAccess().getGenericMapGenericMapsParserRuleCall_5_0()); 
	    }
		lv_genericMap_10_0=ruleGenericMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationSpecificationRule());
	        }
       		set(
       			$current, 
       			"genericMap",
        		lv_genericMap_10_0, 
        		"GenericMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationSpecificationAccess().getPortMapPortMapsParserRuleCall_6_0()); 
	    }
		lv_portMap_11_0=rulePortMaps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationSpecificationRule());
	        }
       		set(
       			$current, 
       			"portMap",
        		lv_portMap_11_0, 
        		"PortMaps");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getConfigurationSpecificationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleDelayMechanism
entryRuleDelayMechanism returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDelayMechanismRule()); }
	 iv_ruleDelayMechanism=ruleDelayMechanism 
	 { $current=$iv_ruleDelayMechanism.current; } 
	 EOF 
;

// Rule DelayMechanism
ruleDelayMechanism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDelayMechanismAccess().getTransportMechanismParserRuleCall_0()); 
    }
    this_TransportMechanism_0=ruleTransportMechanism
    {
        $current = $this_TransportMechanism_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDelayMechanismAccess().getRejectMechanismParserRuleCall_1()); 
    }
    this_RejectMechanism_1=ruleRejectMechanism
    {
        $current = $this_RejectMechanism_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRejectMechanism
entryRuleRejectMechanism returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRejectMechanismRule()); }
	 iv_ruleRejectMechanism=ruleRejectMechanism 
	 { $current=$iv_ruleRejectMechanism.current; } 
	 EOF 
;

// Rule RejectMechanism
ruleRejectMechanism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRejectMechanismAccess().getRejectMechanismAction_0(),
            $current);
    }
)(
	otherlv_1=Reject
    {
    	newLeafNode(otherlv_1, grammarAccess.getRejectMechanismAccess().getRejectKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRejectMechanismAccess().getRejectExpressionParserRuleCall_1_1_0()); 
	    }
		lv_reject_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRejectMechanismRule());
	        }
       		set(
       			$current, 
       			"reject",
        		lv_reject_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_3=Inertial
    {
    	newLeafNode(otherlv_3, grammarAccess.getRejectMechanismAccess().getInertialKeyword_2());
    }
)
;





// Entry rule entryRuleTransportMechanism
entryRuleTransportMechanism returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTransportMechanismRule()); }
	 iv_ruleTransportMechanism=ruleTransportMechanism 
	 { $current=$iv_ruleTransportMechanism.current; } 
	 EOF 
;

// Rule TransportMechanism
ruleTransportMechanism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransportMechanismAccess().getTransportMechanismAction_0(),
            $current);
    }
)
	otherlv_1=Transport
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransportMechanismAccess().getTransportKeyword_1());
    }
)
;





// Entry rule entryRuleDisconnectionSpecification
entryRuleDisconnectionSpecification returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDisconnectionSpecificationRule()); }
	 iv_ruleDisconnectionSpecification=ruleDisconnectionSpecification 
	 { $current=$iv_ruleDisconnectionSpecification.current; } 
	 EOF 
;

// Rule DisconnectionSpecification
ruleDisconnectionSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Disconnect
    {
    	newLeafNode(otherlv_0, grammarAccess.getDisconnectionSpecificationAccess().getDisconnectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisconnectionSpecificationAccess().getDisconnectMultiNameParserRuleCall_1_0()); 
	    }
		lv_disconnect_1_0=ruleMultiName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisconnectionSpecificationRule());
	        }
       		set(
       			$current, 
       			"disconnect",
        		lv_disconnect_1_0, 
        		"MultiName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getDisconnectionSpecificationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisconnectionSpecificationAccess().getTypeNameParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisconnectionSpecificationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=After
    {
    	newLeafNode(otherlv_4, grammarAccess.getDisconnectionSpecificationAccess().getAfterKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDisconnectionSpecificationAccess().getAfterExpressionParserRuleCall_5_0()); 
	    }
		lv_after_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDisconnectionSpecificationRule());
	        }
       		set(
       			$current, 
       			"after",
        		lv_after_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getDisconnectionSpecificationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleMultiName
entryRuleMultiName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMultiNameRule()); }
	 iv_ruleMultiName=ruleMultiName 
	 { $current=$iv_ruleMultiName.current; } 
	 EOF 
;

// Rule MultiName
ruleMultiName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiNameAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName
    {
        $current = $this_Name_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultiNameAccess().getNameListNameAction_1_0(),
            $current);
    }
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiNameAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiNameAccess().getNameNameParserRuleCall_1_1_1_0()); 
	    }
		lv_name_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiNameRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleMultiIdentifierName
entryRuleMultiIdentifierName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMultiIdentifierNameRule()); }
	 iv_ruleMultiIdentifierName=ruleMultiIdentifierName 
	 { $current=$iv_ruleMultiIdentifierName.current; } 
	 EOF 
;

// Rule MultiIdentifierName
ruleMultiIdentifierName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiIdentifierNameAccess().getIdentifierNameParserRuleCall_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultiIdentifierNameAccess().getNameListNameAction_1_0(),
            $current);
    }
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiIdentifierNameAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiIdentifierNameAccess().getNameIdentifierNameParserRuleCall_1_1_1_0()); 
	    }
		lv_name_3_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiIdentifierNameRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleInstantiationList
entryRuleInstantiationList returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstantiationListRule()); }
	 iv_ruleInstantiationList=ruleInstantiationList 
	 { $current=$iv_ruleInstantiationList.current; } 
	 EOF 
;

// Rule InstantiationList
ruleInstantiationList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstantiationListAccess().getMultiIdentifierNameParserRuleCall_0()); 
    }
    this_MultiIdentifierName_0=ruleMultiIdentifierName
    {
        $current = $this_MultiIdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstantiationListAccess().getOthersParserRuleCall_1()); 
    }
    this_Others_1=ruleOthers
    {
        $current = $this_Others_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstantiationListAccess().getAllParserRuleCall_2()); 
    }
    this_All_2=ruleAll
    {
        $current = $this_All_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEntityStatement
entryRuleEntityStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEntityStatementRule()); }
	 iv_ruleEntityStatement=ruleEntityStatement 
	 { $current=$iv_ruleEntityStatement.current; } 
	 EOF 
;

// Rule EntityStatement
ruleEntityStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityStatementAccess().getConcurrentAssertionStatementParserRuleCall_0()); 
    }
    this_ConcurrentAssertionStatement_0=ruleConcurrentAssertionStatement
    {
        $current = $this_ConcurrentAssertionStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityStatementAccess().getProcessStatementParserRuleCall_1()); 
    }
    this_ProcessStatement_1=ruleProcessStatement
    {
        $current = $this_ProcessStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEntityStatementAccess().getConcurrentProcedureCallStatementParserRuleCall_2()); 
    }
    this_ConcurrentProcedureCallStatement_2=ruleConcurrentProcedureCallStatement
    {
        $current = $this_ConcurrentProcedureCallStatement_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnumerationTypeDefinition
entryRuleEnumerationTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEnumerationTypeDefinitionRule()); }
	 iv_ruleEnumerationTypeDefinition=ruleEnumerationTypeDefinition 
	 { $current=$iv_ruleEnumerationTypeDefinition.current; } 
	 EOF 
;

// Rule EnumerationTypeDefinition
ruleEnumerationTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationTypeDefinitionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralEnumerationLiteralParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getLiteralEnumerationLiteralParserRuleCall_2_1_0()); 
	    }
		lv_literal_3_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"literal",
        		lv_literal_3_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumerationTypeDefinitionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralRule()); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnumerationLiteralAccess().getIdentifierNameParserRuleCall_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEnumerationLiteralAccess().getCharacterNameParserRuleCall_1()); 
    }
    this_CharacterName_1=ruleCharacterName
    {
        $current = $this_CharacterName_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExitStatement
entryRuleExitStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExitStatementRule()); }
	 iv_ruleExitStatement=ruleExitStatement 
	 { $current=$iv_ruleExitStatement.current; } 
	 EOF 
;

// Rule ExitStatement
ruleExitStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExitStatementAccess().getExitStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExitStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getExitStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Exit
    {
    	newLeafNode(otherlv_3, grammarAccess.getExitStatementAccess().getExitKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitStatementAccess().getExitIdentifierParserRuleCall_3_0()); 
	    }
		lv_exit_4_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitStatementRule());
	        }
       		set(
       			$current, 
       			"exit",
        		lv_exit_4_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_5=When
    {
    	newLeafNode(otherlv_5, grammarAccess.getExitStatementAccess().getWhenKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); 
	    }
		lv_when_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitStatementRule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getExitStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getRelationParserRuleCall_0()); 
    }
    this_Relation_0=ruleRelation
    {
        $current = $this_Relation_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getLogicalExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getOperatorLogicalOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightRelationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Relation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	 iv_ruleRelation=ruleRelation 
	 { $current=$iv_ruleRelation.current; } 
	 EOF 
;

// Rule Relation
ruleRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationAccess().getShiftExpressionParserRuleCall_0()); 
    }
    this_ShiftExpression_0=ruleShiftExpression
    {
        $current = $this_ShiftExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationAccess().getRelationalExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getOperatorRelationalOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRightShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getShiftExpressionRule()); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getShiftExpressionAccess().getSimpleExpressionParserRuleCall_0()); 
    }
    this_SimpleExpression_0=ruleSimpleExpression
    {
        $current = $this_SimpleExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getShiftExpressionAccess().getShiftExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getOperatorShiftOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShiftExpressionAccess().getRightSimpleExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	 iv_ruleSimpleExpression=ruleSimpleExpression 
	 { $current=$iv_ruleSimpleExpression.current; } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermExpressionParserRuleCall_0_0()); 
    }
    this_TermExpression_0=ruleTermExpression
    {
        $current = $this_TermExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSimpleExpressionAccess().getAddingExpressionLeftAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getOperatorAddingOperatorEnumRuleCall_0_1_1_0()); 
	    }
		lv_operator_2_0=ruleAddingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AddingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getRightTermExpressionParserRuleCall_0_1_2_0()); 
	    }
		lv_right_3_0=ruleTermExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TermExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getSignTermExpressionParserRuleCall_1_0()); 
    }
    this_SignTermExpression_4=ruleSignTermExpression
    {
        $current = $this_SignTermExpression_4.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSimpleExpressionAccess().getAddingExpressionLeftAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getOperatorAddingOperatorEnumRuleCall_1_1_1_0()); 
	    }
		lv_operator_6_0=ruleAddingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"AddingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getRightTermExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_right_7_0=ruleTermExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"TermExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleSignTermExpression
entryRuleSignTermExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignTermExpressionRule()); }
	 iv_ruleSignTermExpression=ruleSignTermExpression 
	 { $current=$iv_ruleSignTermExpression.current; } 
	 EOF 
;

// Rule SignTermExpression
ruleSignTermExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignTermExpressionAccess().getSignFactorParserRuleCall_0()); 
    }
    this_SignFactor_0=ruleSignFactor
    {
        $current = $this_SignFactor_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSignTermExpressionAccess().getMultiplyingExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignTermExpressionAccess().getOperatorMultiplyingOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplyingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignTermExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplyingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignTermExpressionAccess().getRightFactorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignTermExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTermExpression
entryRuleTermExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTermExpressionRule()); }
	 iv_ruleTermExpression=ruleTermExpression 
	 { $current=$iv_ruleTermExpression.current; } 
	 EOF 
;

// Rule TermExpression
ruleTermExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getFactorParserRuleCall_0()); 
    }
    this_Factor_0=ruleFactor
    {
        $current = $this_Factor_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermExpressionAccess().getMultiplyingExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExpressionAccess().getOperatorMultiplyingOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplyingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplyingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermExpressionAccess().getRightFactorParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0_0()); 
    }
    this_Primary_0=rulePrimary
    {
        $current = $this_Primary_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFactorAccess().getPowerExpressionLeftAction_0_1_0(),
            $current);
    }
)
	otherlv_2=AsteriskAsterisk
    {
    	newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getAsteriskAsteriskKeyword_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_0_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFactorAccess().getUnaryExpressionParserRuleCall_1()); 
    }
    this_UnaryExpression_4=ruleUnaryExpression
    {
        $current = $this_UnaryExpression_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSignFactor
entryRuleSignFactor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignFactorRule()); }
	 iv_ruleSignFactor=ruleSignFactor 
	 { $current=$iv_ruleSignFactor.current; } 
	 EOF 
;

// Rule SignFactor
ruleSignFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignFactorAccess().getSignPrimaryParserRuleCall_0_0()); 
    }
    this_SignPrimary_0=ruleSignPrimary
    {
        $current = $this_SignPrimary_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSignFactorAccess().getPowerExpressionLeftAction_0_1_0(),
            $current);
    }
)
	otherlv_2=AsteriskAsterisk
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignFactorAccess().getAsteriskAsteriskKeyword_0_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignFactorAccess().getRightPrimaryParserRuleCall_0_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignFactorRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignFactorAccess().getSignUnaryExpressionParserRuleCall_1()); 
    }
    this_SignUnaryExpression_4=ruleSignUnaryExpression
    {
        $current = $this_SignUnaryExpression_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignUnaryExpression
entryRuleSignUnaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignUnaryExpressionRule()); }
	 iv_ruleSignUnaryExpression=ruleSignUnaryExpression 
	 { $current=$iv_ruleSignUnaryExpression.current; } 
	 EOF 
;

// Rule SignUnaryExpression
ruleSignUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignUnaryExpressionAccess().getSignExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignUnaryExpressionAccess().getSignSignEnumRuleCall_1_0()); 
	    }
		lv_sign_1_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_1_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSignPrimary
entryRuleSignPrimary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignPrimaryRule()); }
	 iv_ruleSignPrimary=ruleSignPrimary 
	 { $current=$iv_ruleSignPrimary.current; } 
	 EOF 
;

// Rule SignPrimary
ruleSignPrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignPrimaryAccess().getSignExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignPrimaryAccess().getSignSignEnumRuleCall_1_0()); 
	    }
		lv_sign_1_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignPrimaryRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_1_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignPrimaryAccess().getExpressionPrimaryParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignPrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAllocatorExpressionParserRuleCall_0()); 
    }
    this_AllocatorExpression_0=ruleAllocatorExpression
    {
        $current = $this_AllocatorExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getNameExpressionParserRuleCall_1()); 
    }
    this_NameExpression_1=ruleNameExpression
    {
        $current = $this_NameExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getNullExpressionParserRuleCall_2()); 
    }
    this_NullExpression_2=ruleNullExpression
    {
        $current = $this_NullExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getBitStringNameParserRuleCall_3()); 
    }
    this_BitStringName_3=ruleBitStringName
    {
        $current = $this_BitStringName_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getCharacterNameParserRuleCall_4()); 
    }
    this_CharacterName_4=ruleCharacterName
    {
        $current = $this_CharacterName_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getValueExpressionParserRuleCall_5()); 
    }
    this_ValueExpression_5=ruleValueExpression
    {
        $current = $this_ValueExpression_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAggregateParserRuleCall_6()); 
    }
    this_Aggregate_6=ruleAggregate
    {
        $current = $this_Aggregate_6.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFileDeclaration
entryRuleFileDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFileDeclarationRule()); }
	 iv_ruleFileDeclaration=ruleFileDeclaration 
	 { $current=$iv_ruleFileDeclaration.current; } 
	 EOF 
;

// Rule FileDeclaration
ruleFileDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=File
    {
    	newLeafNode(otherlv_0, grammarAccess.getFileDeclarationAccess().getFileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getFileDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_4=Open
    {
    	newLeafNode(otherlv_4, grammarAccess.getFileDeclarationAccess().getOpenKeyword_4_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileDeclarationAccess().getOpenExpressionParserRuleCall_4_0_1_0()); 
	    }
		lv_open_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileDeclarationRule());
	        }
       		set(
       			$current, 
       			"open",
        		lv_open_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=Is
    {
    	newLeafNode(otherlv_6, grammarAccess.getFileDeclarationAccess().getIsKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileDeclarationAccess().getIsExpressionParserRuleCall_4_2_0()); 
	    }
		lv_is_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileDeclarationRule());
	        }
       		set(
       			$current, 
       			"is",
        		lv_is_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getFileDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleInterfaceFileDeclaration
entryRuleInterfaceFileDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInterfaceFileDeclarationRule()); }
	 iv_ruleInterfaceFileDeclaration=ruleInterfaceFileDeclaration 
	 { $current=$iv_ruleInterfaceFileDeclaration.current; } 
	 EOF 
;

// Rule InterfaceFileDeclaration
ruleInterfaceFileDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=File
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceFileDeclarationAccess().getFileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceFileDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceFileDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceFileDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceFileDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceFileDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFileTypeDefinition
entryRuleFileTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFileTypeDefinitionRule()); }
	 iv_ruleFileTypeDefinition=ruleFileTypeDefinition 
	 { $current=$iv_ruleFileTypeDefinition.current; } 
	 EOF 
;

// Rule FileTypeDefinition
ruleFileTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=File
    {
    	newLeafNode(otherlv_0, grammarAccess.getFileTypeDefinitionAccess().getFileKeyword_0());
    }

	otherlv_1=Of
    {
    	newLeafNode(otherlv_1, grammarAccess.getFileTypeDefinitionAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileTypeDefinitionAccess().getTypeNameParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGenerateStatement
entryRuleGenerateStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGenerateStatementRule()); }
	 iv_ruleGenerateStatement=ruleGenerateStatement 
	 { $current=$iv_ruleGenerateStatement.current; } 
	 EOF 
;

// Rule GenerateStatement
ruleGenerateStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGenerateStatementAccess().getLabelLabelParserRuleCall_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getGenerateStatementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenerateStatementAccess().getSchemeGenerationSchemeParserRuleCall_2_0()); 
	    }
		lv_scheme_2_0=ruleGenerationScheme		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
	        }
       		set(
       			$current, 
       			"scheme",
        		lv_scheme_2_0, 
        		"GenerationScheme");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Generate
    {
    	newLeafNode(otherlv_3, grammarAccess.getGenerateStatementAccess().getGenerateKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getGenerateStatementAccess().getDeclarationBlockDeclarativeItemParserRuleCall_4_0_0()); 
	    }
		lv_declaration_4_0=ruleBlockDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_4_0, 
        		"BlockDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=Begin
    {
    	newLeafNode(otherlv_5, grammarAccess.getGenerateStatementAccess().getBeginKeyword_4_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getGenerateStatementAccess().getStatementArchitectureStatementParserRuleCall_5_0()); 
	    }
		lv_statement_6_0=ruleArchitectureStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_6_0, 
        		"ArchitectureStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_7=End
    {
    	newLeafNode(otherlv_7, grammarAccess.getGenerateStatementAccess().getEndKeyword_6());
    }

	otherlv_8=Generate
    {
    	newLeafNode(otherlv_8, grammarAccess.getGenerateStatementAccess().getGenerateKeyword_7());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGenerateStatementAccess().getIdentifierParserRuleCall_8()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_10=Semicolon
    {
    	newLeafNode(otherlv_10, grammarAccess.getGenerateStatementAccess().getSemicolonKeyword_9());
    }
)
;





// Entry rule entryRuleGenerationScheme
entryRuleGenerationScheme returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGenerationSchemeRule()); }
	 iv_ruleGenerationScheme=ruleGenerationScheme 
	 { $current=$iv_ruleGenerationScheme.current; } 
	 EOF 
;

// Rule GenerationScheme
ruleGenerationScheme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGenerationSchemeAccess().getForGenerationSchemeParserRuleCall_0()); 
    }
    this_ForGenerationScheme_0=ruleForGenerationScheme
    {
        $current = $this_ForGenerationScheme_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGenerationSchemeAccess().getIfGenerationSchemeParserRuleCall_1()); 
    }
    this_IfGenerationScheme_1=ruleIfGenerationScheme
    {
        $current = $this_IfGenerationScheme_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForGenerationScheme
entryRuleForGenerationScheme returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForGenerationSchemeRule()); }
	 iv_ruleForGenerationScheme=ruleForGenerationScheme 
	 { $current=$iv_ruleForGenerationScheme.current; } 
	 EOF 
;

// Rule ForGenerationScheme
ruleForGenerationScheme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getForGenerationSchemeAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForGenerationSchemeAccess().getVariableIdentifierParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForGenerationSchemeRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=In
    {
    	newLeafNode(otherlv_2, grammarAccess.getForGenerationSchemeAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForGenerationSchemeAccess().getInDiscreteRangeParserRuleCall_3_0()); 
	    }
		lv_in_3_0=ruleDiscreteRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForGenerationSchemeRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_3_0, 
        		"DiscreteRange");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfGenerationScheme
entryRuleIfGenerationScheme returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfGenerationSchemeRule()); }
	 iv_ruleIfGenerationScheme=ruleIfGenerationScheme 
	 { $current=$iv_ruleIfGenerationScheme.current; } 
	 EOF 
;

// Rule IfGenerationScheme
ruleIfGenerationScheme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=If
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfGenerationSchemeAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfGenerationSchemeAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfGenerationSchemeRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGenerics
entryRuleGenerics returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGenericsRule()); }
	 iv_ruleGenerics=ruleGenerics 
	 { $current=$iv_ruleGenerics.current; } 
	 EOF 
;

// Rule Generics
ruleGenerics returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Generic
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenericsAccess().getGenericKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getGenericsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericsAccess().getDeclarationGenericDeclarationParserRuleCall_2_0()); 
	    }
		lv_declaration_2_0=ruleGenericDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"GenericDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getGenericsAccess().getSemicolonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericsAccess().getDeclarationGenericDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_declaration_4_0=ruleGenericDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_4_0, 
        		"GenericDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getGenericsAccess().getRightParenthesisKeyword_4());
    }

	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getGenericsAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleGenericMaps
entryRuleGenericMaps returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGenericMapsRule()); }
	 iv_ruleGenericMaps=ruleGenericMaps 
	 { $current=$iv_ruleGenericMaps.current; } 
	 EOF 
;

// Rule GenericMaps
ruleGenericMaps returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Generic
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenericMapsAccess().getGenericKeyword_0());
    }

	otherlv_1=Map
    {
    	newLeafNode(otherlv_1, grammarAccess.getGenericMapsAccess().getMapKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getGenericMapsAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMapsAccess().getGenericParameterParserRuleCall_3_0()); 
	    }
		lv_generic_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMapsRule());
	        }
       		add(
       			$current, 
       			"generic",
        		lv_generic_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getGenericMapsAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericMapsAccess().getGenericParameterParserRuleCall_4_1_0()); 
	    }
		lv_generic_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericMapsRule());
	        }
       		add(
       			$current, 
       			"generic",
        		lv_generic_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getGenericMapsAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleGroupDeclaration
entryRuleGroupDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupDeclarationRule()); }
	 iv_ruleGroupDeclaration=ruleGroupDeclaration 
	 { $current=$iv_ruleGroupDeclaration.current; } 
	 EOF 
;

// Rule GroupDeclaration
ruleGroupDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Group
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupDeclarationAccess().getGroupKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupDeclarationAccess().getIsNameParserRuleCall_3_0()); 
	    }
		lv_is_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupDeclarationRule());
	        }
       		set(
       			$current, 
       			"is",
        		lv_is_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=LeftParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getGroupDeclarationAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupDeclarationAccess().getMemberGroupConstituentsParserRuleCall_5_0()); 
	    }
		lv_member_5_0=ruleGroupConstituents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupDeclarationRule());
	        }
       		set(
       			$current, 
       			"member",
        		lv_member_5_0, 
        		"GroupConstituents");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getGroupDeclarationAccess().getRightParenthesisKeyword_6());
    }

	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getGroupDeclarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleGroupConstituent
entryRuleGroupConstituent returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupConstituentRule()); }
	 iv_ruleGroupConstituent=ruleGroupConstituent 
	 { $current=$iv_ruleGroupConstituent.current; } 
	 EOF 
;

// Rule GroupConstituent
ruleGroupConstituent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupConstituentAccess().getNameParserRuleCall_0()); 
    }
    this_Name_0=ruleName
    {
        $current = $this_Name_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupConstituentAccess().getCharacterNameParserRuleCall_1()); 
    }
    this_CharacterName_1=ruleCharacterName
    {
        $current = $this_CharacterName_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGroupConstituents
entryRuleGroupConstituents returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupConstituentsRule()); }
	 iv_ruleGroupConstituents=ruleGroupConstituents 
	 { $current=$iv_ruleGroupConstituents.current; } 
	 EOF 
;

// Rule GroupConstituents
ruleGroupConstituents returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGroupConstituentsAccess().getGroupConstituentParserRuleCall_0()); 
    }
    this_GroupConstituent_0=ruleGroupConstituent
    {
        $current = $this_GroupConstituent_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getGroupConstituentsAccess().getNameListNameAction_1_0(),
            $current);
    }
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupConstituentsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupConstituentsAccess().getNameGroupConstituentParserRuleCall_1_1_1_0()); 
	    }
		lv_name_3_0=ruleGroupConstituent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupConstituentsRule());
	        }
       		add(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"GroupConstituent");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleGroupTemplateDeclaration
entryRuleGroupTemplateDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGroupTemplateDeclarationRule()); }
	 iv_ruleGroupTemplateDeclaration=ruleGroupTemplateDeclaration 
	 { $current=$iv_ruleGroupTemplateDeclaration.current; } 
	 EOF 
;

// Rule GroupTemplateDeclaration
ruleGroupTemplateDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Group
    {
    	newLeafNode(otherlv_0, grammarAccess.getGroupTemplateDeclarationAccess().getGroupKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupTemplateDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupTemplateDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getGroupTemplateDeclarationAccess().getIsKeyword_2());
    }

	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupTemplateDeclarationAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupTemplateDeclarationAccess().getEntryEntityClassEnumRuleCall_4_0()); 
	    }
		lv_entry_4_0=ruleEntityClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupTemplateDeclarationRule());
	        }
       		add(
       			$current, 
       			"entry",
        		lv_entry_4_0, 
        		"EntityClass");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupTemplateDeclarationAccess().getLessThanSignGreaterThanSignKeyword_5());
    }
)?(
	otherlv_6=Comma
    {
    	newLeafNode(otherlv_6, grammarAccess.getGroupTemplateDeclarationAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupTemplateDeclarationAccess().getEntryEntityClassEnumRuleCall_6_1_0()); 
	    }
		lv_entry_7_0=ruleEntityClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupTemplateDeclarationRule());
	        }
       		add(
       			$current, 
       			"entry",
        		lv_entry_7_0, 
        		"EntityClass");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_8=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_8, grammarAccess.getGroupTemplateDeclarationAccess().getLessThanSignGreaterThanSignKeyword_6_2());
    }
)?)*
	otherlv_9=RightParenthesis
    {
    	newLeafNode(otherlv_9, grammarAccess.getGroupTemplateDeclarationAccess().getRightParenthesisKeyword_7());
    }

	otherlv_10=Semicolon
    {
    	newLeafNode(otherlv_10, grammarAccess.getGroupTemplateDeclarationAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=If
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getTestIfStatementTestParserRuleCall_2_0()); 
	    }
		lv_test_3_0=ruleIfStatementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"test",
        		lv_test_3_0, 
        		"IfStatementTest");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Elsif
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getElsifKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getTestIfStatementTestParserRuleCall_3_1_0()); 
	    }
		lv_test_5_0=ruleIfStatementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"test",
        		lv_test_5_0, 
        		"IfStatementTest");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	otherlv_6=Else
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getStatementSequentialStatementParserRuleCall_4_1_0()); 
	    }
		lv_statement_7_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_7_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?
	otherlv_8=End
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfStatementAccess().getEndKeyword_5());
    }

	otherlv_9=If
    {
    	newLeafNode(otherlv_9, grammarAccess.getIfStatementAccess().getIfKeyword_6());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIfStatementAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getIfStatementAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleIfStatementTest
entryRuleIfStatementTest returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfStatementTestRule()); }
	 iv_ruleIfStatementTest=ruleIfStatementTest 
	 { $current=$iv_ruleIfStatementTest.current; } 
	 EOF 
;

// Rule IfStatementTest
ruleIfStatementTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementTestAccess().getConditionExpressionParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementTestRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Then
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementTestAccess().getThenKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementTestAccess().getStatementSequentialStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementTestRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getRangeConstraintParserRuleCall_0()); 
    }
    this_RangeConstraint_0=ruleRangeConstraint
    {
        $current = $this_RangeConstraint_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getIndexConstraintParserRuleCall_1()); 
    }
    this_IndexConstraint_1=ruleIndexConstraint
    {
        $current = $this_IndexConstraint_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRangeConstraint
entryRuleRangeConstraint returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRangeConstraintRule()); }
	 iv_ruleRangeConstraint=ruleRangeConstraint 
	 { $current=$iv_ruleRangeConstraint.current; } 
	 EOF 
;

// Rule RangeConstraint
ruleRangeConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Range
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeConstraintAccess().getRangeKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRangeConstraintAccess().getRangeParserRuleCall_1()); 
    }
    this_Range_1=ruleRange
    {
        $current = $this_Range_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIndexConstraint
entryRuleIndexConstraint returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIndexConstraintRule()); }
	 iv_ruleIndexConstraint=ruleIndexConstraint 
	 { $current=$iv_ruleIndexConstraint.current; } 
	 EOF 
;

// Rule IndexConstraint
ruleIndexConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getIndexConstraintAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIndexConstraintAccess().getDiscreteRangeParserRuleCall_1()); 
    }
    this_DiscreteRange_1=ruleDiscreteRange
    {
        $current = $this_DiscreteRange_1.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getIndexConstraintAccess().getMultiExpressionExpressionAction_2_0(),
            $current);
    }
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getIndexConstraintAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIndexConstraintAccess().getExpressionDiscreteRangeParserRuleCall_2_1_1_0()); 
	    }
		lv_expression_4_0=ruleDiscreteRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIndexConstraintRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"DiscreteRange");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getIndexConstraintAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleDiscreteRange
entryRuleDiscreteRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDiscreteRangeRule()); }
	 iv_ruleDiscreteRange=ruleDiscreteRange 
	 { $current=$iv_ruleDiscreteRange.current; } 
	 EOF 
;

// Rule DiscreteRange
ruleDiscreteRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDiscreteRangeAccess().getRangeSpecificationParserRuleCall_0()); 
    }
    this_RangeSpecification_0=ruleRangeSpecification
    {
        $current = $this_RangeSpecification_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDiscreteRangeAccess().getSubtypeIndicationExpressionParserRuleCall_1()); 
    }
    this_SubtypeIndicationExpression_1=ruleSubtypeIndicationExpression
    {
        $current = $this_SubtypeIndicationExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRangeAccess().getRangeSpecificationParserRuleCall_0()); 
    }
    this_RangeSpecification_0=ruleRangeSpecification
    {
        $current = $this_RangeSpecification_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRangeAccess().getSimpleExpressionParserRuleCall_1()); 
    }
    this_SimpleExpression_1=ruleSimpleExpression
    {
        $current = $this_SimpleExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRangeSpecification
entryRuleRangeSpecification returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRangeSpecificationRule()); }
	 iv_ruleRangeSpecification=ruleRangeSpecification 
	 { $current=$iv_ruleRangeSpecification.current; } 
	 EOF 
;

// Rule RangeSpecification
ruleRangeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRangeSpecificationAccess().getRangeExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeSpecificationAccess().getLeftSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_left_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeSpecificationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeSpecificationAccess().getDirectionRangeDirectionEnumRuleCall_2_0()); 
	    }
		lv_direction_2_0=ruleRangeDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeSpecificationRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_2_0, 
        		"RangeDirection");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeSpecificationAccess().getRightSimpleExpressionParserRuleCall_3_0()); 
	    }
		lv_right_3_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeSpecificationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGenericDeclaration
entryRuleGenericDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGenericDeclarationRule()); }
	 iv_ruleGenericDeclaration=ruleGenericDeclaration 
	 { $current=$iv_ruleGenericDeclaration.current; } 
	 EOF 
;

// Rule GenericDeclaration
ruleGenericDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getGenericDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall()); 
    }
    this_InterfaceConstantDeclaration_0=ruleInterfaceConstantDeclaration
    {
        $current = $this_InterfaceConstantDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePortDeclaration
entryRulePortDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortDeclarationRule()); }
	 iv_rulePortDeclaration=rulePortDeclaration 
	 { $current=$iv_rulePortDeclaration.current; } 
	 EOF 
;

// Rule PortDeclaration
rulePortDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPortDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall()); 
    }
    this_InterfaceSignalDeclaration_0=ruleInterfaceSignalDeclaration
    {
        $current = $this_InterfaceSignalDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFunctionParameterDeclaration
entryRuleFunctionParameterDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionParameterDeclarationRule()); }
	 iv_ruleFunctionParameterDeclaration=ruleFunctionParameterDeclaration 
	 { $current=$iv_ruleFunctionParameterDeclaration.current; } 
	 EOF 
;

// Rule FunctionParameterDeclaration
ruleFunctionParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall_0()); 
    }
    this_InterfaceConstantDeclaration_0=ruleInterfaceConstantDeclaration
    {
        $current = $this_InterfaceConstantDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall_1()); 
    }
    this_InterfaceSignalDeclaration_1=ruleInterfaceSignalDeclaration
    {
        $current = $this_InterfaceSignalDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceVariableDeclarationParserRuleCall_2()); 
    }
    this_InterfaceVariableDeclaration_2=ruleInterfaceVariableDeclaration
    {
        $current = $this_InterfaceVariableDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionParameterDeclarationAccess().getInterfaceFileDeclarationParserRuleCall_3()); 
    }
    this_InterfaceFileDeclaration_3=ruleInterfaceFileDeclaration
    {
        $current = $this_InterfaceFileDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProcedureParameterDeclaration
entryRuleProcedureParameterDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProcedureParameterDeclarationRule()); }
	 iv_ruleProcedureParameterDeclaration=ruleProcedureParameterDeclaration 
	 { $current=$iv_ruleProcedureParameterDeclaration.current; } 
	 EOF 
;

// Rule ProcedureParameterDeclaration
ruleProcedureParameterDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceVariableDeclarationParserRuleCall_0()); 
    }
    this_InterfaceVariableDeclaration_0=ruleInterfaceVariableDeclaration
    {
        $current = $this_InterfaceVariableDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceSignalDeclarationParserRuleCall_1()); 
    }
    this_InterfaceSignalDeclaration_1=ruleInterfaceSignalDeclaration
    {
        $current = $this_InterfaceSignalDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceConstantDeclarationParserRuleCall_2()); 
    }
    this_InterfaceConstantDeclaration_2=ruleInterfaceConstantDeclaration
    {
        $current = $this_InterfaceConstantDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcedureParameterDeclarationAccess().getInterfaceFileDeclarationParserRuleCall_3()); 
    }
    this_InterfaceFileDeclaration_3=ruleInterfaceFileDeclaration
    {
        $current = $this_InterfaceFileDeclaration_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	 iv_ruleLoopStatement=ruleLoopStatement 
	 { $current=$iv_ruleLoopStatement.current; } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLoopStatementAccess().getLoopStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopStatementAccess().getColonKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getIterationIterationSchemeParserRuleCall_2_0()); 
	    }
		lv_iteration_3_0=ruleIterationScheme		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"iteration",
        		lv_iteration_3_0, 
        		"IterationScheme");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_4=Loop
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopStatementAccess().getLoopKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getStatementSequentialStatementParserRuleCall_4_0()); 
	    }
		lv_statement_5_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_5_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_6=End
    {
    	newLeafNode(otherlv_6, grammarAccess.getLoopStatementAccess().getEndKeyword_5());
    }

	otherlv_7=Loop
    {
    	newLeafNode(otherlv_7, grammarAccess.getLoopStatementAccess().getLoopKeyword_6());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLoopStatementAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getLoopStatementAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleIterationScheme
entryRuleIterationScheme returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIterationSchemeRule()); }
	 iv_ruleIterationScheme=ruleIterationScheme 
	 { $current=$iv_ruleIterationScheme.current; } 
	 EOF 
;

// Rule IterationScheme
ruleIterationScheme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIterationSchemeAccess().getWhileIterationSchemeParserRuleCall_0()); 
    }
    this_WhileIterationScheme_0=ruleWhileIterationScheme
    {
        $current = $this_WhileIterationScheme_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIterationSchemeAccess().getForIterationSchemeParserRuleCall_1()); 
    }
    this_ForIterationScheme_1=ruleForIterationScheme
    {
        $current = $this_ForIterationScheme_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWhileIterationScheme
entryRuleWhileIterationScheme returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWhileIterationSchemeRule()); }
	 iv_ruleWhileIterationScheme=ruleWhileIterationScheme 
	 { $current=$iv_ruleWhileIterationScheme.current; } 
	 EOF 
;

// Rule WhileIterationScheme
ruleWhileIterationScheme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=While
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileIterationSchemeAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileIterationSchemeAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileIterationSchemeRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForIterationScheme
entryRuleForIterationScheme returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForIterationSchemeRule()); }
	 iv_ruleForIterationScheme=ruleForIterationScheme 
	 { $current=$iv_ruleForIterationScheme.current; } 
	 EOF 
;

// Rule ForIterationScheme
ruleForIterationScheme returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getForIterationSchemeAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForIterationSchemeAccess().getVariableIdentifierParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForIterationSchemeRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=In
    {
    	newLeafNode(otherlv_2, grammarAccess.getForIterationSchemeAccess().getInKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForIterationSchemeAccess().getInDiscreteRangeParserRuleCall_3_0()); 
	    }
		lv_in_3_0=ruleDiscreteRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForIterationSchemeRule());
	        }
       		set(
       			$current, 
       			"in",
        		lv_in_3_0, 
        		"DiscreteRange");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleName
entryRuleName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameAccess().getNamePrefixParserRuleCall_0()); 
    }
    this_NamePrefix_0=ruleNamePrefix
    {
        $current = $this_NamePrefix_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getNameAccess().getNameExpressionElementAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameAccess().getElementNameSuffixParserRuleCall_1_1_0()); 
	    }
		lv_element_2_0=ruleNameSuffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameRule());
	        }
       		add(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"NameSuffix");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleNameExpression
entryRuleNameExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNameExpressionRule()); }
	 iv_ruleNameExpression=ruleNameExpression 
	 { $current=$iv_ruleNameExpression.current; } 
	 EOF 
;

// Rule NameExpression
ruleNameExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNameExpressionAccess().getNameExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getElementNamePrefixParserRuleCall_0_1_0()); 
	    }
		lv_element_1_0=ruleNamePrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		add(
       			$current, 
       			"element",
        		lv_element_1_0, 
        		"NamePrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNameExpressionAccess().getElementNameSuffixParserRuleCall_0_2_0()); 
	    }
		lv_element_2_0=ruleNameSuffix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNameExpressionRule());
	        }
       		add(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"NameSuffix");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameExpressionAccess().getNamePrefixExpressionParserRuleCall_1()); 
    }
    this_NamePrefixExpression_3=ruleNamePrefixExpression
    {
        $current = $this_NamePrefixExpression_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamePrefix
entryRuleNamePrefix returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNamePrefixRule()); }
	 iv_ruleNamePrefix=ruleNamePrefix 
	 { $current=$iv_ruleNamePrefix.current; } 
	 EOF 
;

// Rule NamePrefix
ruleNamePrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixAccess().getIdentifierNameParserRuleCall_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixAccess().getStringNameParserRuleCall_1()); 
    }
    this_StringName_1=ruleStringName
    {
        $current = $this_StringName_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixAccess().getAllParserRuleCall_2()); 
    }
    this_All_2=ruleAll
    {
        $current = $this_All_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixAccess().getOthersParserRuleCall_3()); 
    }
    this_Others_3=ruleOthers
    {
        $current = $this_Others_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamePrefixExpression
entryRuleNamePrefixExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNamePrefixExpressionRule()); }
	 iv_ruleNamePrefixExpression=ruleNamePrefixExpression 
	 { $current=$iv_ruleNamePrefixExpression.current; } 
	 EOF 
;

// Rule NamePrefixExpression
ruleNamePrefixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixExpressionAccess().getIdentifierNameParserRuleCall_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixExpressionAccess().getStringNameParserRuleCall_1()); 
    }
    this_StringName_1=ruleStringName
    {
        $current = $this_StringName_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixExpressionAccess().getAllParserRuleCall_2()); 
    }
    this_All_2=ruleAll
    {
        $current = $this_All_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNamePrefixExpressionAccess().getOthersParserRuleCall_3()); 
    }
    this_Others_3=ruleOthers
    {
        $current = $this_Others_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNameSuffix
entryRuleNameSuffix returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNameSuffixRule()); }
	 iv_ruleNameSuffix=ruleNameSuffix 
	 { $current=$iv_ruleNameSuffix.current; } 
	 EOF 
;

// Rule NameSuffix
ruleNameSuffix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameSuffixAccess().getSelectedNameParserRuleCall_0()); 
    }
    this_SelectedName_0=ruleSelectedName
    {
        $current = $this_SelectedName_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameSuffixAccess().getAttributeNameParserRuleCall_1()); 
    }
    this_AttributeName_1=ruleAttributeName
    {
        $current = $this_AttributeName_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameSuffixAccess().getAggregateParserRuleCall_2()); 
    }
    this_Aggregate_2=ruleAggregate
    {
        $current = $this_Aggregate_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNameSuffixAccess().getSliceNameParserRuleCall_3()); 
    }
    this_SliceName_3=ruleSliceName
    {
        $current = $this_SliceName_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringName
entryRuleStringName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringNameRule()); }
	 iv_ruleStringName=ruleStringName 
	 { $current=$iv_ruleStringName.current; } 
	 EOF 
;

// Rule StringName
ruleStringName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringNameAccess().getStringExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getStringNameAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleCharacterName
entryRuleCharacterName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCharacterNameRule()); }
	 iv_ruleCharacterName=ruleCharacterName 
	 { $current=$iv_ruleCharacterName.current; } 
	 EOF 
;

// Rule CharacterName
ruleCharacterName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCharacterNameAccess().getCharacterExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_CHAR
		{
			newLeafNode(lv_value_1_0, grammarAccess.getCharacterNameAccess().getValueCHARTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharacterNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"CHAR");
	    }

)
))
;





// Entry rule entryRuleIdentifierName
entryRuleIdentifierName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIdentifierNameRule()); }
	 iv_ruleIdentifierName=ruleIdentifierName 
	 { $current=$iv_ruleIdentifierName.current; } 
	 EOF 
;

// Rule IdentifierName
ruleIdentifierName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentifierNameAccess().getIdentifierExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierNameAccess().getValueIdentifierParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierNameRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectedName
entryRuleSelectedName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSelectedNameRule()); }
	 iv_ruleSelectedName=ruleSelectedName 
	 { $current=$iv_ruleSelectedName.current; } 
	 EOF 
;

// Rule SelectedName
ruleSelectedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=FullStop
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectedNameAccess().getFullStopKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectedNameAccess().getIdentifierNameParserRuleCall_1_0()); 
    }
    this_IdentifierName_1=ruleIdentifierName
    {
        $current = $this_IdentifierName_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectedNameAccess().getCharacterNameParserRuleCall_1_1()); 
    }
    this_CharacterName_2=ruleCharacterName
    {
        $current = $this_CharacterName_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectedNameAccess().getStringNameParserRuleCall_1_2()); 
    }
    this_StringName_3=ruleStringName
    {
        $current = $this_StringName_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSelectedNameAccess().getAllParserRuleCall_1_3()); 
    }
    this_All_4=ruleAll
    {
        $current = $this_All_4.current;
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleSliceName
entryRuleSliceName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSliceNameRule()); }
	 iv_ruleSliceName=ruleSliceName 
	 { $current=$iv_ruleSliceName.current; } 
	 EOF 
;

// Rule SliceName
ruleSliceName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getSliceNameAccess().getLeftParenthesisKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSliceNameAccess().getRangeSpecificationParserRuleCall_1()); 
    }
    this_RangeSpecification_1=ruleRangeSpecification
    {
        $current = $this_RangeSpecification_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=RightParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getSliceNameAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeNameAccess().getAttributeExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeNameAccess().getSignatureSignatureParserRuleCall_1_0()); 
	    }
		lv_signature_1_0=ruleSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeNameRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_1_0, 
        		"Signature");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_value_2_0=RULE_ATTRIBUTE
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAttributeNameAccess().getValueATTRIBUTETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ATTRIBUTE");
	    }

)
))
;





// Entry rule entryRuleNatureDeclaration
entryRuleNatureDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNatureDeclarationRule()); }
	 iv_ruleNatureDeclaration=ruleNatureDeclaration 
	 { $current=$iv_ruleNatureDeclaration.current; } 
	 EOF 
;

// Rule NatureDeclaration
ruleNatureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Nature
    {
    	newLeafNode(otherlv_0, grammarAccess.getNatureDeclarationAccess().getNatureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNatureDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getNatureDeclarationAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNatureDeclarationAccess().getIsNatureDefinitionParserRuleCall_3_0()); 
	    }
		lv_is_3_0=ruleNatureDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"is",
        		lv_is_3_0, 
        		"NatureDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getNatureDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleNatureDefinition
entryRuleNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNatureDefinitionRule()); }
	 iv_ruleNatureDefinition=ruleNatureDefinition 
	 { $current=$iv_ruleNatureDefinition.current; } 
	 EOF 
;

// Rule NatureDefinition
ruleNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNatureDefinitionAccess().getScalarNatureDefinitionParserRuleCall_0()); 
    }
    this_ScalarNatureDefinition_0=ruleScalarNatureDefinition
    {
        $current = $this_ScalarNatureDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNatureDefinitionAccess().getCompositeNatureDefinitionParserRuleCall_1()); 
    }
    this_CompositeNatureDefinition_1=ruleCompositeNatureDefinition
    {
        $current = $this_CompositeNatureDefinition_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleScalarNatureDefinition
entryRuleScalarNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getScalarNatureDefinitionRule()); }
	 iv_ruleScalarNatureDefinition=ruleScalarNatureDefinition 
	 { $current=$iv_ruleScalarNatureDefinition.current; } 
	 EOF 
;

// Rule ScalarNatureDefinition
ruleScalarNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getScalarNatureDefinitionAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalarNatureDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Across
    {
    	newLeafNode(otherlv_1, grammarAccess.getScalarNatureDefinitionAccess().getAcrossKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScalarNatureDefinitionAccess().getAcrossNameParserRuleCall_2_0()); 
	    }
		lv_across_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalarNatureDefinitionRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Through
    {
    	newLeafNode(otherlv_3, grammarAccess.getScalarNatureDefinitionAccess().getThroughKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScalarNatureDefinitionAccess().getThroughNameParserRuleCall_4_0()); 
	    }
		lv_through_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalarNatureDefinitionRule());
	        }
       		set(
       			$current, 
       			"through",
        		lv_through_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Reference
    {
    	newLeafNode(otherlv_5, grammarAccess.getScalarNatureDefinitionAccess().getReferenceKeyword_5());
    }
)
;





// Entry rule entryRuleNextStatement
entryRuleNextStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNextStatementRule()); }
	 iv_ruleNextStatement=ruleNextStatement 
	 { $current=$iv_ruleNextStatement.current; } 
	 EOF 
;

// Rule NextStatement
ruleNextStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNextStatementAccess().getNextStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getNextStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getNextStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Next
    {
    	newLeafNode(otherlv_3, grammarAccess.getNextStatementAccess().getNextKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNextStatementAccess().getNextIdentifierParserRuleCall_3_0()); 
	    }
		lv_next_4_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextStatementRule());
	        }
       		set(
       			$current, 
       			"next",
        		lv_next_4_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_5=When
    {
    	newLeafNode(otherlv_5, grammarAccess.getNextStatementAccess().getWhenKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNextStatementAccess().getWhenExpressionParserRuleCall_4_1_0()); 
	    }
		lv_when_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextStatementRule());
	        }
       		set(
       			$current, 
       			"when",
        		lv_when_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getNextStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRulePhysicalTypeDefinition
entryRulePhysicalTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPhysicalTypeDefinitionRule()); }
	 iv_rulePhysicalTypeDefinition=rulePhysicalTypeDefinition 
	 { $current=$iv_rulePhysicalTypeDefinition.current; } 
	 EOF 
;

// Rule PhysicalTypeDefinition
rulePhysicalTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalTypeDefinitionAccess().getRangeRangeConstraintParserRuleCall_0_0()); 
	    }
		lv_range_0_0=ruleRangeConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_0_0, 
        		"RangeConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Units
    {
    	newLeafNode(otherlv_1, grammarAccess.getPhysicalTypeDefinitionAccess().getUnitsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalTypeDefinitionAccess().getPrimaryIdentifierParserRuleCall_2_0()); 
	    }
		lv_primary_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"primary",
        		lv_primary_2_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getPhysicalTypeDefinitionAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalTypeDefinitionAccess().getSecondaryPhysicalTypeDefinitionSecondaryParserRuleCall_4_0()); 
	    }
		lv_secondary_4_0=rulePhysicalTypeDefinitionSecondary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"secondary",
        		lv_secondary_4_0, 
        		"PhysicalTypeDefinitionSecondary");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=End
    {
    	newLeafNode(otherlv_5, grammarAccess.getPhysicalTypeDefinitionAccess().getEndKeyword_5());
    }

	otherlv_6=Units
    {
    	newLeafNode(otherlv_6, grammarAccess.getPhysicalTypeDefinitionAccess().getUnitsKeyword_6());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPhysicalTypeDefinitionAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRulePhysicalTypeDefinitionSecondary
entryRulePhysicalTypeDefinitionSecondary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPhysicalTypeDefinitionSecondaryRule()); }
	 iv_rulePhysicalTypeDefinitionSecondary=rulePhysicalTypeDefinitionSecondary 
	 { $current=$iv_rulePhysicalTypeDefinitionSecondary.current; } 
	 EOF 
;

// Rule PhysicalTypeDefinitionSecondary
rulePhysicalTypeDefinitionSecondary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalTypeDefinitionSecondaryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=EqualsSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_number_2_0=RULE_ABSTRACT_LITERAL
		{
			newLeafNode(lv_number_2_0, grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getNumberABSTRACT_LITERALTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPhysicalTypeDefinitionSecondaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_2_0, 
        		"ABSTRACT_LITERAL");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getOfNameParserRuleCall_3_0()); 
	    }
		lv_of_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalTypeDefinitionSecondaryRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getPhysicalTypeDefinitionSecondaryAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulePorts
entryRulePorts returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortsRule()); }
	 iv_rulePorts=rulePorts 
	 { $current=$iv_rulePorts.current; } 
	 EOF 
;

// Rule Ports
rulePorts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Port
    {
    	newLeafNode(otherlv_0, grammarAccess.getPortsAccess().getPortKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getPortsAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPortsAccess().getDeclarationPortDeclarationParserRuleCall_2_0()); 
	    }
		lv_declaration_2_0=rulePortDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPortsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"PortDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getPortsAccess().getSemicolonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPortsAccess().getDeclarationPortDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_declaration_4_0=rulePortDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPortsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_4_0, 
        		"PortDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getPortsAccess().getRightParenthesisKeyword_4());
    }

	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getPortsAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRulePortMaps
entryRulePortMaps returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortMapsRule()); }
	 iv_rulePortMaps=rulePortMaps 
	 { $current=$iv_rulePortMaps.current; } 
	 EOF 
;

// Rule PortMaps
rulePortMaps returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Port
    {
    	newLeafNode(otherlv_0, grammarAccess.getPortMapsAccess().getPortKeyword_0());
    }

	otherlv_1=Map
    {
    	newLeafNode(otherlv_1, grammarAccess.getPortMapsAccess().getMapKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getPortMapsAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPortMapsAccess().getPortParameterParserRuleCall_3_0()); 
	    }
		lv_port_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPortMapsRule());
	        }
       		add(
       			$current, 
       			"port",
        		lv_port_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getPortMapsAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPortMapsAccess().getPortParameterParserRuleCall_4_1_0()); 
	    }
		lv_port_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPortMapsRule());
	        }
       		add(
       			$current, 
       			"port",
        		lv_port_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getPortMapsAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleProcedureCallStatement
entryRuleProcedureCallStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProcedureCallStatementRule()); }
	 iv_ruleProcedureCallStatement=ruleProcedureCallStatement 
	 { $current=$iv_ruleProcedureCallStatement.current; } 
	 EOF 
;

// Rule ProcedureCallStatement
ruleProcedureCallStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureCallStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureCallStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureCallStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureCallStatementAccess().getProcedureNameParserRuleCall_1_0()); 
	    }
		lv_procedure_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureCallStatementRule());
	        }
       		set(
       			$current, 
       			"procedure",
        		lv_procedure_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureCallStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleConcurrentProcedureCallStatement
entryRuleConcurrentProcedureCallStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConcurrentProcedureCallStatementRule()); }
	 iv_ruleConcurrentProcedureCallStatement=ruleConcurrentProcedureCallStatement 
	 { $current=$iv_ruleConcurrentProcedureCallStatement.current; } 
	 EOF 
;

// Rule ConcurrentProcedureCallStatement
ruleConcurrentProcedureCallStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentProcedureCallStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentProcedureCallStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getConcurrentProcedureCallStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		lv_postponed_2_0=
	Postponed
    {
        newLeafNode(lv_postponed_2_0, grammarAccess.getConcurrentProcedureCallStatementAccess().getPostponedPostponedKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConcurrentProcedureCallStatementRule());
	        }
       		setWithLastConsumed($current, "postponed", true, "postponed");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConcurrentProcedureCallStatementAccess().getProcedureNameParserRuleCall_2_0()); 
	    }
		lv_procedure_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConcurrentProcedureCallStatementRule());
	        }
       		set(
       			$current, 
       			"procedure",
        		lv_procedure_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getConcurrentProcedureCallStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleProcessStatement
entryRuleProcessStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProcessStatementRule()); }
	 iv_ruleProcessStatement=ruleProcessStatement 
	 { $current=$iv_ruleProcessStatement.current; } 
	 EOF 
;

// Rule ProcessStatement
ruleProcessStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getProcessStatementAccess().getProcessStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getProcessStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcessStatementAccess().getColonKeyword_1_1());
    }
)?(
(
		lv_postponed_3_0=
	Postponed
    {
        newLeafNode(lv_postponed_3_0, grammarAccess.getProcessStatementAccess().getPostponedPostponedKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessStatementRule());
	        }
       		setWithLastConsumed($current, "postponed", true, "postponed");
	    }

)
)?
	otherlv_4=Process
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcessStatementAccess().getProcessKeyword_3());
    }
(
	otherlv_5=LeftParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcessStatementAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessStatementAccess().getSensitivityMultiIdentifierNameParserRuleCall_4_1_0()); 
	    }
		lv_sensitivity_6_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessStatementRule());
	        }
       		set(
       			$current, 
       			"sensitivity",
        		lv_sensitivity_6_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcessStatementAccess().getRightParenthesisKeyword_4_2());
    }
)?(
	otherlv_8=Is
    {
    	newLeafNode(otherlv_8, grammarAccess.getProcessStatementAccess().getIsKeyword_5());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessStatementAccess().getDeclarationProcessDeclarativeItemParserRuleCall_6_0()); 
	    }
		lv_declaration_9_0=ruleProcessDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessStatementRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_9_0, 
        		"ProcessDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_10=Begin
    {
    	newLeafNode(otherlv_10, grammarAccess.getProcessStatementAccess().getBeginKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessStatementAccess().getStatementSequentialStatementParserRuleCall_8_0()); 
	    }
		lv_statement_11_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_11_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_12=End
    {
    	newLeafNode(otherlv_12, grammarAccess.getProcessStatementAccess().getEndKeyword_9());
    }
(
	otherlv_13=Postponed
    {
    	newLeafNode(otherlv_13, grammarAccess.getProcessStatementAccess().getPostponedKeyword_10());
    }
)?
	otherlv_14=Process
    {
    	newLeafNode(otherlv_14, grammarAccess.getProcessStatementAccess().getProcessKeyword_11());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getProcessStatementAccess().getIdentifierParserRuleCall_12()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_16=Semicolon
    {
    	newLeafNode(otherlv_16, grammarAccess.getProcessStatementAccess().getSemicolonKeyword_13());
    }
)
;





// Entry rule entryRuleAllocatorExpression
entryRuleAllocatorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAllocatorExpressionRule()); }
	 iv_ruleAllocatorExpression=ruleAllocatorExpression 
	 { $current=$iv_ruleAllocatorExpression.current; } 
	 EOF 
;

// Rule AllocatorExpression
ruleAllocatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=New
    {
    	newLeafNode(otherlv_0, grammarAccess.getAllocatorExpressionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAllocatorExpressionAccess().getTypeSubtypeIndicationParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAllocatorExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRecordNatureDefinition
entryRuleRecordNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordNatureDefinitionRule()); }
	 iv_ruleRecordNatureDefinition=ruleRecordNatureDefinition 
	 { $current=$iv_ruleRecordNatureDefinition.current; } 
	 EOF 
;

// Rule RecordNatureDefinition
ruleRecordNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Record
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordNatureDefinitionAccess().getRecordKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordNatureDefinitionAccess().getRecordRecordNatureElementParserRuleCall_1_0()); 
	    }
		lv_record_1_0=ruleRecordNatureElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordNatureDefinitionRule());
	        }
       		add(
       			$current, 
       			"record",
        		lv_record_1_0, 
        		"RecordNatureElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=End
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordNatureDefinitionAccess().getEndKeyword_2());
    }

	otherlv_3=Record
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordNatureDefinitionAccess().getRecordKeyword_3());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRecordNatureDefinitionAccess().getIdentifierParserRuleCall_4()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleRecordNatureElement
entryRuleRecordNatureElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordNatureElementRule()); }
	 iv_ruleRecordNatureElement=ruleRecordNatureElement 
	 { $current=$iv_ruleRecordNatureElement.current; } 
	 EOF 
;

// Rule RecordNatureElement
ruleRecordNatureElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordNatureElementAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordNatureElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordNatureElementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordNatureElementAccess().getNatureSubnatureIndicationParserRuleCall_2_0()); 
	    }
		lv_nature_2_0=ruleSubnatureIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordNatureElementRule());
	        }
       		set(
       			$current, 
       			"nature",
        		lv_nature_2_0, 
        		"SubnatureIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordNatureElementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRecordTypeDefinition
entryRuleRecordTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTypeDefinitionRule()); }
	 iv_ruleRecordTypeDefinition=ruleRecordTypeDefinition 
	 { $current=$iv_ruleRecordTypeDefinition.current; } 
	 EOF 
;

// Rule RecordTypeDefinition
ruleRecordTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Record
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeDefinitionAccess().getDeclarationRecordTypeElementParserRuleCall_1_0()); 
	    }
		lv_declaration_1_0=ruleRecordTypeElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_0, 
        		"RecordTypeElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=End
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTypeDefinitionAccess().getEndKeyword_2());
    }

	otherlv_3=Record
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordTypeDefinitionAccess().getRecordKeyword_3());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRecordTypeDefinitionAccess().getIdentifierParserRuleCall_4()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleRecordTypeElement
entryRuleRecordTypeElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTypeElementRule()); }
	 iv_ruleRecordTypeElement=ruleRecordTypeElement 
	 { $current=$iv_ruleRecordTypeElement.current; } 
	 EOF 
;

// Rule RecordTypeElement
ruleRecordTypeElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeElementAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeElementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecordTypeElementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTypeElementAccess().getTypeSubtypeIndicationParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTypeElementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecordTypeElementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleReportStatement
entryRuleReportStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReportStatementRule()); }
	 iv_ruleReportStatement=ruleReportStatement 
	 { $current=$iv_ruleReportStatement.current; } 
	 EOF 
;

// Rule ReportStatement
ruleReportStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getReportStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReportStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getReportStatementAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=Report
    {
    	newLeafNode(otherlv_2, grammarAccess.getReportStatementAccess().getReportKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReportStatementAccess().getReportExpressionParserRuleCall_2_0()); 
	    }
		lv_report_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReportStatementRule());
	        }
       		set(
       			$current, 
       			"report",
        		lv_report_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Severity
    {
    	newLeafNode(otherlv_4, grammarAccess.getReportStatementAccess().getSeverityKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReportStatementAccess().getSeverityExpressionParserRuleCall_3_1_0()); 
	    }
		lv_severity_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReportStatementRule());
	        }
       		set(
       			$current, 
       			"severity",
        		lv_severity_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getReportStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Return
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getReturnKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSequentialStatement
entryRuleSequentialStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSequentialStatementRule()); }
	 iv_ruleSequentialStatement=ruleSequentialStatement 
	 { $current=$iv_ruleSequentialStatement.current; } 
	 EOF 
;

// Rule SequentialStatement
ruleSequentialStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getWaitStatementParserRuleCall_0()); 
    }
    this_WaitStatement_0=ruleWaitStatement
    {
        $current = $this_WaitStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getAssertionStatementParserRuleCall_1()); 
    }
    this_AssertionStatement_1=ruleAssertionStatement
    {
        $current = $this_AssertionStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getReportStatementParserRuleCall_2()); 
    }
    this_ReportStatement_2=ruleReportStatement
    {
        $current = $this_ReportStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getIfStatementParserRuleCall_3()); 
    }
    this_IfStatement_3=ruleIfStatement
    {
        $current = $this_IfStatement_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getCaseStatementParserRuleCall_4()); 
    }
    this_CaseStatement_4=ruleCaseStatement
    {
        $current = $this_CaseStatement_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getLoopStatementParserRuleCall_5()); 
    }
    this_LoopStatement_5=ruleLoopStatement
    {
        $current = $this_LoopStatement_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getNextStatementParserRuleCall_6()); 
    }
    this_NextStatement_6=ruleNextStatement
    {
        $current = $this_NextStatement_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getExitStatementParserRuleCall_7()); 
    }
    this_ExitStatement_7=ruleExitStatement
    {
        $current = $this_ExitStatement_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getReturnStatementParserRuleCall_8()); 
    }
    this_ReturnStatement_8=ruleReturnStatement
    {
        $current = $this_ReturnStatement_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getNullStatementParserRuleCall_9()); 
    }
    this_NullStatement_9=ruleNullStatement
    {
        $current = $this_NullStatement_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getBreakStatementParserRuleCall_10()); 
    }
    this_BreakStatement_10=ruleBreakStatement
    {
        $current = $this_BreakStatement_10.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getVariableAssignmentStatementParserRuleCall_11()); 
    }
    this_VariableAssignmentStatement_11=ruleVariableAssignmentStatement
    {
        $current = $this_VariableAssignmentStatement_11.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getProcedureCallStatementParserRuleCall_12()); 
    }
    this_ProcedureCallStatement_12=ruleProcedureCallStatement
    {
        $current = $this_ProcedureCallStatement_12.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSequentialStatementAccess().getSequentialSignalAssignmentStatementParserRuleCall_13()); 
    }
    this_SequentialSignalAssignmentStatement_13=ruleSequentialSignalAssignmentStatement
    {
        $current = $this_SequentialSignalAssignmentStatement_13.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNullStatement
entryRuleNullStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullStatementRule()); }
	 iv_ruleNullStatement=ruleNullStatement 
	 { $current=$iv_ruleNullStatement.current; } 
	 EOF 
;

// Rule NullStatement
ruleNullStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullStatementAccess().getExpressionStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getNullStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getNullStatementAccess().getColonKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNullStatementAccess().getExpressionNullExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_3_0=ruleNullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"NullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getNullStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleVariableAssignmentStatement
entryRuleVariableAssignmentStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableAssignmentStatementRule()); }
	 iv_ruleVariableAssignmentStatement=ruleVariableAssignmentStatement 
	 { $current=$iv_ruleVariableAssignmentStatement.current; } 
	 EOF 
;

// Rule VariableAssignmentStatement
ruleVariableAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAssignmentStatementAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentStatementAccess().getTargetTargetParserRuleCall_1_0()); 
	    }
		lv_target_2_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_2_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=ColonEqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableAssignmentStatementAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAssignmentStatementAccess().getInitialExpressionParserRuleCall_3_0()); 
	    }
		lv_initial_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableAssignmentStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSignalDeclaration
entryRuleSignalDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignalDeclarationRule()); }
	 iv_ruleSignalDeclaration=ruleSignalDeclaration 
	 { $current=$iv_ruleSignalDeclaration.current; } 
	 EOF 
;

// Rule SignalDeclaration
ruleSignalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Signal
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignalDeclarationAccess().getSignalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalDeclarationAccess().getKindSignalKindEnumRuleCall_4_0()); 
	    }
		lv_kind_4_0=ruleSignalKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_4_0, 
        		"SignalKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_5=ColonEqualsSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getSignalDeclarationAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); 
	    }
		lv_initial_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getSignalDeclarationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_shared_0_0=
	Shared
    {
        newLeafNode(lv_shared_0_0, grammarAccess.getVariableDeclarationAccess().getSharedSharedKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "shared", true, "shared");
	    }

)
)?
	otherlv_1=Variable
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getVariableKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=ColonEqualsSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); 
	    }
		lv_initial_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleConstantDeclaration
entryRuleConstantDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantDeclarationRule()); }
	 iv_ruleConstantDeclaration=ruleConstantDeclaration 
	 { $current=$iv_ruleConstantDeclaration.current; } 
	 EOF 
;

// Rule ConstantDeclaration
ruleConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Constant
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclarationAccess().getConstantKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=ColonEqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDeclarationAccess().getColonEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclarationAccess().getInitialExpressionParserRuleCall_4_1_0()); 
	    }
		lv_initial_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getConstantDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleInterfaceSignalDeclaration
entryRuleInterfaceSignalDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInterfaceSignalDeclarationRule()); }
	 iv_ruleInterfaceSignalDeclaration=ruleInterfaceSignalDeclaration 
	 { $current=$iv_ruleInterfaceSignalDeclaration.current; } 
	 EOF 
;

// Rule InterfaceSignalDeclaration
ruleInterfaceSignalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Signal
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceSignalDeclarationAccess().getSignalKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceSignalDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclarationAccess().getModeModeEnumRuleCall_3_0()); 
	    }
		lv_mode_3_0=ruleMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_3_0, 
        		"Mode");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclarationAccess().getKindSignalKindEnumRuleCall_5_0()); 
	    }
		lv_kind_5_0=ruleSignalKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_5_0, 
        		"SignalKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_6=ColonEqualsSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterfaceSignalDeclarationAccess().getColonEqualsSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclarationAccess().getInitialExpressionParserRuleCall_6_1_0()); 
	    }
		lv_initial_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclarationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInterfaceVariableDeclaration
entryRuleInterfaceVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInterfaceVariableDeclarationRule()); }
	 iv_ruleInterfaceVariableDeclaration=ruleInterfaceVariableDeclaration 
	 { $current=$iv_ruleInterfaceVariableDeclaration.current; } 
	 EOF 
;

// Rule InterfaceVariableDeclaration
ruleInterfaceVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Variable
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceVariableDeclarationAccess().getVariableKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceVariableDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclarationAccess().getModeModeEnumRuleCall_3_0()); 
	    }
		lv_mode_3_0=ruleMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_3_0, 
        		"Mode");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=ColonEqualsSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceVariableDeclarationAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceVariableDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); 
	    }
		lv_initial_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInterfaceConstantDeclaration
entryRuleInterfaceConstantDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInterfaceConstantDeclarationRule()); }
	 iv_ruleInterfaceConstantDeclaration=ruleInterfaceConstantDeclaration 
	 { $current=$iv_ruleInterfaceConstantDeclaration.current; } 
	 EOF 
;

// Rule InterfaceConstantDeclaration
ruleInterfaceConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Constant
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceConstantDeclarationAccess().getConstantKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceConstantDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceConstantDeclarationAccess().getColonKeyword_2());
    }
(
	otherlv_3=In
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceConstantDeclarationAccess().getInKeyword_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceConstantDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=ColonEqualsSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceConstantDeclarationAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceConstantDeclarationAccess().getInitialExpressionParserRuleCall_5_1_0()); 
	    }
		lv_initial_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"initial",
        		lv_initial_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSignature
entryRuleSignature returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	 iv_ruleSignature=ruleSignature 
	 { $current=$iv_ruleSignature.current; } 
	 EOF 
;

// Rule Signature
ruleSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignatureAccess().getSignatureAction_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignatureAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getParameterNameParserRuleCall_2_0_0()); 
	    }
		lv_parameter_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignatureAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getParameterNameParserRuleCall_2_1_1_0()); 
	    }
		lv_parameter_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_5=Return
    {
    	newLeafNode(otherlv_5, grammarAccess.getSignatureAccess().getReturnKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getReturnNameParserRuleCall_3_1_0()); 
	    }
		lv_return_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=RightSquareBracket
    {
    	newLeafNode(otherlv_7, grammarAccess.getSignatureAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSimultaneousAlternative
entryRuleSimultaneousAlternative returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimultaneousAlternativeRule()); }
	 iv_ruleSimultaneousAlternative=ruleSimultaneousAlternative 
	 { $current=$iv_ruleSimultaneousAlternative.current; } 
	 EOF 
;

// Rule SimultaneousAlternative
ruleSimultaneousAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=When
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimultaneousAlternativeAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousAlternativeAccess().getChoiceChoicesParserRuleCall_1_0()); 
	    }
		lv_choice_1_0=ruleChoices		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousAlternativeRule());
	        }
       		set(
       			$current, 
       			"choice",
        		lv_choice_1_0, 
        		"Choices");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimultaneousAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousAlternativeAccess().getStatementSimultaneousStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleSimultaneousStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousAlternativeRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"SimultaneousStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSimultaneousCaseStatement
entryRuleSimultaneousCaseStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimultaneousCaseStatementRule()); }
	 iv_ruleSimultaneousCaseStatement=ruleSimultaneousCaseStatement 
	 { $current=$iv_ruleSimultaneousCaseStatement.current; } 
	 EOF 
;

// Rule SimultaneousCaseStatement
ruleSimultaneousCaseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousCaseStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousCaseStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimultaneousCaseStatementAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=Case
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimultaneousCaseStatementAccess().getCaseKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousCaseStatementAccess().getCaseExpressionParserRuleCall_2_0()); 
	    }
		lv_case_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousCaseStatementRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Use
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimultaneousCaseStatementAccess().getUseKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousCaseStatementAccess().getWhenSimultaneousAlternativeParserRuleCall_4_0()); 
	    }
		lv_when_5_0=ruleSimultaneousAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousCaseStatementRule());
	        }
       		add(
       			$current, 
       			"when",
        		lv_when_5_0, 
        		"SimultaneousAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_6=End
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimultaneousCaseStatementAccess().getEndKeyword_5());
    }

	otherlv_7=Case
    {
    	newLeafNode(otherlv_7, grammarAccess.getSimultaneousCaseStatementAccess().getCaseKeyword_6());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousCaseStatementAccess().getIdentifierParserRuleCall_7()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getSimultaneousCaseStatementAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleSimultaneousIfStatement
entryRuleSimultaneousIfStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimultaneousIfStatementRule()); }
	 iv_ruleSimultaneousIfStatement=ruleSimultaneousIfStatement 
	 { $current=$iv_ruleSimultaneousIfStatement.current; } 
	 EOF 
;

// Rule SimultaneousIfStatement
ruleSimultaneousIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousIfStatementAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousIfStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimultaneousIfStatementAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=If
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimultaneousIfStatementAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousIfStatementAccess().getTestSimultaneousIfStatementTestParserRuleCall_2_0()); 
	    }
		lv_test_3_0=ruleSimultaneousIfStatementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousIfStatementRule());
	        }
       		add(
       			$current, 
       			"test",
        		lv_test_3_0, 
        		"SimultaneousIfStatementTest");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Use
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimultaneousIfStatementAccess().getUseKeyword_3());
    }
(
	otherlv_5=Elsif
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimultaneousIfStatementAccess().getElsifKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousIfStatementAccess().getTestSimultaneousIfStatementTestParserRuleCall_4_1_0()); 
	    }
		lv_test_6_0=ruleSimultaneousIfStatementTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousIfStatementRule());
	        }
       		add(
       			$current, 
       			"test",
        		lv_test_6_0, 
        		"SimultaneousIfStatementTest");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
	otherlv_7=Else
    {
    	newLeafNode(otherlv_7, grammarAccess.getSimultaneousIfStatementAccess().getElseKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousIfStatementAccess().getStatementSimultaneousStatementParserRuleCall_5_1_0()); 
	    }
		lv_statement_8_0=ruleSimultaneousStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousIfStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_8_0, 
        		"SimultaneousStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?
	otherlv_9=End
    {
    	newLeafNode(otherlv_9, grammarAccess.getSimultaneousIfStatementAccess().getEndKeyword_6());
    }

	otherlv_10=Use
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimultaneousIfStatementAccess().getUseKeyword_7());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousIfStatementAccess().getIdentifierParserRuleCall_8()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getSimultaneousIfStatementAccess().getSemicolonKeyword_9());
    }
)
;





// Entry rule entryRuleSimultaneousIfStatementTest
entryRuleSimultaneousIfStatementTest returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimultaneousIfStatementTestRule()); }
	 iv_ruleSimultaneousIfStatementTest=ruleSimultaneousIfStatementTest 
	 { $current=$iv_ruleSimultaneousIfStatementTest.current; } 
	 EOF 
;

// Rule SimultaneousIfStatementTest
ruleSimultaneousIfStatementTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousIfStatementTestAccess().getConditionExpressionParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousIfStatementTestRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Use
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimultaneousIfStatementTestAccess().getUseKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousIfStatementTestAccess().getStatementSimultaneousStatementParserRuleCall_2_0()); 
	    }
		lv_statement_2_0=ruleSimultaneousStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousIfStatementTestRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_2_0, 
        		"SimultaneousStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSimultaneousProceduralStatement
entryRuleSimultaneousProceduralStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimultaneousProceduralStatementRule()); }
	 iv_ruleSimultaneousProceduralStatement=ruleSimultaneousProceduralStatement 
	 { $current=$iv_ruleSimultaneousProceduralStatement.current; } 
	 EOF 
;

// Rule SimultaneousProceduralStatement
ruleSimultaneousProceduralStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimultaneousProceduralStatementAccess().getSimultaneousProceduralStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousProceduralStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousProceduralStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimultaneousProceduralStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Procedural
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimultaneousProceduralStatementAccess().getProceduralKeyword_2());
    }
(
	otherlv_4=Is
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimultaneousProceduralStatementAccess().getIsKeyword_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousProceduralStatementAccess().getDeclarationProceduralDeclarativeItemParserRuleCall_4_0()); 
	    }
		lv_declaration_5_0=ruleProceduralDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousProceduralStatementRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_5_0, 
        		"ProceduralDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_6=Begin
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimultaneousProceduralStatementAccess().getBeginKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimultaneousProceduralStatementAccess().getStatementSequentialStatementParserRuleCall_6_0()); 
	    }
		lv_statement_7_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimultaneousProceduralStatementRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_7_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_8=End
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimultaneousProceduralStatementAccess().getEndKeyword_7());
    }

	otherlv_9=Procedural
    {
    	newLeafNode(otherlv_9, grammarAccess.getSimultaneousProceduralStatementAccess().getProceduralKeyword_8());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousProceduralStatementAccess().getIdentifierParserRuleCall_9()); 
    }
ruleIdentifier
    {
        afterParserOrEnumRuleCall();
    }
)?
	otherlv_11=Semicolon
    {
    	newLeafNode(otherlv_11, grammarAccess.getSimultaneousProceduralStatementAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleSimultaneousStatement
entryRuleSimultaneousStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimultaneousStatementRule()); }
	 iv_ruleSimultaneousStatement=ruleSimultaneousStatement 
	 { $current=$iv_ruleSimultaneousStatement.current; } 
	 EOF 
;

// Rule SimultaneousStatement
ruleSimultaneousStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousStatementAccess().getSimpleSimultaneousStatementParserRuleCall_0()); 
    }
    this_SimpleSimultaneousStatement_0=ruleSimpleSimultaneousStatement
    {
        $current = $this_SimpleSimultaneousStatement_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousStatementAccess().getSimultaneousIfStatementParserRuleCall_1()); 
    }
    this_SimultaneousIfStatement_1=ruleSimultaneousIfStatement
    {
        $current = $this_SimultaneousIfStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousStatementAccess().getSimultaneousCaseStatementParserRuleCall_2()); 
    }
    this_SimultaneousCaseStatement_2=ruleSimultaneousCaseStatement
    {
        $current = $this_SimultaneousCaseStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousStatementAccess().getSimultaneousProceduralStatementParserRuleCall_3()); 
    }
    this_SimultaneousProceduralStatement_3=ruleSimultaneousProceduralStatement
    {
        $current = $this_SimultaneousProceduralStatement_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimultaneousStatementAccess().getNullStatementParserRuleCall_4()); 
    }
    this_NullStatement_4=ruleNullStatement
    {
        $current = $this_NullStatement_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSourceAspect
entryRuleSourceAspect returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSourceAspectRule()); }
	 iv_ruleSourceAspect=ruleSourceAspect 
	 { $current=$iv_ruleSourceAspect.current; } 
	 EOF 
;

// Rule SourceAspect
ruleSourceAspect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSourceAspectAccess().getSpectrumParserRuleCall_0()); 
    }
    this_Spectrum_0=ruleSpectrum
    {
        $current = $this_Spectrum_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSourceAspectAccess().getNoiseParserRuleCall_1()); 
    }
    this_Noise_1=ruleNoise
    {
        $current = $this_Noise_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSpectrum
entryRuleSpectrum returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSpectrumRule()); }
	 iv_ruleSpectrum=ruleSpectrum 
	 { $current=$iv_ruleSpectrum.current; } 
	 EOF 
;

// Rule Spectrum
ruleSpectrum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Spectrum
    {
    	newLeafNode(otherlv_0, grammarAccess.getSpectrumAccess().getSpectrumKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpectrumAccess().getLeftSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_left_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpectrumRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getSpectrumAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpectrumAccess().getRightSimpleExpressionParserRuleCall_3_0()); 
	    }
		lv_right_3_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpectrumRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNoise
entryRuleNoise returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNoiseRule()); }
	 iv_ruleNoise=ruleNoise 
	 { $current=$iv_ruleNoise.current; } 
	 EOF 
;

// Rule Noise
ruleNoise returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Noise
    {
    	newLeafNode(otherlv_0, grammarAccess.getNoiseAccess().getNoiseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoiseAccess().getNoiseSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_noise_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoiseRule());
	        }
       		set(
       			$current, 
       			"noise",
        		lv_noise_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQuantityDeclaration
entryRuleQuantityDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQuantityDeclarationRule()); }
	 iv_ruleQuantityDeclaration=ruleQuantityDeclaration 
	 { $current=$iv_ruleQuantityDeclaration.current; } 
	 EOF 
;

// Rule QuantityDeclaration
ruleQuantityDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantityDeclarationAccess().getFreeQuantityDeclarationParserRuleCall_0()); 
    }
    this_FreeQuantityDeclaration_0=ruleFreeQuantityDeclaration
    {
        $current = $this_FreeQuantityDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantityDeclarationAccess().getBranchQuantityDeclarationParserRuleCall_1()); 
    }
    this_BranchQuantityDeclaration_1=ruleBranchQuantityDeclaration
    {
        $current = $this_BranchQuantityDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getQuantityDeclarationAccess().getSourceQuantityDeclarationParserRuleCall_2()); 
    }
    this_SourceQuantityDeclaration_2=ruleSourceQuantityDeclaration
    {
        $current = $this_SourceQuantityDeclaration_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFreeQuantityDeclaration
entryRuleFreeQuantityDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFreeQuantityDeclarationRule()); }
	 iv_ruleFreeQuantityDeclaration=ruleFreeQuantityDeclaration 
	 { $current=$iv_ruleFreeQuantityDeclaration.current; } 
	 EOF 
;

// Rule FreeQuantityDeclaration
ruleFreeQuantityDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Quantity
    {
    	newLeafNode(otherlv_0, grammarAccess.getFreeQuantityDeclarationAccess().getQuantityKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreeQuantityDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreeQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getFreeQuantityDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreeQuantityDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreeQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=ColonEqualsSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getFreeQuantityDeclarationAccess().getColonEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFreeQuantityDeclarationAccess().getQuantityExpressionParserRuleCall_4_1_0()); 
	    }
		lv_quantity_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFreeQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"quantity",
        		lv_quantity_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getFreeQuantityDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleBranchQuantityDeclaration
entryRuleBranchQuantityDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBranchQuantityDeclarationRule()); }
	 iv_ruleBranchQuantityDeclaration=ruleBranchQuantityDeclaration 
	 { $current=$iv_ruleBranchQuantityDeclaration.current; } 
	 EOF 
;

// Rule BranchQuantityDeclaration
ruleBranchQuantityDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Quantity
    {
    	newLeafNode(otherlv_0, grammarAccess.getBranchQuantityDeclarationAccess().getQuantityKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBranchQuantityDeclarationAccess().getAcrossQuantityAspectParserRuleCall_1_0_0()); 
	    }
		lv_across_1_0=ruleQuantityAspect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_1_0, 
        		"QuantityAspect");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Across
    {
    	newLeafNode(otherlv_2, grammarAccess.getBranchQuantityDeclarationAccess().getAcrossKeyword_1_1());
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getBranchQuantityDeclarationAccess().getThroughQuantityAspectParserRuleCall_2_0_0()); 
	    }
		lv_through_3_0=ruleQuantityAspect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"through",
        		lv_through_3_0, 
        		"QuantityAspect");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Through
    {
    	newLeafNode(otherlv_4, grammarAccess.getBranchQuantityDeclarationAccess().getThroughKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchQuantityDeclarationAccess().getLeftNameParserRuleCall_3_0()); 
	    }
		lv_left_5_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_5_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=To
    {
    	newLeafNode(otherlv_6, grammarAccess.getBranchQuantityDeclarationAccess().getToKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBranchQuantityDeclarationAccess().getRightNameParserRuleCall_4_1_0()); 
	    }
		lv_right_7_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBranchQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getBranchQuantityDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleQuantityAspect
entryRuleQuantityAspect returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQuantityAspectRule()); }
	 iv_ruleQuantityAspect=ruleQuantityAspect 
	 { $current=$iv_ruleQuantityAspect.current; } 
	 EOF 
;

// Rule QuantityAspect
ruleQuantityAspect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQuantityAspectAccess().getNameMultiIdentifierNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantityAspectRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=Tolerance
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuantityAspectAccess().getToleranceKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantityAspectAccess().getToleranceExpressionParserRuleCall_1_1_0()); 
	    }
		lv_tolerance_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantityAspectRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_3=ColonEqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getQuantityAspectAccess().getColonEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantityAspectAccess().getExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantityAspectRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSourceQuantityDeclaration
entryRuleSourceQuantityDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSourceQuantityDeclarationRule()); }
	 iv_ruleSourceQuantityDeclaration=ruleSourceQuantityDeclaration 
	 { $current=$iv_ruleSourceQuantityDeclaration.current; } 
	 EOF 
;

// Rule SourceQuantityDeclaration
ruleSourceQuantityDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Quantity
    {
    	newLeafNode(otherlv_0, grammarAccess.getSourceQuantityDeclarationAccess().getQuantityKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceQuantityDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getSourceQuantityDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceQuantityDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceQuantityDeclarationAccess().getSourceSourceAspectParserRuleCall_4_0()); 
	    }
		lv_source_4_0=ruleSourceAspect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceQuantityDeclarationRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_4_0, 
        		"SourceAspect");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getSourceQuantityDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleLimitDeclaration
entryRuleLimitDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLimitDeclarationRule()); }
	 iv_ruleLimitDeclaration=ruleLimitDeclaration 
	 { $current=$iv_ruleLimitDeclaration.current; } 
	 EOF 
;

// Rule LimitDeclaration
ruleLimitDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Limit
    {
    	newLeafNode(otherlv_0, grammarAccess.getLimitDeclarationAccess().getLimitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitDeclarationAccess().getNameMultiNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getLimitDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitDeclarationAccess().getTypeNameParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=With
    {
    	newLeafNode(otherlv_4, grammarAccess.getLimitDeclarationAccess().getWithKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitDeclarationAccess().getValueExpressionParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitDeclarationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getLimitDeclarationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleSubnatureDeclaration
entryRuleSubnatureDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubnatureDeclarationRule()); }
	 iv_ruleSubnatureDeclaration=ruleSubnatureDeclaration 
	 { $current=$iv_ruleSubnatureDeclaration.current; } 
	 EOF 
;

// Rule SubnatureDeclaration
ruleSubnatureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Subnature
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubnatureDeclarationAccess().getSubnatureKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubnatureDeclarationAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureDeclarationAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); 
	    }
		lv_nature_3_0=ruleSubnatureIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureDeclarationRule());
	        }
       		set(
       			$current, 
       			"nature",
        		lv_nature_3_0, 
        		"SubnatureIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubnatureDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSubprogramDeclaration
entryRuleSubprogramDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubprogramDeclarationRule()); }
	 iv_ruleSubprogramDeclaration=ruleSubprogramDeclaration 
	 { $current=$iv_ruleSubprogramDeclaration.current; } 
	 EOF 
;

// Rule SubprogramDeclaration
ruleSubprogramDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarationAccess().getProcedureDeclarationParserRuleCall_0()); 
    }
    this_ProcedureDeclaration_0=ruleProcedureDeclaration
    {
        $current = $this_ProcedureDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); 
    }
    this_FunctionDeclaration_1=ruleFunctionDeclaration
    {
        $current = $this_FunctionDeclaration_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProcedureDeclaration
entryRuleProcedureDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getProcedureDeclarationRule()); }
	 iv_ruleProcedureDeclaration=ruleProcedureDeclaration 
	 { $current=$iv_ruleProcedureDeclaration.current; } 
	 EOF 
;

// Rule ProcedureDeclaration
ruleProcedureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getProcedureDeclarationAccess().getProcedureDeclarationAction_0(),
            $current);
    }
)
	otherlv_1=Procedure
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureDeclarationAccess().getProcedureKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getNameDesignatorNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleDesignatorName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"DesignatorName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureDeclarationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getParameterProcedureParameterDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_parameter_4_0=ruleProcedureParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"ProcedureParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getParameterProcedureParameterDeclarationParserRuleCall_3_2_1_0()); 
	    }
		lv_parameter_6_0=ruleProcedureParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"ProcedureParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcedureDeclarationAccess().getRightParenthesisKeyword_3_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclarationAccess().getBodySubprogramBodyParserRuleCall_4_0()); 
	    }
		lv_body_8_0=ruleSubprogramBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"SubprogramBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getProcedureDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getPurityPurityEnumRuleCall_1_0()); 
	    }
		lv_purity_1_0=rulePurity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"purity",
        		lv_purity_1_0, 
        		"Purity");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_2=Function
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getNameDesignatorNameParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleDesignatorName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"DesignatorName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=LeftParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParameterFunctionParameterDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_parameter_5_0=ruleFunctionParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"FunctionParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParameterFunctionParameterDeclarationParserRuleCall_4_2_1_0()); 
	    }
		lv_parameter_7_0=ruleFunctionParameterDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_7_0, 
        		"FunctionParameterDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_8=RightParenthesis
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4_3());
    }
)?
	otherlv_9=Return
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionDeclarationAccess().getReturnKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeNameParserRuleCall_6_0()); 
	    }
		lv_type_10_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_10_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodySubprogramBodyParserRuleCall_7_0()); 
	    }
		lv_body_11_0=ruleSubprogramBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_11_0, 
        		"SubprogramBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_12=Semicolon
    {
    	newLeafNode(otherlv_12, grammarAccess.getFunctionDeclarationAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleSubprogramBody
entryRuleSubprogramBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubprogramBodyRule()); }
	 iv_ruleSubprogramBody=ruleSubprogramBody 
	 { $current=$iv_ruleSubprogramBody.current; } 
	 EOF 
;

// Rule SubprogramBody
ruleSubprogramBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubprogramBodyAccess().getSubprogramBodyAction_0(),
            $current);
    }
)
	otherlv_1=Is
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubprogramBodyAccess().getIsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubprogramBodyAccess().getDeclarationSubprogramDeclarativeItemParserRuleCall_2_0()); 
	    }
		lv_declaration_2_0=ruleSubprogramDeclarativeItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubprogramBodyRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"SubprogramDeclarativeItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=Begin
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubprogramBodyAccess().getBeginKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubprogramBodyAccess().getStatementSequentialStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleSequentialStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubprogramBodyRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"SequentialStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=End
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubprogramBodyAccess().getEndKeyword_5());
    }
(
	otherlv_6=Procedure
    {
    	newLeafNode(otherlv_6, grammarAccess.getSubprogramBodyAccess().getProcedureKeyword_6_0());
    }

    |
	otherlv_7=Function
    {
    	newLeafNode(otherlv_7, grammarAccess.getSubprogramBodyAccess().getFunctionKeyword_6_1());
    }
)?(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubprogramBodyAccess().getDesignatorParserRuleCall_7()); 
    }
ruleDesignator
    {
        afterParserOrEnumRuleCall();
    }
)?)
;





// Entry rule entryRuleSubtypeDeclaration
entryRuleSubtypeDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubtypeDeclarationRule()); }
	 iv_ruleSubtypeDeclaration=ruleSubtypeDeclaration 
	 { $current=$iv_ruleSubtypeDeclaration.current; } 
	 EOF 
;

// Rule SubtypeDeclaration
ruleSubtypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Subtype
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubtypeDeclarationAccess().getSubtypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubtypeDeclarationAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeDeclarationAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubtypeDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAliasDeclaration
entryRuleAliasDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAliasDeclarationRule()); }
	 iv_ruleAliasDeclaration=ruleAliasDeclaration 
	 { $current=$iv_ruleAliasDeclaration.current; } 
	 EOF 
;

// Rule AliasDeclaration
ruleAliasDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Alias
    {
    	newLeafNode(otherlv_0, grammarAccess.getAliasDeclarationAccess().getAliasKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDeclarationAccess().getNameDesignatorNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleDesignatorName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"DesignatorName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getAliasDeclarationAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDeclarationAccess().getAliasSubtypeIndicationParserRuleCall_2_1_0()); 
	    }
		lv_alias_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDeclarationRule());
	        }
       		set(
       			$current, 
       			"alias",
        		lv_alias_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_4=Is
    {
    	newLeafNode(otherlv_4, grammarAccess.getAliasDeclarationAccess().getIsKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAliasDeclarationAccess().getIsNameSignatureParserRuleCall_4_0()); 
	    }
		lv_is_5_0=ruleNameSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAliasDeclarationRule());
	        }
       		set(
       			$current, 
       			"is",
        		lv_is_5_0, 
        		"NameSignature");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleSubtypeIndication
entryRuleSubtypeIndication returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubtypeIndicationRule()); }
	 iv_ruleSubtypeIndication=ruleSubtypeIndication 
	 { $current=$iv_ruleSubtypeIndication.current; } 
	 EOF 
;

// Rule SubtypeIndication
ruleSubtypeIndication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getNameNameParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_0_2_0()); 
	    }
		lv_mark_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getConstraintConstraintParserRuleCall_0_3_0()); 
	    }
		lv_constraint_3_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_3_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_4=Tolerance
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_0_4_1_0()); 
	    }
		lv_tolerance_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=Across
    {
    	newLeafNode(otherlv_6, grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_0_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_0_4_2_1_0()); 
	    }
		lv_across_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=Through
    {
    	newLeafNode(otherlv_8, grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_0_4_2_2());
    }
)?)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_1_1_0()); 
	    }
		lv_mark_10_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_10_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getConstraintConstraintParserRuleCall_1_2_0()); 
	    }
		lv_constraint_11_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_11_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_12=Tolerance
    {
    	newLeafNode(otherlv_12, grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_1_3_1_0()); 
	    }
		lv_tolerance_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_14=Across
    {
    	newLeafNode(otherlv_14, grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_1_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_1_3_2_1_0()); 
	    }
		lv_across_15_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_15_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_16=Through
    {
    	newLeafNode(otherlv_16, grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_1_3_2_2());
    }
)?)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubtypeIndicationAccess().getSubtypeIndicationExpressionAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getMarkNameParserRuleCall_2_1_0()); 
	    }
		lv_mark_18_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_18_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_19=Tolerance
    {
    	newLeafNode(otherlv_19, grammarAccess.getSubtypeIndicationAccess().getToleranceKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getToleranceExpressionParserRuleCall_2_3_0()); 
	    }
		lv_tolerance_20_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_20_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_21=Across
    {
    	newLeafNode(otherlv_21, grammarAccess.getSubtypeIndicationAccess().getAcrossKeyword_2_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getAcrossExpressionParserRuleCall_2_4_1_0()); 
	    }
		lv_across_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_22_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_23=Through
    {
    	newLeafNode(otherlv_23, grammarAccess.getSubtypeIndicationAccess().getThroughKeyword_2_4_2());
    }
)?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubtypeIndicationAccess().getNameParserRuleCall_3()); 
    }
    this_Name_24=ruleName
    {
        $current = $this_Name_24.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSubtypeIndicationExpression
entryRuleSubtypeIndicationExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubtypeIndicationExpressionRule()); }
	 iv_ruleSubtypeIndicationExpression=ruleSubtypeIndicationExpression 
	 { $current=$iv_ruleSubtypeIndicationExpression.current; } 
	 EOF 
;

// Rule SubtypeIndicationExpression
ruleSubtypeIndicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getNameNameParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_0_2_0()); 
	    }
		lv_mark_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintConstraintParserRuleCall_0_3_0()); 
	    }
		lv_constraint_3_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_3_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_4=Tolerance
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_0_4_1_0()); 
	    }
		lv_tolerance_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=Across
    {
    	newLeafNode(otherlv_6, grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_0_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_0_4_2_1_0()); 
	    }
		lv_across_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=Through
    {
    	newLeafNode(otherlv_8, grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_0_4_2_2());
    }
)?)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_1_1_0()); 
	    }
		lv_mark_10_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_10_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getConstraintConstraintParserRuleCall_1_2_0()); 
	    }
		lv_constraint_11_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_11_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_12=Tolerance
    {
    	newLeafNode(otherlv_12, grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_1_3_1_0()); 
	    }
		lv_tolerance_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_14=Across
    {
    	newLeafNode(otherlv_14, grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_1_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_1_3_2_1_0()); 
	    }
		lv_across_15_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_15_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_16=Through
    {
    	newLeafNode(otherlv_16, grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_1_3_2_2());
    }
)?)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubtypeIndicationExpressionAccess().getSubtypeIndicationExpressionAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getMarkNameParserRuleCall_2_1_0()); 
	    }
		lv_mark_18_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_18_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_19=Tolerance
    {
    	newLeafNode(otherlv_19, grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getToleranceExpressionParserRuleCall_2_3_0()); 
	    }
		lv_tolerance_20_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_20_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_21=Across
    {
    	newLeafNode(otherlv_21, grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossKeyword_2_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getAcrossExpressionParserRuleCall_2_4_1_0()); 
	    }
		lv_across_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubtypeIndicationExpressionRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_22_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_23=Through
    {
    	newLeafNode(otherlv_23, grammarAccess.getSubtypeIndicationExpressionAccess().getThroughKeyword_2_4_2());
    }
)?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubtypeIndicationExpressionAccess().getNameExpressionParserRuleCall_3()); 
    }
    this_NameExpression_24=ruleNameExpression
    {
        $current = $this_NameExpression_24.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSubnatureIndication
entryRuleSubnatureIndication returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSubnatureIndicationRule()); }
	 iv_ruleSubnatureIndication=ruleSubnatureIndication 
	 { $current=$iv_ruleSubnatureIndication.current; } 
	 EOF 
;

// Rule SubnatureIndication
ruleSubnatureIndication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubnatureIndicationAccess().getSubnatureIndicationExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getMarkNameParserRuleCall_0_1_0()); 
	    }
		lv_mark_1_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_1_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getConstraintIndexConstraintParserRuleCall_0_2_0()); 
	    }
		lv_constraint_2_0=ruleIndexConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_2_0, 
        		"IndexConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Tolerance
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubnatureIndicationAccess().getToleranceKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getToleranceExpressionParserRuleCall_0_3_1_0()); 
	    }
		lv_tolerance_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Across
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubnatureIndicationAccess().getAcrossKeyword_0_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getAcrossExpressionParserRuleCall_0_3_2_1_0()); 
	    }
		lv_across_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=Through
    {
    	newLeafNode(otherlv_7, grammarAccess.getSubnatureIndicationAccess().getThroughKeyword_0_3_2_2());
    }
)?)?)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubnatureIndicationAccess().getSubnatureIndicationExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getMarkNameParserRuleCall_1_1_0()); 
	    }
		lv_mark_9_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"mark",
        		lv_mark_9_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_10=Tolerance
    {
    	newLeafNode(otherlv_10, grammarAccess.getSubnatureIndicationAccess().getToleranceKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getToleranceExpressionParserRuleCall_1_3_0()); 
	    }
		lv_tolerance_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"tolerance",
        		lv_tolerance_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_12=Across
    {
    	newLeafNode(otherlv_12, grammarAccess.getSubnatureIndicationAccess().getAcrossKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getAcrossExpressionParserRuleCall_1_4_1_0()); 
	    }
		lv_across_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubnatureIndicationRule());
	        }
       		set(
       			$current, 
       			"across",
        		lv_across_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_14=Through
    {
    	newLeafNode(otherlv_14, grammarAccess.getSubnatureIndicationAccess().getThroughKeyword_1_4_2());
    }
)?)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubnatureIndicationAccess().getNameParserRuleCall_2()); 
    }
    this_Name_15=ruleName
    {
        $current = $this_Name_15.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTarget
entryRuleTarget returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	 iv_ruleTarget=ruleTarget 
	 { $current=$iv_ruleTarget.current; } 
	 EOF 
;

// Rule Target
ruleTarget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTargetAccess().getNameExpressionParserRuleCall_0()); 
    }
    this_NameExpression_0=ruleNameExpression
    {
        $current = $this_NameExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTargetAccess().getAggregateParserRuleCall_1()); 
    }
    this_Aggregate_1=ruleAggregate
    {
        $current = $this_Aggregate_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTerminalDeclaration
entryRuleTerminalDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTerminalDeclarationRule()); }
	 iv_ruleTerminalDeclaration=ruleTerminalDeclaration 
	 { $current=$iv_ruleTerminalDeclaration.current; } 
	 EOF 
;

// Rule TerminalDeclaration
ruleTerminalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Terminal
    {
    	newLeafNode(otherlv_0, grammarAccess.getTerminalDeclarationAccess().getTerminalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalDeclarationAccess().getNameMultiIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleMultiIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MultiIdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTerminalDeclarationAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); 
	    }
		lv_nature_3_0=ruleSubnatureIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTerminalDeclarationRule());
	        }
       		set(
       			$current, 
       			"nature",
        		lv_nature_3_0, 
        		"SubnatureIndication");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getTerminalDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Type
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getNameIdentifierNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifierName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"IdentifierName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Is
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getIsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getIsTypeDefinitionParserRuleCall_2_1_0()); 
	    }
		lv_is_3_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"is",
        		lv_is_3_0, 
        		"TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getPhysicalTypeDefinitionParserRuleCall_0()); 
    }
    this_PhysicalTypeDefinition_0=rulePhysicalTypeDefinition
    {
        $current = $this_PhysicalTypeDefinition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_1()); 
    }
    this_EnumerationTypeDefinition_1=ruleEnumerationTypeDefinition
    {
        $current = $this_EnumerationTypeDefinition_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getCompositeTypeDefinitionParserRuleCall_2()); 
    }
    this_CompositeTypeDefinition_2=ruleCompositeTypeDefinition
    {
        $current = $this_CompositeTypeDefinition_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getAccessTypeDefinitionParserRuleCall_3()); 
    }
    this_AccessTypeDefinition_3=ruleAccessTypeDefinition
    {
        $current = $this_AccessTypeDefinition_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getFileTypeDefinitionParserRuleCall_4()); 
    }
    this_FileTypeDefinition_4=ruleFileTypeDefinition
    {
        $current = $this_FileTypeDefinition_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getRangeTypeDefinitionParserRuleCall_5()); 
    }
    this_RangeTypeDefinition_5=ruleRangeTypeDefinition
    {
        $current = $this_RangeTypeDefinition_5.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRangeTypeDefinition
entryRuleRangeTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRangeTypeDefinitionRule()); }
	 iv_ruleRangeTypeDefinition=ruleRangeTypeDefinition 
	 { $current=$iv_ruleRangeTypeDefinition.current; } 
	 EOF 
;

// Rule RangeTypeDefinition
ruleRangeTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRangeTypeDefinitionAccess().getRangeTypeDefinitionAction_0_0(),
            $current);
    }
)
	otherlv_1=Range
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeTypeDefinitionAccess().getRangeKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeTypeDefinitionAccess().getLeftSimpleExpressionParserRuleCall_0_2_0()); 
	    }
		lv_left_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeTypeDefinitionAccess().getDirectionRangeDirectionEnumRuleCall_0_3_0()); 
	    }
		lv_direction_3_0=ruleRangeDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_3_0, 
        		"RangeDirection");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeTypeDefinitionAccess().getRightSimpleExpressionParserRuleCall_0_4_0()); 
	    }
		lv_right_4_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRangeTypeDefinitionAccess().getRangeTypeDefinitionAction_1_0(),
            $current);
    }
)
	otherlv_6=Range
    {
    	newLeafNode(otherlv_6, grammarAccess.getRangeTypeDefinitionAccess().getRangeKeyword_1_1());
    }

	otherlv_7=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_7, grammarAccess.getRangeTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_1_2());
    }
))
;





// Entry rule entryRuleUnconstrainedArrayTypeDefinition
entryRuleUnconstrainedArrayTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnconstrainedArrayTypeDefinitionRule()); }
	 iv_ruleUnconstrainedArrayTypeDefinition=ruleUnconstrainedArrayTypeDefinition 
	 { $current=$iv_ruleUnconstrainedArrayTypeDefinition.current; } 
	 EOF 
;

// Rule UnconstrainedArrayTypeDefinition
ruleUnconstrainedArrayTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Array
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getArrayKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexNameParserRuleCall_2_0()); 
	    }
		lv_index_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnconstrainedArrayTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Range
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRangeKeyword_3());
    }

	otherlv_4=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4());
    }
(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getIndexNameParserRuleCall_5_1_0()); 
	    }
		lv_index_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnconstrainedArrayTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=Range
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRangeKeyword_5_2());
    }

	otherlv_8=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getLessThanSignGreaterThanSignKeyword_5_3());
    }
)*
	otherlv_9=RightParenthesis
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getRightParenthesisKeyword_6());
    }

	otherlv_10=Of
    {
    	newLeafNode(otherlv_10, grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getOfKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnconstrainedArrayTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_8_0()); 
	    }
		lv_type_11_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnconstrainedArrayTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_11_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnconstrainedArrayNatureDefinition
entryRuleUnconstrainedArrayNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnconstrainedArrayNatureDefinitionRule()); }
	 iv_ruleUnconstrainedArrayNatureDefinition=ruleUnconstrainedArrayNatureDefinition 
	 { $current=$iv_ruleUnconstrainedArrayNatureDefinition.current; } 
	 EOF 
;

// Rule UnconstrainedArrayNatureDefinition
ruleUnconstrainedArrayNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Array
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getArrayKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexNameParserRuleCall_2_0()); 
	    }
		lv_index_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnconstrainedArrayNatureDefinitionRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Range
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRangeKeyword_3());
    }

	otherlv_4=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4());
    }
(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getIndexNameParserRuleCall_5_1_0()); 
	    }
		lv_index_6_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnconstrainedArrayNatureDefinitionRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_6_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=Range
    {
    	newLeafNode(otherlv_7, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRangeKeyword_5_2());
    }

	otherlv_8=LessThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getLessThanSignGreaterThanSignKeyword_5_3());
    }
)*
	otherlv_9=RightParenthesis
    {
    	newLeafNode(otherlv_9, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getRightParenthesisKeyword_6());
    }

	otherlv_10=Of
    {
    	newLeafNode(otherlv_10, grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getOfKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnconstrainedArrayNatureDefinitionAccess().getNatureSubnatureIndicationParserRuleCall_8_0()); 
	    }
		lv_nature_11_0=ruleSubnatureIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnconstrainedArrayNatureDefinitionRule());
	        }
       		set(
       			$current, 
       			"nature",
        		lv_nature_11_0, 
        		"SubnatureIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstrainedArrayTypeDefinition
entryRuleConstrainedArrayTypeDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstrainedArrayTypeDefinitionRule()); }
	 iv_ruleConstrainedArrayTypeDefinition=ruleConstrainedArrayTypeDefinition 
	 { $current=$iv_ruleConstrainedArrayTypeDefinition.current; } 
	 EOF 
;

// Rule ConstrainedArrayTypeDefinition
ruleConstrainedArrayTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Array
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstrainedArrayTypeDefinitionAccess().getArrayKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getConstraintIndexConstraintParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleIndexConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstrainedArrayTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"IndexConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstrainedArrayTypeDefinitionAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstrainedArrayTypeDefinitionAccess().getTypeSubtypeIndicationParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleSubtypeIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstrainedArrayTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"SubtypeIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstrainedArrayNatureDefinition
entryRuleConstrainedArrayNatureDefinition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstrainedArrayNatureDefinitionRule()); }
	 iv_ruleConstrainedArrayNatureDefinition=ruleConstrainedArrayNatureDefinition 
	 { $current=$iv_ruleConstrainedArrayNatureDefinition.current; } 
	 EOF 
;

// Rule ConstrainedArrayNatureDefinition
ruleConstrainedArrayNatureDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Array
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstrainedArrayNatureDefinitionAccess().getArrayKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getConstraintIndexConstraintParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleIndexConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstrainedArrayNatureDefinitionRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"IndexConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstrainedArrayNatureDefinitionAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstrainedArrayNatureDefinitionAccess().getNatureSubnatureIndicationParserRuleCall_3_0()); 
	    }
		lv_nature_3_0=ruleSubnatureIndication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstrainedArrayNatureDefinitionRule());
	        }
       		set(
       			$current, 
       			"nature",
        		lv_nature_3_0, 
        		"SubnatureIndication");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWaitStatement
entryRuleWaitStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWaitStatementRule()); }
	 iv_ruleWaitStatement=ruleWaitStatement 
	 { $current=$iv_ruleWaitStatement.current; } 
	 EOF 
;

// Rule WaitStatement
ruleWaitStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getWaitStatementAccess().getWaitStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getWaitStatementAccess().getLabelLabelParserRuleCall_1_0_0()); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaitStatementRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_1_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getWaitStatementAccess().getColonKeyword_1_1());
    }
)?
	otherlv_3=Wait
    {
    	newLeafNode(otherlv_3, grammarAccess.getWaitStatementAccess().getWaitKeyword_2());
    }
(
	otherlv_4=On
    {
    	newLeafNode(otherlv_4, grammarAccess.getWaitStatementAccess().getOnKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWaitStatementAccess().getSensitivityMultiNameParserRuleCall_3_1_0()); 
	    }
		lv_sensitivity_5_0=ruleMultiName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaitStatementRule());
	        }
       		set(
       			$current, 
       			"sensitivity",
        		lv_sensitivity_5_0, 
        		"MultiName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_6=Until
    {
    	newLeafNode(otherlv_6, grammarAccess.getWaitStatementAccess().getUntilKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWaitStatementAccess().getUntilExpressionParserRuleCall_4_1_0()); 
	    }
		lv_until_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaitStatementRule());
	        }
       		set(
       			$current, 
       			"until",
        		lv_until_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_8=For
    {
    	newLeafNode(otherlv_8, grammarAccess.getWaitStatementAccess().getForKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWaitStatementAccess().getTimeExpressionParserRuleCall_5_1_0()); 
	    }
		lv_time_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaitStatementRule());
	        }
       		set(
       			$current, 
       			"time",
        		lv_time_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_10=Semicolon
    {
    	newLeafNode(otherlv_10, grammarAccess.getWaitStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleWaveform
entryRuleWaveform returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWaveformRule()); }
	 iv_ruleWaveform=ruleWaveform 
	 { $current=$iv_ruleWaveform.current; } 
	 EOF 
;

// Rule Waveform
ruleWaveform returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getWaveformAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression
    {
        $current = $this_Expression_0.current;
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getWaveformAccess().getWaveformExpressionExpressionAction_1_0(),
            $current);
    }
)
	otherlv_2=After
    {
    	newLeafNode(otherlv_2, grammarAccess.getWaveformAccess().getAfterKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWaveformAccess().getAfterExpressionParserRuleCall_1_2_0()); 
	    }
		lv_after_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWaveformRule());
	        }
       		set(
       			$current, 
       			"after",
        		lv_after_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNullExpressionRule()); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNullExpressionAccess().getNullExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Null
    {
    	newLeafNode(otherlv_1, grammarAccess.getNullExpressionAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleBitStringName
entryRuleBitStringName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBitStringNameRule()); }
	 iv_ruleBitStringName=ruleBitStringName 
	 { $current=$iv_ruleBitStringName.current; } 
	 EOF 
;

// Rule BitStringName
ruleBitStringName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBitStringNameAccess().getBitStringExpressionAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_BIT_STRING_LITERAL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getBitStringNameAccess().getValueBIT_STRING_LITERALTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BIT_STRING_LITERAL");
	    }

)
))
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueExpressionAccess().getUnitValueExpressionAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_ABSTRACT_LITERAL
		{
			newLeafNode(lv_value_1_0, grammarAccess.getValueExpressionAccess().getValueABSTRACT_LITERALTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ABSTRACT_LITERAL");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getUnitNameParserRuleCall_0_2_0()); 
	    }
		lv_unit_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueExpressionAccess().getValueExpressionAction_1_0(),
            $current);
    }
)(
(
		lv_value_4_0=RULE_ABSTRACT_LITERAL
		{
			newLeafNode(lv_value_4_0, grammarAccess.getValueExpressionAccess().getValueABSTRACT_LITERALTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"ABSTRACT_LITERAL");
	    }

)
)))
;





// Entry rule entryRuleDesignatorName
entryRuleDesignatorName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDesignatorNameRule()); }
	 iv_ruleDesignatorName=ruleDesignatorName 
	 { $current=$iv_ruleDesignatorName.current; } 
	 EOF 
;

// Rule DesignatorName
ruleDesignatorName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDesignatorNameAccess().getIdentifierNameParserRuleCall_0()); 
    }
    this_IdentifierName_0=ruleIdentifierName
    {
        $current = $this_IdentifierName_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDesignatorNameAccess().getStringNameParserRuleCall_1()); 
    }
    this_StringName_1=ruleStringName
    {
        $current = $this_StringName_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDesignator
entryRuleDesignator returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getDesignatorRule()); } 
	 iv_ruleDesignator=ruleDesignator 
	 { $current=$iv_ruleDesignator.current.getText(); }  
	 EOF 
;

// Rule Designator
ruleDesignator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getDesignatorAccess().getIdentifierParserRuleCall_0()); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getDesignatorAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_EXTENDED_IDENTIFIER_1=RULE_EXTENDED_IDENTIFIER    {
		$current.merge(this_EXTENDED_IDENTIFIER_1);
    }

    { 
    newLeafNode(this_EXTENDED_IDENTIFIER_1, grammarAccess.getIdentifierAccess().getEXTENDED_IDENTIFIERTerminalRuleCall_1()); 
    }
)
    ;





// Rule SignalKind
ruleSignalKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Register
    {
        $current = grammarAccess.getSignalKindAccess().getREGISTEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSignalKindAccess().getREGISTEREnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Bus
    {
        $current = grammarAccess.getSignalKindAccess().getBUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSignalKindAccess().getBUSEnumLiteralDeclaration_1()); 
    }
));



// Rule RangeDirection
ruleRangeDirection returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=To
    {
        $current = grammarAccess.getRangeDirectionAccess().getTOEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRangeDirectionAccess().getTOEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Downto
    {
        $current = grammarAccess.getRangeDirectionAccess().getDOWNTOEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRangeDirectionAccess().getDOWNTOEnumLiteralDeclaration_1()); 
    }
));



// Rule Mode
ruleMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=In
    {
        $current = grammarAccess.getModeAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModeAccess().getINEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Out
    {
        $current = grammarAccess.getModeAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getModeAccess().getOUTEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Inout
    {
        $current = grammarAccess.getModeAccess().getINOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getModeAccess().getINOUTEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=Buffer
    {
        $current = grammarAccess.getModeAccess().getBUFFEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getModeAccess().getBUFFEREnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=Linkage
    {
        $current = grammarAccess.getModeAccess().getLINKAGEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getModeAccess().getLINKAGEEnumLiteralDeclaration_4()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Abs
    {
        $current = grammarAccess.getUnaryOperatorAccess().getABSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getABSEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Not
    {
        $current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplyingOperator
ruleMultiplyingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Asterisk
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplyingOperatorAccess().getMULEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Solidus
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplyingOperatorAccess().getDIVEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Mod
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplyingOperatorAccess().getMODEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=Rem
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getREMEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMultiplyingOperatorAccess().getREMEnumLiteralDeclaration_3()); 
    }
));



// Rule ShiftOperator
ruleShiftOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Sll
    {
        $current = grammarAccess.getShiftOperatorAccess().getSLLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getShiftOperatorAccess().getSLLEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Srl
    {
        $current = grammarAccess.getShiftOperatorAccess().getSRLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getShiftOperatorAccess().getSRLEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Sla
    {
        $current = grammarAccess.getShiftOperatorAccess().getSLAEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getShiftOperatorAccess().getSLAEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=Sra
    {
        $current = grammarAccess.getShiftOperatorAccess().getSRAEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getShiftOperatorAccess().getSRAEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=Rol
    {
        $current = grammarAccess.getShiftOperatorAccess().getROLEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getShiftOperatorAccess().getROLEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=Ror
    {
        $current = grammarAccess.getShiftOperatorAccess().getROREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getShiftOperatorAccess().getROREnumLiteralDeclaration_5()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=EqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=SolidusEqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getNEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getNEQEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=LessThanSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getLOWERTHANEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getLOWERTHANEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=LessThanSignEqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getLEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getLEEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=GreaterThanSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getGREATERTHANEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getGREATERTHANEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=GreaterThanSignEqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getGEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationalOperatorAccess().getGEEnumLiteralDeclaration_5()); 
    }
));



// Rule LogicalOperator
ruleLogicalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=And
    {
        $current = grammarAccess.getLogicalOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Or
    {
        $current = grammarAccess.getLogicalOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicalOperatorAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Nand
    {
        $current = grammarAccess.getLogicalOperatorAccess().getNANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getLogicalOperatorAccess().getNANDEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=Nor
    {
        $current = grammarAccess.getLogicalOperatorAccess().getNOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getLogicalOperatorAccess().getNOREnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=Xor
    {
        $current = grammarAccess.getLogicalOperatorAccess().getXOREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getLogicalOperatorAccess().getXOREnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=Xnor
    {
        $current = grammarAccess.getLogicalOperatorAccess().getXNOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getLogicalOperatorAccess().getXNOREnumLiteralDeclaration_5()); 
    }
));



// Rule AddingOperator
ruleAddingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=PlusSign
    {
        $current = grammarAccess.getAddingOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAddingOperatorAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=HyphenMinus
    {
        $current = grammarAccess.getAddingOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAddingOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Ampersand
    {
        $current = grammarAccess.getAddingOperatorAccess().getAMPERSANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAddingOperatorAccess().getAMPERSANDEnumLiteralDeclaration_2()); 
    }
));



// Rule Sign
ruleSign returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=PlusSign
    {
        $current = grammarAccess.getSignAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSignAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=HyphenMinus
    {
        $current = grammarAccess.getSignAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSignAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule Purity
rulePurity returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Pure
    {
        $current = grammarAccess.getPurityAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPurityAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Impure
    {
        $current = grammarAccess.getPurityAccess().getIMPUREEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPurityAccess().getIMPUREEnumLiteralDeclaration_1()); 
    }
));



// Rule EntityClass
ruleEntityClass returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Entity
    {
        $current = grammarAccess.getEntityClassAccess().getENTITYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEntityClassAccess().getENTITYEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Architecture
    {
        $current = grammarAccess.getEntityClassAccess().getARCHITECTUREEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEntityClassAccess().getARCHITECTUREEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Configuration
    {
        $current = grammarAccess.getEntityClassAccess().getCONFIGURATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getEntityClassAccess().getCONFIGURATIONEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=Procedure
    {
        $current = grammarAccess.getEntityClassAccess().getPROCEDUREEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getEntityClassAccess().getPROCEDUREEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=Function
    {
        $current = grammarAccess.getEntityClassAccess().getFUNCTIONEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getEntityClassAccess().getFUNCTIONEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=Package
    {
        $current = grammarAccess.getEntityClassAccess().getPACKAGEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getEntityClassAccess().getPACKAGEEnumLiteralDeclaration_5()); 
    }
)
    |(    enumLiteral_6=Type
    {
        $current = grammarAccess.getEntityClassAccess().getTYPEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getEntityClassAccess().getTYPEEnumLiteralDeclaration_6()); 
    }
)
    |(    enumLiteral_7=Subtype
    {
        $current = grammarAccess.getEntityClassAccess().getSUBTYPEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getEntityClassAccess().getSUBTYPEEnumLiteralDeclaration_7()); 
    }
)
    |(    enumLiteral_8=Constant
    {
        $current = grammarAccess.getEntityClassAccess().getCONSTANTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getEntityClassAccess().getCONSTANTEnumLiteralDeclaration_8()); 
    }
)
    |(    enumLiteral_9=Signal
    {
        $current = grammarAccess.getEntityClassAccess().getSIGNALEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getEntityClassAccess().getSIGNALEnumLiteralDeclaration_9()); 
    }
)
    |(    enumLiteral_10=Variable
    {
        $current = grammarAccess.getEntityClassAccess().getVARIABLEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getEntityClassAccess().getVARIABLEEnumLiteralDeclaration_10()); 
    }
)
    |(    enumLiteral_11=Component
    {
        $current = grammarAccess.getEntityClassAccess().getCOMPONENTEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getEntityClassAccess().getCOMPONENTEnumLiteralDeclaration_11()); 
    }
)
    |(    enumLiteral_12=Label
    {
        $current = grammarAccess.getEntityClassAccess().getLABELEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getEntityClassAccess().getLABELEnumLiteralDeclaration_12()); 
    }
)
    |(    enumLiteral_13=Literal
    {
        $current = grammarAccess.getEntityClassAccess().getLITERALEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getEntityClassAccess().getLITERALEnumLiteralDeclaration_13()); 
    }
)
    |(    enumLiteral_14=Units
    {
        $current = grammarAccess.getEntityClassAccess().getUNITSEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getEntityClassAccess().getUNITSEnumLiteralDeclaration_14()); 
    }
)
    |(    enumLiteral_15=Group
    {
        $current = grammarAccess.getEntityClassAccess().getGROUPEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getEntityClassAccess().getGROUPEnumLiteralDeclaration_15()); 
    }
)
    |(    enumLiteral_16=File
    {
        $current = grammarAccess.getEntityClassAccess().getFILEEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getEntityClassAccess().getFILEEnumLiteralDeclaration_16()); 
    }
)
    |(    enumLiteral_17=Nature
    {
        $current = grammarAccess.getEntityClassAccess().getNATUREEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getEntityClassAccess().getNATUREEnumLiteralDeclaration_17()); 
    }
)
    |(    enumLiteral_18=Subnature
    {
        $current = grammarAccess.getEntityClassAccess().getSUBNATUREEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getEntityClassAccess().getSUBNATUREEnumLiteralDeclaration_18()); 
    }
)
    |(    enumLiteral_19=Quantity
    {
        $current = grammarAccess.getEntityClassAccess().getQUANTITYEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getEntityClassAccess().getQUANTITYEnumLiteralDeclaration_19()); 
    }
)
    |(    enumLiteral_20=Terminal
    {
        $current = grammarAccess.getEntityClassAccess().getTERMINALEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getEntityClassAccess().getTERMINALEnumLiteralDeclaration_20()); 
    }
));



