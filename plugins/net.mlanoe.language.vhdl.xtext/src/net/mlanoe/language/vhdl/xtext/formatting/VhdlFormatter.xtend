/*
 * generated by Xtext
 */
package net.mlanoe.language.vhdl.xtext.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import net.mlanoe.language.vhdl.xtext.services.VhdlGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class VhdlFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension VhdlGrammarAccess
	
	override protected configureFormatting(FormattingConfig c) {
		c.setAutoLinewrap(120);
		
		for(dot: findKeywords('.')) {
			c.setNoLinewrap().around(dot)
			c.setNoSpace().around(dot)
		}
		
		for(comma: findKeywords(',')) {
			c.setNoSpace().before(comma)
		}	
		
		for (semi : findKeywords(';')) {
			c.setNoSpace().before(semi);
		}
		
		for (colon : findKeywords(':')) {
			c.setNoSpace().before(colon);
		}

		for (begin : findKeywords("begin")) {
		      c.setLinewrap().around(begin);
		}

		for (is : findKeywords("then")) {
		      c.setLinewrap().after(is);
		}
		
		for (is : findKeywords("else")) {
		      c.setLinewrap().after(is);
		}

		for (end : findKeywords("end")) {
		      c.setLinewrap().before(end);
		}
		
		/* entity declaration */
		c.setLinewrap(2).before(getEntityAccess().getEntityKeyword_0());
		c.setLinewrap().after(getEntityAccess().getSemicolonKeyword_10());
		
		/* architecture */
		c.setLinewrap(2).before(getArchitectureAccess().getArchitectureKeyword_0());		
		c.setIndentationIncrement().after(getArchitectureAccess().getIsKeyword_4());
		c.setLinewrap().after(getArchitectureAccess().getIsKeyword_4());
		c.setIndentationDecrement().before(getArchitectureAccess().getBeginKeyword_6());
		c.setIndentationIncrement().after(getArchitectureAccess().getBeginKeyword_6());
		c.setIndentationDecrement().before(getArchitectureAccess().getEndKeyword_8());
		c.setLinewrap().after(getArchitectureAccess().getSemicolonKeyword_11());
		
		/* package declaration */		
		c.setIndentationIncrement().after(getPackageAccess().getIsKeyword_2());
		c.setLinewrap().after(getPackageAccess().getIsKeyword_2());
		c.setIndentationDecrement().before(getPackageAccess().getEndKeyword_4());
		c.setLinewrap().after(getPackageAccess().getSemicolonKeyword_7());
		
		/* ...
		 * TAB port map (
		 * TAB TAB ...
		 * TAB TAB ...
		 * TAB )
		 * ... 
		 */
		c.setLinewrap().before(getPortMapsAccess().getPortKeyword_0());		
		c.setIndentationIncrement().before(getPortMapsAccess().getPortKeyword_0());	
		c.setLinewrap().after(getPortMapsAccess().getLeftParenthesisKeyword_2());		
		c.setIndentationIncrement().after(getPortMapsAccess().getLeftParenthesisKeyword_2());
		c.setLinewrap().after(getPortMapsAccess().getCommaKeyword_4_0());
		c.setLinewrap().before(getPortMapsAccess().getRightParenthesisKeyword_5());		
		c.setIndentationDecrement().before(getPortMapsAccess().getRightParenthesisKeyword_5());		
		c.setIndentationDecrement().after(getPortMapsAccess().getRightParenthesisKeyword_5());		

		/* ...
		 * TAB generic map (
		 * TAB TAB ...
		 * TAB TAB ...
		 * TAB )
		 * ... 
		 */
		c.setLinewrap().before(getGenericMapsAccess().getGenericKeyword_0());		
		c.setIndentationIncrement().before(getGenericMapsAccess().getGenericKeyword_0());	
		c.setLinewrap().after(getGenericMapsAccess().getLeftParenthesisKeyword_2());		
		c.setIndentationIncrement().after(getGenericMapsAccess().getLeftParenthesisKeyword_2());
		c.setLinewrap().after(getGenericMapsAccess().getCommaKeyword_4_0());
		c.setLinewrap().before(getGenericMapsAccess().getRightParenthesisKeyword_5());		
		c.setIndentationDecrement().before(getGenericMapsAccess().getRightParenthesisKeyword_5());		
		c.setIndentationDecrement().after(getGenericMapsAccess().getRightParenthesisKeyword_5());		

		/* ...
		 * TAB port (
		 * TAB TAB ...
		 * TAB TAB ...
		 * TAB );
		 * ... 
		 */
		c.setLinewrap().before(getPortsAccess().getPortKeyword_0());		
		c.setIndentationIncrement().before(getPortsAccess().getPortKeyword_0());	
		c.setLinewrap().after(getPortsAccess().getLeftParenthesisKeyword_1());		
		c.setIndentationIncrement().after(getPortsAccess().getLeftParenthesisKeyword_1());
		c.setLinewrap().after(getPortsAccess().getSemicolonKeyword_3_0());
		c.setLinewrap().before(getPortsAccess().getRightParenthesisKeyword_4());		
		c.setIndentationDecrement().before(getPortsAccess().getRightParenthesisKeyword_4());		
		c.setIndentationDecrement().after(getPortsAccess().getRightParenthesisKeyword_4());		
		c.setLinewrap().after(getPortsAccess().getSemicolonKeyword_5());
				
		/* ...
		 * TAB generic (
		 * TAB TAB ...
		 * TAB TAB ...
		 * TAB );
		 * ...
		 */
		c.setLinewrap().before(getGenericsAccess().getGenericKeyword_0());		
		c.setIndentationIncrement().before(getGenericsAccess().getGenericKeyword_0());
		c.setLinewrap().after(getGenericsAccess().getLeftParenthesisKeyword_1());		
		c.setIndentationIncrement().after(getGenericsAccess().getLeftParenthesisKeyword_1());
		c.setLinewrap().after(getGenericsAccess().getSemicolonKeyword_3_0());	
		c.setLinewrap().before(getGenericsAccess().getRightParenthesisKeyword_4());		
		c.setIndentationDecrement().before(getGenericsAccess().getRightParenthesisKeyword_4());		
		c.setIndentationDecrement().after(getGenericsAccess().getRightParenthesisKeyword_4());
		c.setLinewrap().after(getGenericsAccess().getSemicolonKeyword_5());			
		
		/* component */
		c.setLinewrap(2).before(getComponentAccess().getComponentKeyword_0());
		c.setLinewrap(2).after(getComponentAccess().getSemicolonKeyword_8());
			
		/* label : entity */
		c.setLinewrap(2).before(getEntityInstantiationStatementAccess().getNameAssignment_3());
		c.setLinewrap(2).after(getEntityInstantiationStatementAccess().getSemicolonKeyword_6());

		/*
		 * label : process [ ( sensitivity_list ) ] [ is ]
		 *            [ process_declarative_items ]
		 *         begin
		 *            sequential statements
		 *         end process [ label ] ;
		 */
		c.setLinewrap(2).before(getProcessStatementAccess().getGroup());
		c.setIndentationIncrement().after(getProcessStatementAccess().getProcessKeyword_3());
		c.setLinewrap().before(getProcessStatementAccess().getDeclarationAssignment_6());
		c.setIndentationDecrement().before(getProcessStatementAccess().getBeginKeyword_7());
		c.setIndentationIncrement().after(getProcessStatementAccess().getBeginKeyword_7());
		c.setIndentationDecrement().before(getProcessStatementAccess().getEndKeyword_9());
		c.setLinewrap().after(getProcessStatementAccess().getSemicolonKeyword_13());	

		/*
		 * [ label: ] case  expression  is
		 *              when choice1 =>
		 *                 sequence-of-statements
		 *              when choice2 =>            \_ optional
		 *                 sequence-of-statements  /
		 *              ...
		 *
		 *              when others =>             \_ optional if all choices covered
		 *                 sequence-of-statements  /
		 *            end case [ label ] ;
		 */
		c.setLinewrap(2).before(getCaseStatementAccess().getCaseKeyword_1());
		c.setLinewrap().after(getCaseStatementAccess().getIsKeyword_3());
		c.setIndentationIncrement().after(getCaseStatementAccess().getIsKeyword_3());
		c.setIndentationIncrement().after(getCaseStatementAccess().getIsKeyword_3()); // twice
		c.setIndentationDecrement().before(getCaseAlternativeAccess().getWhenKeyword_0());
		c.setIndentationIncrement().after(getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2());
		c.setLinewrap().after(getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_2());
		c.setIndentationDecrement().before(getCaseStatementAccess().getEndKeyword_5());
		c.setIndentationDecrement().before(getCaseStatementAccess().getEndKeyword_5()); // twice
		c.setLinewrap().after(getCaseStatementAccess().getSemicolonKeyword_8());	
		
		/*
		 * [ label: ] if  condition1  then
		 *                 sequence-of-statements
		 *             elsif  condition2  then      \_ optional
		 *                  sequence-of-statements  /
		 *             elsif  condition3  then      \_ optional
		 *                  sequence-of-statements  /
		 *             ...
		 * 
		 *             else                         \_ optional
		 *                  sequence-of-statements  /
		 *             end if [ label ] ;
		 */
 		c.setIndentationIncrement().after(getIfStatementAccess().getIfKeyword_1());
 		c.setIndentationDecrement().before(getIfStatementAccess().getElsifKeyword_3_0());
 		c.setIndentationIncrement().after(getIfStatementAccess().getElsifKeyword_3_0());
 		c.setIndentationDecrement().before(getIfStatementAccess().getElseKeyword_4_0());
 		c.setIndentationIncrement().after(getIfStatementAccess().getElseKeyword_4_0());
  		c.setIndentationDecrement().before(getIfStatementAccess().getEndKeyword_5());
  		c.setLinewrap().after(getIfStatementAccess().getSemicolonKeyword_8());
 
		/*
		 * [ label: ] loop
		 *                  sequence-of-statements -- use exit statement to get out
		 *             end loop [ label ] ;
		 * 
		 *  [ label: ] for variable in range loop
		 *                  sequence-of-statements
		 *             end loop [ label ] ;
		 * 
		 *  [ label: ] while  condition  loop
		 *                  sequence-of-statements
		 *             end loop [ label ] ;
		 */
 		c.setIndentationIncrement().after(getLoopStatementAccess().getLoopKeyword_3());
 		c.setLinewrap().after(getLoopStatementAccess().getLoopKeyword_3());
 		c.setIndentationDecrement().before(getLoopStatementAccess().getEndKeyword_5());
 		c.setLinewrap(2).after(getLoopStatementAccess().getSemicolonKeyword_8());
 		c.setLinewrap().after(getLoopStatementAccess().getSemicolonKeyword_8());
 		
 		/* Name */
 		c.setNoSpace().before(getNameSuffixAccess().getAlternatives());

		/* type declaration */
		c.setLinewrap().after(getTypeDeclarationAccess().getSemicolonKeyword_3());
		
		/* procedure declaration */
		c.setLinewrap().after(getProcedureDeclarationAccess().getSemicolonKeyword_5());
		
		/* function declaration */
		c.setLinewrap().after(getFunctionDeclarationAccess().getSemicolonKeyword_8());

		/* subtype declaration */
		c.setLinewrap().after(getSubtypeDeclarationAccess().getSemicolonKeyword_4());
		
		/* sequential signal assignment statement
		 * conditional signal assignment statement
		 * selected signal assignment statement
		 * variable assignment statement
		 */
		c.setLinewrap().after(getSequentialSignalAssignmentStatementAccess().getSemicolonKeyword_7());
		c.setLinewrap().after(getConditionalSignalAssignmentStatementAccess().getSemicolonKeyword_8());
		c.setLinewrap().after(getSelectedSignalAssignmentStatementAccess().getSemicolonKeyword_11());
		c.setLinewrap().after(getVariableAssignmentStatementAccess().getSemicolonKeyword_4());
		
		/* signal declaration 
		 * constant declaration
		 * variable declaration
		 */
		c.setLinewrap().after(getSignalDeclarationAccess().getSemicolonKeyword_6());
		c.setLinewrap().after(getConstantDeclarationAccess().getSemicolonKeyword_5());
		c.setLinewrap().after(getVariableDeclarationAccess().getSemicolonKeyword_6());			

		/* comment */
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
	}
}
